
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000043b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d0  00800060  000043b4  00004448  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800130  00800130  00004518  2**0
                  ALLOC
  3 .stab         000035b8  00000000  00000000  00004518  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010d4  00000000  00000000  00007ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008e54  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000aa9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b988  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c738  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c898  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000cb25  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d2f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 e4 1f 	jmp	0x3fc8	; 0x3fc8 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 11 20 	jmp	0x4022	; 0x4022 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 eb       	ldi	r30, 0xB4	; 180
      68:	f3 e4       	ldi	r31, 0x43	; 67
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 33       	cpi	r26, 0x30	; 48
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e3       	ldi	r26, 0x30	; 48
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 33       	cpi	r26, 0x34	; 52
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ba 05 	call	0xb74	; 0xb74 <main>
      8a:	0c 94 d8 21 	jmp	0x43b0	; 0x43b0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 5c 21 	jmp	0x42b8	; 0x42b8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e2       	ldi	r26, 0x20	; 32
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 78 21 	jmp	0x42f0	; 0x42f0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 68 21 	jmp	0x42d0	; 0x42d0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 84 21 	jmp	0x4308	; 0x4308 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 68 21 	jmp	0x42d0	; 0x42d0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 84 21 	jmp	0x4308	; 0x4308 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 5c 21 	jmp	0x42b8	; 0x42b8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e2       	ldi	r24, 0x20	; 32
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 78 21 	jmp	0x42f0	; 0x42f0 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 68 21 	jmp	0x42d0	; 0x42d0 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 84 21 	jmp	0x4308	; 0x4308 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 68 21 	jmp	0x42d0	; 0x42d0 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 84 21 	jmp	0x4308	; 0x4308 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 68 21 	jmp	0x42d0	; 0x42d0 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 84 21 	jmp	0x4308	; 0x4308 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 6c 21 	jmp	0x42d8	; 0x42d8 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 88 21 	jmp	0x4310	; 0x4310 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <timer1CLBK>:

uint8 g_ticks = 0;
uint8 g_clbk = 0;

void timer1CLBK()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	g_ticks ++;
     b4e:	80 91 30 01 	lds	r24, 0x0130
     b52:	8f 5f       	subi	r24, 0xFF	; 255
     b54:	80 93 30 01 	sts	0x0130, r24
	if (g_ticks ==2)
     b58:	80 91 30 01 	lds	r24, 0x0130
     b5c:	82 30       	cpi	r24, 0x02	; 2
     b5e:	39 f4       	brne	.+14     	; 0xb6e <timer1CLBK+0x28>
	{
		g_clbk ++;
     b60:	80 91 31 01 	lds	r24, 0x0131
     b64:	8f 5f       	subi	r24, 0xFF	; 255
     b66:	80 93 31 01 	sts	0x0131, r24
		g_ticks = 0;
     b6a:	10 92 30 01 	sts	0x0130, r1
	}
}
     b6e:	cf 91       	pop	r28
     b70:	df 91       	pop	r29
     b72:	08 95       	ret

00000b74 <main>:


int main (void)
{
     b74:	0f 93       	push	r16
     b76:	1f 93       	push	r17
     b78:	df 93       	push	r29
     b7a:	cf 93       	push	r28
     b7c:	cd b7       	in	r28, 0x3d	; 61
     b7e:	de b7       	in	r29, 0x3e	; 62
     b80:	c4 5c       	subi	r28, 0xC4	; 196
     b82:	d0 40       	sbci	r29, 0x00	; 0
     b84:	0f b6       	in	r0, 0x3f	; 63
     b86:	f8 94       	cli
     b88:	de bf       	out	0x3e, r29	; 62
     b8a:	0f be       	out	0x3f, r0	; 63
     b8c:	cd bf       	out	0x3d, r28	; 61

	uint8 UART_data [15];
	uint8 counter,key;
	uint8 sel_key = '0';
     b8e:	fe 01       	movw	r30, r28
     b90:	e1 56       	subi	r30, 0x61	; 97
     b92:	ff 4f       	sbci	r31, 0xFF	; 255
     b94:	80 e3       	ldi	r24, 0x30	; 48
     b96:	80 83       	st	Z, r24
	uint8 case_select = 0;
     b98:	fe 01       	movw	r30, r28
     b9a:	e2 56       	subi	r30, 0x62	; 98
     b9c:	ff 4f       	sbci	r31, 0xFF	; 255
     b9e:	10 82       	st	Z, r1
	uint8 wrongPass = 0;
     ba0:	fe 01       	movw	r30, r28
     ba2:	e3 56       	subi	r30, 0x63	; 99
     ba4:	ff 4f       	sbci	r31, 0xFF	; 255
     ba6:	10 82       	st	Z, r1

	LCD_init();
     ba8:	0e 94 23 15 	call	0x2a46	; 0x2a46 <LCD_init>

	UART_ConfigType UART_Con = {Bit_8,Disabled,One,9600};
     bac:	ce 01       	movw	r24, r28
     bae:	8f 54       	subi	r24, 0x4F	; 79
     bb0:	9f 4f       	sbci	r25, 0xFF	; 255
     bb2:	c0 54       	subi	r28, 0x40	; 64
     bb4:	df 4f       	sbci	r29, 0xFF	; 255
     bb6:	99 83       	std	Y+1, r25	; 0x01
     bb8:	88 83       	st	Y, r24
     bba:	c0 5c       	subi	r28, 0xC0	; 192
     bbc:	d0 40       	sbci	r29, 0x00	; 0
     bbe:	28 e2       	ldi	r18, 0x28	; 40
     bc0:	31 e0       	ldi	r19, 0x01	; 1
     bc2:	ce 53       	subi	r28, 0x3E	; 62
     bc4:	df 4f       	sbci	r29, 0xFF	; 255
     bc6:	39 83       	std	Y+1, r19	; 0x01
     bc8:	28 83       	st	Y, r18
     bca:	c2 5c       	subi	r28, 0xC2	; 194
     bcc:	d0 40       	sbci	r29, 0x00	; 0
     bce:	37 e0       	ldi	r19, 0x07	; 7
     bd0:	cc 53       	subi	r28, 0x3C	; 60
     bd2:	df 4f       	sbci	r29, 0xFF	; 255
     bd4:	38 83       	st	Y, r19
     bd6:	c4 5c       	subi	r28, 0xC4	; 196
     bd8:	d0 40       	sbci	r29, 0x00	; 0
     bda:	ce 53       	subi	r28, 0x3E	; 62
     bdc:	df 4f       	sbci	r29, 0xFF	; 255
     bde:	e8 81       	ld	r30, Y
     be0:	f9 81       	ldd	r31, Y+1	; 0x01
     be2:	c2 5c       	subi	r28, 0xC2	; 194
     be4:	d0 40       	sbci	r29, 0x00	; 0
     be6:	00 80       	ld	r0, Z
     be8:	ce 53       	subi	r28, 0x3E	; 62
     bea:	df 4f       	sbci	r29, 0xFF	; 255
     bec:	28 81       	ld	r18, Y
     bee:	39 81       	ldd	r19, Y+1	; 0x01
     bf0:	c2 5c       	subi	r28, 0xC2	; 194
     bf2:	d0 40       	sbci	r29, 0x00	; 0
     bf4:	2f 5f       	subi	r18, 0xFF	; 255
     bf6:	3f 4f       	sbci	r19, 0xFF	; 255
     bf8:	ce 53       	subi	r28, 0x3E	; 62
     bfa:	df 4f       	sbci	r29, 0xFF	; 255
     bfc:	39 83       	std	Y+1, r19	; 0x01
     bfe:	28 83       	st	Y, r18
     c00:	c2 5c       	subi	r28, 0xC2	; 194
     c02:	d0 40       	sbci	r29, 0x00	; 0
     c04:	c0 54       	subi	r28, 0x40	; 64
     c06:	df 4f       	sbci	r29, 0xFF	; 255
     c08:	e8 81       	ld	r30, Y
     c0a:	f9 81       	ldd	r31, Y+1	; 0x01
     c0c:	c0 5c       	subi	r28, 0xC0	; 192
     c0e:	d0 40       	sbci	r29, 0x00	; 0
     c10:	00 82       	st	Z, r0
     c12:	c0 54       	subi	r28, 0x40	; 64
     c14:	df 4f       	sbci	r29, 0xFF	; 255
     c16:	28 81       	ld	r18, Y
     c18:	39 81       	ldd	r19, Y+1	; 0x01
     c1a:	c0 5c       	subi	r28, 0xC0	; 192
     c1c:	d0 40       	sbci	r29, 0x00	; 0
     c1e:	2f 5f       	subi	r18, 0xFF	; 255
     c20:	3f 4f       	sbci	r19, 0xFF	; 255
     c22:	c0 54       	subi	r28, 0x40	; 64
     c24:	df 4f       	sbci	r29, 0xFF	; 255
     c26:	39 83       	std	Y+1, r19	; 0x01
     c28:	28 83       	st	Y, r18
     c2a:	c0 5c       	subi	r28, 0xC0	; 192
     c2c:	d0 40       	sbci	r29, 0x00	; 0
     c2e:	cc 53       	subi	r28, 0x3C	; 60
     c30:	df 4f       	sbci	r29, 0xFF	; 255
     c32:	38 81       	ld	r19, Y
     c34:	c4 5c       	subi	r28, 0xC4	; 196
     c36:	d0 40       	sbci	r29, 0x00	; 0
     c38:	31 50       	subi	r19, 0x01	; 1
     c3a:	cc 53       	subi	r28, 0x3C	; 60
     c3c:	df 4f       	sbci	r29, 0xFF	; 255
     c3e:	38 83       	st	Y, r19
     c40:	c4 5c       	subi	r28, 0xC4	; 196
     c42:	d0 40       	sbci	r29, 0x00	; 0
     c44:	cc 53       	subi	r28, 0x3C	; 60
     c46:	df 4f       	sbci	r29, 0xFF	; 255
     c48:	88 81       	ld	r24, Y
     c4a:	c4 5c       	subi	r28, 0xC4	; 196
     c4c:	d0 40       	sbci	r29, 0x00	; 0
     c4e:	88 23       	and	r24, r24
     c50:	21 f6       	brne	.-120    	; 0xbda <main+0x66>
	UART_init(&UART_Con);
     c52:	ce 01       	movw	r24, r28
     c54:	8f 54       	subi	r24, 0x4F	; 79
     c56:	9f 4f       	sbci	r25, 0xFF	; 255
     c58:	0e 94 3e 20 	call	0x407c	; 0x407c <UART_init>

	Timer1_setCallBack (timer1CLBK);
     c5c:	83 ea       	ldi	r24, 0xA3	; 163
     c5e:	95 e0       	ldi	r25, 0x05	; 5
     c60:	0e 94 d2 1f 	call	0x3fa4	; 0x3fa4 <Timer1_setCallBack>
	Timer1_ConfigType Timer1_con ;

	SREG |= (1<<7); /* Enable global interrupts in MC */
     c64:	af e5       	ldi	r26, 0x5F	; 95
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	ef e5       	ldi	r30, 0x5F	; 95
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	80 68       	ori	r24, 0x80	; 128
     c70:	8c 93       	st	X, r24

	LCD_displayString("plz enter pass");
     c72:	80 e6       	ldi	r24, 0x60	; 96
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <LCD_displayString>
	while(1)
	{
		switch (case_select)
     c7a:	fe 01       	movw	r30, r28
     c7c:	e2 56       	subi	r30, 0x62	; 98
     c7e:	ff 4f       	sbci	r31, 0xFF	; 255
     c80:	80 81       	ld	r24, Z
     c82:	e8 2f       	mov	r30, r24
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	c2 54       	subi	r28, 0x42	; 66
     c88:	df 4f       	sbci	r29, 0xFF	; 255
     c8a:	f9 83       	std	Y+1, r31	; 0x01
     c8c:	e8 83       	st	Y, r30
     c8e:	ce 5b       	subi	r28, 0xBE	; 190
     c90:	d0 40       	sbci	r29, 0x00	; 0
     c92:	c2 54       	subi	r28, 0x42	; 66
     c94:	df 4f       	sbci	r29, 0xFF	; 255
     c96:	28 81       	ld	r18, Y
     c98:	39 81       	ldd	r19, Y+1	; 0x01
     c9a:	ce 5b       	subi	r28, 0xBE	; 190
     c9c:	d0 40       	sbci	r29, 0x00	; 0
     c9e:	21 30       	cpi	r18, 0x01	; 1
     ca0:	31 05       	cpc	r19, r1
     ca2:	09 f4       	brne	.+2      	; 0xca6 <main+0x132>
     ca4:	e3 c3       	rjmp	.+1990   	; 0x146c <main+0x8f8>
     ca6:	c2 54       	subi	r28, 0x42	; 66
     ca8:	df 4f       	sbci	r29, 0xFF	; 255
     caa:	88 81       	ld	r24, Y
     cac:	99 81       	ldd	r25, Y+1	; 0x01
     cae:	ce 5b       	subi	r28, 0xBE	; 190
     cb0:	d0 40       	sbci	r29, 0x00	; 0
     cb2:	82 30       	cpi	r24, 0x02	; 2
     cb4:	91 05       	cpc	r25, r1
     cb6:	09 f4       	brne	.+2      	; 0xcba <main+0x146>
     cb8:	04 c4       	rjmp	.+2056   	; 0x14c2 <main+0x94e>
     cba:	c2 54       	subi	r28, 0x42	; 66
     cbc:	df 4f       	sbci	r29, 0xFF	; 255
     cbe:	e8 81       	ld	r30, Y
     cc0:	f9 81       	ldd	r31, Y+1	; 0x01
     cc2:	ce 5b       	subi	r28, 0xBE	; 190
     cc4:	d0 40       	sbci	r29, 0x00	; 0
     cc6:	30 97       	sbiw	r30, 0x00	; 0
     cc8:	c1 f6       	brne	.-80     	; 0xc7a <main+0x106>
		{
		case 0 :
			LCD_moveCursor(1,0);
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	0e 94 f4 1e 	call	0x3de8	; 0x3de8 <LCD_moveCursor>
			UART_data [0] = '1';
     cd2:	fe 01       	movw	r30, r28
     cd4:	ee 55       	subi	r30, 0x5E	; 94
     cd6:	ff 4f       	sbci	r31, 0xFF	; 255
     cd8:	81 e3       	ldi	r24, 0x31	; 49
     cda:	80 83       	st	Z, r24
			for(counter = 0 ; counter<5 ; counter++)
     cdc:	fe 01       	movw	r30, r28
     cde:	ef 55       	subi	r30, 0x5F	; 95
     ce0:	ff 4f       	sbci	r31, 0xFF	; 255
     ce2:	10 82       	st	Z, r1
     ce4:	43 c0       	rjmp	.+134    	; 0xd6c <main+0x1f8>
			{
				key = KEYPAD_getPressedKey();
     ce6:	0e 94 86 13 	call	0x270c	; 0x270c <KEYPAD_getPressedKey>
     cea:	fe 01       	movw	r30, r28
     cec:	e0 56       	subi	r30, 0x60	; 96
     cee:	ff 4f       	sbci	r31, 0xFF	; 255
     cf0:	80 83       	st	Z, r24
				if (key <=13)
     cf2:	fe 01       	movw	r30, r28
     cf4:	e0 56       	subi	r30, 0x60	; 96
     cf6:	ff 4f       	sbci	r31, 0xFF	; 255
     cf8:	80 81       	ld	r24, Z
     cfa:	8e 30       	cpi	r24, 0x0E	; 14
     cfc:	b8 f4       	brcc	.+46     	; 0xd2c <main+0x1b8>
					UART_data[counter+1] = key +'0'  ;
     cfe:	fe 01       	movw	r30, r28
     d00:	ef 55       	subi	r30, 0x5F	; 95
     d02:	ff 4f       	sbci	r31, 0xFF	; 255
     d04:	80 81       	ld	r24, Z
     d06:	88 2f       	mov	r24, r24
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	9c 01       	movw	r18, r24
     d0c:	2f 5f       	subi	r18, 0xFF	; 255
     d0e:	3f 4f       	sbci	r19, 0xFF	; 255
     d10:	fe 01       	movw	r30, r28
     d12:	e0 56       	subi	r30, 0x60	; 96
     d14:	ff 4f       	sbci	r31, 0xFF	; 255
     d16:	80 81       	ld	r24, Z
     d18:	48 2f       	mov	r20, r24
     d1a:	40 5d       	subi	r20, 0xD0	; 208
     d1c:	ce 01       	movw	r24, r28
     d1e:	8e 55       	subi	r24, 0x5E	; 94
     d20:	9f 4f       	sbci	r25, 0xFF	; 255
     d22:	fc 01       	movw	r30, r24
     d24:	e2 0f       	add	r30, r18
     d26:	f3 1f       	adc	r31, r19
     d28:	40 83       	st	Z, r20
     d2a:	14 c0       	rjmp	.+40     	; 0xd54 <main+0x1e0>

				else UART_data[counter+1] = key;
     d2c:	fe 01       	movw	r30, r28
     d2e:	ef 55       	subi	r30, 0x5F	; 95
     d30:	ff 4f       	sbci	r31, 0xFF	; 255
     d32:	80 81       	ld	r24, Z
     d34:	88 2f       	mov	r24, r24
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	9c 01       	movw	r18, r24
     d3a:	2f 5f       	subi	r18, 0xFF	; 255
     d3c:	3f 4f       	sbci	r19, 0xFF	; 255
     d3e:	ce 01       	movw	r24, r28
     d40:	8e 55       	subi	r24, 0x5E	; 94
     d42:	9f 4f       	sbci	r25, 0xFF	; 255
     d44:	dc 01       	movw	r26, r24
     d46:	a2 0f       	add	r26, r18
     d48:	b3 1f       	adc	r27, r19
     d4a:	fe 01       	movw	r30, r28
     d4c:	e0 56       	subi	r30, 0x60	; 96
     d4e:	ff 4f       	sbci	r31, 0xFF	; 255
     d50:	80 81       	ld	r24, Z
     d52:	8c 93       	st	X, r24
				LCD_displayCharacter('*');
     d54:	8a e2       	ldi	r24, 0x2A	; 42
     d56:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <LCD_displayCharacter>
		switch (case_select)
		{
		case 0 :
			LCD_moveCursor(1,0);
			UART_data [0] = '1';
			for(counter = 0 ; counter<5 ; counter++)
     d5a:	de 01       	movw	r26, r28
     d5c:	af 55       	subi	r26, 0x5F	; 95
     d5e:	bf 4f       	sbci	r27, 0xFF	; 255
     d60:	fe 01       	movw	r30, r28
     d62:	ef 55       	subi	r30, 0x5F	; 95
     d64:	ff 4f       	sbci	r31, 0xFF	; 255
     d66:	80 81       	ld	r24, Z
     d68:	8f 5f       	subi	r24, 0xFF	; 255
     d6a:	8c 93       	st	X, r24
     d6c:	fe 01       	movw	r30, r28
     d6e:	ef 55       	subi	r30, 0x5F	; 95
     d70:	ff 4f       	sbci	r31, 0xFF	; 255
     d72:	80 81       	ld	r24, Z
     d74:	85 30       	cpi	r24, 0x05	; 5
     d76:	08 f4       	brcc	.+2      	; 0xd7a <main+0x206>
     d78:	b6 cf       	rjmp	.-148    	; 0xce6 <main+0x172>

				else UART_data[counter+1] = key;
				LCD_displayCharacter('*');
			}

			while(KEYPAD_getPressedKey() != '=');
     d7a:	0e 94 86 13 	call	0x270c	; 0x270c <KEYPAD_getPressedKey>
     d7e:	8d 33       	cpi	r24, 0x3D	; 61
     d80:	e1 f7       	brne	.-8      	; 0xd7a <main+0x206>

			UART_data [6] = '$';
     d82:	fe 01       	movw	r30, r28
     d84:	ee 55       	subi	r30, 0x5E	; 94
     d86:	ff 4f       	sbci	r31, 0xFF	; 255
     d88:	84 e2       	ldi	r24, 0x24	; 36
     d8a:	86 83       	std	Z+6, r24	; 0x06
			LCD_moveCursor(0,0);
     d8c:	80 e0       	ldi	r24, 0x00	; 0
     d8e:	60 e0       	ldi	r22, 0x00	; 0
     d90:	0e 94 f4 1e 	call	0x3de8	; 0x3de8 <LCD_moveCursor>
			LCD_displayString("plz re-enter the");
     d94:	8f e6       	ldi	r24, 0x6F	; 111
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <LCD_displayString>
			LCD_moveCursor(1,0);
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	60 e0       	ldi	r22, 0x00	; 0
     da0:	0e 94 f4 1e 	call	0x3de8	; 0x3de8 <LCD_moveCursor>
			LCD_displayString("same pass: ");
     da4:	80 e8       	ldi	r24, 0x80	; 128
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <LCD_displayString>

			for(counter = 0 ; counter<5 ; counter++)
     dac:	fe 01       	movw	r30, r28
     dae:	ef 55       	subi	r30, 0x5F	; 95
     db0:	ff 4f       	sbci	r31, 0xFF	; 255
     db2:	10 82       	st	Z, r1
     db4:	43 c0       	rjmp	.+134    	; 0xe3c <main+0x2c8>
			{
				key = KEYPAD_getPressedKey();
     db6:	0e 94 86 13 	call	0x270c	; 0x270c <KEYPAD_getPressedKey>
     dba:	fe 01       	movw	r30, r28
     dbc:	e0 56       	subi	r30, 0x60	; 96
     dbe:	ff 4f       	sbci	r31, 0xFF	; 255
     dc0:	80 83       	st	Z, r24
				if (key <=13)
     dc2:	fe 01       	movw	r30, r28
     dc4:	e0 56       	subi	r30, 0x60	; 96
     dc6:	ff 4f       	sbci	r31, 0xFF	; 255
     dc8:	80 81       	ld	r24, Z
     dca:	8e 30       	cpi	r24, 0x0E	; 14
     dcc:	b8 f4       	brcc	.+46     	; 0xdfc <main+0x288>
					UART_data[counter+7] = key +'0'  ;
     dce:	fe 01       	movw	r30, r28
     dd0:	ef 55       	subi	r30, 0x5F	; 95
     dd2:	ff 4f       	sbci	r31, 0xFF	; 255
     dd4:	80 81       	ld	r24, Z
     dd6:	88 2f       	mov	r24, r24
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	9c 01       	movw	r18, r24
     ddc:	29 5f       	subi	r18, 0xF9	; 249
     dde:	3f 4f       	sbci	r19, 0xFF	; 255
     de0:	fe 01       	movw	r30, r28
     de2:	e0 56       	subi	r30, 0x60	; 96
     de4:	ff 4f       	sbci	r31, 0xFF	; 255
     de6:	80 81       	ld	r24, Z
     de8:	48 2f       	mov	r20, r24
     dea:	40 5d       	subi	r20, 0xD0	; 208
     dec:	ce 01       	movw	r24, r28
     dee:	8e 55       	subi	r24, 0x5E	; 94
     df0:	9f 4f       	sbci	r25, 0xFF	; 255
     df2:	fc 01       	movw	r30, r24
     df4:	e2 0f       	add	r30, r18
     df6:	f3 1f       	adc	r31, r19
     df8:	40 83       	st	Z, r20
     dfa:	14 c0       	rjmp	.+40     	; 0xe24 <main+0x2b0>

				else UART_data[counter+7] = key;
     dfc:	fe 01       	movw	r30, r28
     dfe:	ef 55       	subi	r30, 0x5F	; 95
     e00:	ff 4f       	sbci	r31, 0xFF	; 255
     e02:	80 81       	ld	r24, Z
     e04:	88 2f       	mov	r24, r24
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	9c 01       	movw	r18, r24
     e0a:	29 5f       	subi	r18, 0xF9	; 249
     e0c:	3f 4f       	sbci	r19, 0xFF	; 255
     e0e:	ce 01       	movw	r24, r28
     e10:	8e 55       	subi	r24, 0x5E	; 94
     e12:	9f 4f       	sbci	r25, 0xFF	; 255
     e14:	dc 01       	movw	r26, r24
     e16:	a2 0f       	add	r26, r18
     e18:	b3 1f       	adc	r27, r19
     e1a:	fe 01       	movw	r30, r28
     e1c:	e0 56       	subi	r30, 0x60	; 96
     e1e:	ff 4f       	sbci	r31, 0xFF	; 255
     e20:	80 81       	ld	r24, Z
     e22:	8c 93       	st	X, r24
				LCD_displayCharacter('*');
     e24:	8a e2       	ldi	r24, 0x2A	; 42
     e26:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <LCD_displayCharacter>
			LCD_moveCursor(0,0);
			LCD_displayString("plz re-enter the");
			LCD_moveCursor(1,0);
			LCD_displayString("same pass: ");

			for(counter = 0 ; counter<5 ; counter++)
     e2a:	de 01       	movw	r26, r28
     e2c:	af 55       	subi	r26, 0x5F	; 95
     e2e:	bf 4f       	sbci	r27, 0xFF	; 255
     e30:	fe 01       	movw	r30, r28
     e32:	ef 55       	subi	r30, 0x5F	; 95
     e34:	ff 4f       	sbci	r31, 0xFF	; 255
     e36:	80 81       	ld	r24, Z
     e38:	8f 5f       	subi	r24, 0xFF	; 255
     e3a:	8c 93       	st	X, r24
     e3c:	fe 01       	movw	r30, r28
     e3e:	ef 55       	subi	r30, 0x5F	; 95
     e40:	ff 4f       	sbci	r31, 0xFF	; 255
     e42:	80 81       	ld	r24, Z
     e44:	85 30       	cpi	r24, 0x05	; 5
     e46:	08 f4       	brcc	.+2      	; 0xe4a <main+0x2d6>
     e48:	b6 cf       	rjmp	.-148    	; 0xdb6 <main+0x242>

				else UART_data[counter+7] = key;
				LCD_displayCharacter('*');
			}

			while(KEYPAD_getPressedKey() != '=');
     e4a:	0e 94 86 13 	call	0x270c	; 0x270c <KEYPAD_getPressedKey>
     e4e:	8d 33       	cpi	r24, 0x3D	; 61
     e50:	e1 f7       	brne	.-8      	; 0xe4a <main+0x2d6>

			UART_data[12] = '#';
     e52:	fe 01       	movw	r30, r28
     e54:	ee 55       	subi	r30, 0x5E	; 94
     e56:	ff 4f       	sbci	r31, 0xFF	; 255
     e58:	83 e2       	ldi	r24, 0x23	; 35
     e5a:	84 87       	std	Z+12, r24	; 0x0c
			UART_data[13] = '\0';
     e5c:	fe 01       	movw	r30, r28
     e5e:	ee 55       	subi	r30, 0x5E	; 94
     e60:	ff 4f       	sbci	r31, 0xFF	; 255
     e62:	15 86       	std	Z+13, r1	; 0x0d
			UART_sendString(UART_data);
     e64:	ce 01       	movw	r24, r28
     e66:	8e 55       	subi	r24, 0x5E	; 94
     e68:	9f 4f       	sbci	r25, 0xFF	; 255
     e6a:	0e 94 ce 20 	call	0x419c	; 0x419c <UART_sendString>
     e6e:	fe 01       	movw	r30, r28
     e70:	e9 56       	subi	r30, 0x69	; 105
     e72:	ff 4f       	sbci	r31, 0xFF	; 255
     e74:	80 e0       	ldi	r24, 0x00	; 0
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	a0 e2       	ldi	r26, 0x20	; 32
     e7a:	b1 e4       	ldi	r27, 0x41	; 65
     e7c:	80 83       	st	Z, r24
     e7e:	91 83       	std	Z+1, r25	; 0x01
     e80:	a2 83       	std	Z+2, r26	; 0x02
     e82:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e84:	8e 01       	movw	r16, r28
     e86:	0d 56       	subi	r16, 0x6D	; 109
     e88:	1f 4f       	sbci	r17, 0xFF	; 255
     e8a:	fe 01       	movw	r30, r28
     e8c:	e9 56       	subi	r30, 0x69	; 105
     e8e:	ff 4f       	sbci	r31, 0xFF	; 255
     e90:	60 81       	ld	r22, Z
     e92:	71 81       	ldd	r23, Z+1	; 0x01
     e94:	82 81       	ldd	r24, Z+2	; 0x02
     e96:	93 81       	ldd	r25, Z+3	; 0x03
     e98:	20 e0       	ldi	r18, 0x00	; 0
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	4a ef       	ldi	r20, 0xFA	; 250
     e9e:	54 e4       	ldi	r21, 0x44	; 68
     ea0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ea4:	dc 01       	movw	r26, r24
     ea6:	cb 01       	movw	r24, r22
     ea8:	f8 01       	movw	r30, r16
     eaa:	80 83       	st	Z, r24
     eac:	91 83       	std	Z+1, r25	; 0x01
     eae:	a2 83       	std	Z+2, r26	; 0x02
     eb0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     eb2:	fe 01       	movw	r30, r28
     eb4:	ed 56       	subi	r30, 0x6D	; 109
     eb6:	ff 4f       	sbci	r31, 0xFF	; 255
     eb8:	60 81       	ld	r22, Z
     eba:	71 81       	ldd	r23, Z+1	; 0x01
     ebc:	82 81       	ldd	r24, Z+2	; 0x02
     ebe:	93 81       	ldd	r25, Z+3	; 0x03
     ec0:	20 e0       	ldi	r18, 0x00	; 0
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	40 e8       	ldi	r20, 0x80	; 128
     ec6:	5f e3       	ldi	r21, 0x3F	; 63
     ec8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ecc:	88 23       	and	r24, r24
     ece:	44 f4       	brge	.+16     	; 0xee0 <main+0x36c>
		__ticks = 1;
     ed0:	fe 01       	movw	r30, r28
     ed2:	ef 56       	subi	r30, 0x6F	; 111
     ed4:	ff 4f       	sbci	r31, 0xFF	; 255
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	91 83       	std	Z+1, r25	; 0x01
     edc:	80 83       	st	Z, r24
     ede:	64 c0       	rjmp	.+200    	; 0xfa8 <main+0x434>
	else if (__tmp > 65535)
     ee0:	fe 01       	movw	r30, r28
     ee2:	ed 56       	subi	r30, 0x6D	; 109
     ee4:	ff 4f       	sbci	r31, 0xFF	; 255
     ee6:	60 81       	ld	r22, Z
     ee8:	71 81       	ldd	r23, Z+1	; 0x01
     eea:	82 81       	ldd	r24, Z+2	; 0x02
     eec:	93 81       	ldd	r25, Z+3	; 0x03
     eee:	20 e0       	ldi	r18, 0x00	; 0
     ef0:	3f ef       	ldi	r19, 0xFF	; 255
     ef2:	4f e7       	ldi	r20, 0x7F	; 127
     ef4:	57 e4       	ldi	r21, 0x47	; 71
     ef6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     efa:	18 16       	cp	r1, r24
     efc:	0c f0       	brlt	.+2      	; 0xf00 <main+0x38c>
     efe:	43 c0       	rjmp	.+134    	; 0xf86 <main+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f00:	fe 01       	movw	r30, r28
     f02:	e9 56       	subi	r30, 0x69	; 105
     f04:	ff 4f       	sbci	r31, 0xFF	; 255
     f06:	60 81       	ld	r22, Z
     f08:	71 81       	ldd	r23, Z+1	; 0x01
     f0a:	82 81       	ldd	r24, Z+2	; 0x02
     f0c:	93 81       	ldd	r25, Z+3	; 0x03
     f0e:	20 e0       	ldi	r18, 0x00	; 0
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	40 e2       	ldi	r20, 0x20	; 32
     f14:	51 e4       	ldi	r21, 0x41	; 65
     f16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f1a:	dc 01       	movw	r26, r24
     f1c:	cb 01       	movw	r24, r22
     f1e:	8e 01       	movw	r16, r28
     f20:	0f 56       	subi	r16, 0x6F	; 111
     f22:	1f 4f       	sbci	r17, 0xFF	; 255
     f24:	bc 01       	movw	r22, r24
     f26:	cd 01       	movw	r24, r26
     f28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f2c:	dc 01       	movw	r26, r24
     f2e:	cb 01       	movw	r24, r22
     f30:	f8 01       	movw	r30, r16
     f32:	91 83       	std	Z+1, r25	; 0x01
     f34:	80 83       	st	Z, r24
     f36:	1f c0       	rjmp	.+62     	; 0xf76 <main+0x402>
     f38:	fe 01       	movw	r30, r28
     f3a:	e1 57       	subi	r30, 0x71	; 113
     f3c:	ff 4f       	sbci	r31, 0xFF	; 255
     f3e:	88 ec       	ldi	r24, 0xC8	; 200
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	91 83       	std	Z+1, r25	; 0x01
     f44:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f46:	fe 01       	movw	r30, r28
     f48:	e1 57       	subi	r30, 0x71	; 113
     f4a:	ff 4f       	sbci	r31, 0xFF	; 255
     f4c:	80 81       	ld	r24, Z
     f4e:	91 81       	ldd	r25, Z+1	; 0x01
     f50:	01 97       	sbiw	r24, 0x01	; 1
     f52:	f1 f7       	brne	.-4      	; 0xf50 <main+0x3dc>
     f54:	fe 01       	movw	r30, r28
     f56:	e1 57       	subi	r30, 0x71	; 113
     f58:	ff 4f       	sbci	r31, 0xFF	; 255
     f5a:	91 83       	std	Z+1, r25	; 0x01
     f5c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f5e:	de 01       	movw	r26, r28
     f60:	af 56       	subi	r26, 0x6F	; 111
     f62:	bf 4f       	sbci	r27, 0xFF	; 255
     f64:	fe 01       	movw	r30, r28
     f66:	ef 56       	subi	r30, 0x6F	; 111
     f68:	ff 4f       	sbci	r31, 0xFF	; 255
     f6a:	80 81       	ld	r24, Z
     f6c:	91 81       	ldd	r25, Z+1	; 0x01
     f6e:	01 97       	sbiw	r24, 0x01	; 1
     f70:	11 96       	adiw	r26, 0x01	; 1
     f72:	9c 93       	st	X, r25
     f74:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f76:	fe 01       	movw	r30, r28
     f78:	ef 56       	subi	r30, 0x6F	; 111
     f7a:	ff 4f       	sbci	r31, 0xFF	; 255
     f7c:	80 81       	ld	r24, Z
     f7e:	91 81       	ldd	r25, Z+1	; 0x01
     f80:	00 97       	sbiw	r24, 0x00	; 0
     f82:	d1 f6       	brne	.-76     	; 0xf38 <main+0x3c4>
     f84:	27 c0       	rjmp	.+78     	; 0xfd4 <main+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f86:	8e 01       	movw	r16, r28
     f88:	0f 56       	subi	r16, 0x6F	; 111
     f8a:	1f 4f       	sbci	r17, 0xFF	; 255
     f8c:	fe 01       	movw	r30, r28
     f8e:	ed 56       	subi	r30, 0x6D	; 109
     f90:	ff 4f       	sbci	r31, 0xFF	; 255
     f92:	60 81       	ld	r22, Z
     f94:	71 81       	ldd	r23, Z+1	; 0x01
     f96:	82 81       	ldd	r24, Z+2	; 0x02
     f98:	93 81       	ldd	r25, Z+3	; 0x03
     f9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f9e:	dc 01       	movw	r26, r24
     fa0:	cb 01       	movw	r24, r22
     fa2:	f8 01       	movw	r30, r16
     fa4:	91 83       	std	Z+1, r25	; 0x01
     fa6:	80 83       	st	Z, r24
     fa8:	de 01       	movw	r26, r28
     faa:	a3 57       	subi	r26, 0x73	; 115
     fac:	bf 4f       	sbci	r27, 0xFF	; 255
     fae:	fe 01       	movw	r30, r28
     fb0:	ef 56       	subi	r30, 0x6F	; 111
     fb2:	ff 4f       	sbci	r31, 0xFF	; 255
     fb4:	80 81       	ld	r24, Z
     fb6:	91 81       	ldd	r25, Z+1	; 0x01
     fb8:	8d 93       	st	X+, r24
     fba:	9c 93       	st	X, r25
     fbc:	fe 01       	movw	r30, r28
     fbe:	e3 57       	subi	r30, 0x73	; 115
     fc0:	ff 4f       	sbci	r31, 0xFF	; 255
     fc2:	80 81       	ld	r24, Z
     fc4:	91 81       	ldd	r25, Z+1	; 0x01
     fc6:	01 97       	sbiw	r24, 0x01	; 1
     fc8:	f1 f7       	brne	.-4      	; 0xfc6 <main+0x452>
     fca:	fe 01       	movw	r30, r28
     fcc:	e3 57       	subi	r30, 0x73	; 115
     fce:	ff 4f       	sbci	r31, 0xFF	; 255
     fd0:	91 83       	std	Z+1, r25	; 0x01
     fd2:	80 83       	st	Z, r24
			_delay_ms(10);
			UART_receiveString(UART_data);
     fd4:	ce 01       	movw	r24, r28
     fd6:	8e 55       	subi	r24, 0x5E	; 94
     fd8:	9f 4f       	sbci	r25, 0xFF	; 255
     fda:	0e 94 f7 20 	call	0x41ee	; 0x41ee <UART_receiveString>
     fde:	fe 01       	movw	r30, r28
     fe0:	e7 57       	subi	r30, 0x77	; 119
     fe2:	ff 4f       	sbci	r31, 0xFF	; 255
     fe4:	80 e0       	ldi	r24, 0x00	; 0
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	a0 e2       	ldi	r26, 0x20	; 32
     fea:	b1 e4       	ldi	r27, 0x41	; 65
     fec:	80 83       	st	Z, r24
     fee:	91 83       	std	Z+1, r25	; 0x01
     ff0:	a2 83       	std	Z+2, r26	; 0x02
     ff2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ff4:	8e 01       	movw	r16, r28
     ff6:	0b 57       	subi	r16, 0x7B	; 123
     ff8:	1f 4f       	sbci	r17, 0xFF	; 255
     ffa:	fe 01       	movw	r30, r28
     ffc:	e7 57       	subi	r30, 0x77	; 119
     ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    1000:	60 81       	ld	r22, Z
    1002:	71 81       	ldd	r23, Z+1	; 0x01
    1004:	82 81       	ldd	r24, Z+2	; 0x02
    1006:	93 81       	ldd	r25, Z+3	; 0x03
    1008:	20 e0       	ldi	r18, 0x00	; 0
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	4a ef       	ldi	r20, 0xFA	; 250
    100e:	54 e4       	ldi	r21, 0x44	; 68
    1010:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1014:	dc 01       	movw	r26, r24
    1016:	cb 01       	movw	r24, r22
    1018:	f8 01       	movw	r30, r16
    101a:	80 83       	st	Z, r24
    101c:	91 83       	std	Z+1, r25	; 0x01
    101e:	a2 83       	std	Z+2, r26	; 0x02
    1020:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1022:	fe 01       	movw	r30, r28
    1024:	eb 57       	subi	r30, 0x7B	; 123
    1026:	ff 4f       	sbci	r31, 0xFF	; 255
    1028:	60 81       	ld	r22, Z
    102a:	71 81       	ldd	r23, Z+1	; 0x01
    102c:	82 81       	ldd	r24, Z+2	; 0x02
    102e:	93 81       	ldd	r25, Z+3	; 0x03
    1030:	20 e0       	ldi	r18, 0x00	; 0
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	40 e8       	ldi	r20, 0x80	; 128
    1036:	5f e3       	ldi	r21, 0x3F	; 63
    1038:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    103c:	88 23       	and	r24, r24
    103e:	44 f4       	brge	.+16     	; 0x1050 <main+0x4dc>
		__ticks = 1;
    1040:	fe 01       	movw	r30, r28
    1042:	ed 57       	subi	r30, 0x7D	; 125
    1044:	ff 4f       	sbci	r31, 0xFF	; 255
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	91 83       	std	Z+1, r25	; 0x01
    104c:	80 83       	st	Z, r24
    104e:	64 c0       	rjmp	.+200    	; 0x1118 <main+0x5a4>
	else if (__tmp > 65535)
    1050:	fe 01       	movw	r30, r28
    1052:	eb 57       	subi	r30, 0x7B	; 123
    1054:	ff 4f       	sbci	r31, 0xFF	; 255
    1056:	60 81       	ld	r22, Z
    1058:	71 81       	ldd	r23, Z+1	; 0x01
    105a:	82 81       	ldd	r24, Z+2	; 0x02
    105c:	93 81       	ldd	r25, Z+3	; 0x03
    105e:	20 e0       	ldi	r18, 0x00	; 0
    1060:	3f ef       	ldi	r19, 0xFF	; 255
    1062:	4f e7       	ldi	r20, 0x7F	; 127
    1064:	57 e4       	ldi	r21, 0x47	; 71
    1066:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    106a:	18 16       	cp	r1, r24
    106c:	0c f0       	brlt	.+2      	; 0x1070 <main+0x4fc>
    106e:	43 c0       	rjmp	.+134    	; 0x10f6 <main+0x582>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1070:	fe 01       	movw	r30, r28
    1072:	e7 57       	subi	r30, 0x77	; 119
    1074:	ff 4f       	sbci	r31, 0xFF	; 255
    1076:	60 81       	ld	r22, Z
    1078:	71 81       	ldd	r23, Z+1	; 0x01
    107a:	82 81       	ldd	r24, Z+2	; 0x02
    107c:	93 81       	ldd	r25, Z+3	; 0x03
    107e:	20 e0       	ldi	r18, 0x00	; 0
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	40 e2       	ldi	r20, 0x20	; 32
    1084:	51 e4       	ldi	r21, 0x41	; 65
    1086:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    108a:	dc 01       	movw	r26, r24
    108c:	cb 01       	movw	r24, r22
    108e:	8e 01       	movw	r16, r28
    1090:	0d 57       	subi	r16, 0x7D	; 125
    1092:	1f 4f       	sbci	r17, 0xFF	; 255
    1094:	bc 01       	movw	r22, r24
    1096:	cd 01       	movw	r24, r26
    1098:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    109c:	dc 01       	movw	r26, r24
    109e:	cb 01       	movw	r24, r22
    10a0:	f8 01       	movw	r30, r16
    10a2:	91 83       	std	Z+1, r25	; 0x01
    10a4:	80 83       	st	Z, r24
    10a6:	1f c0       	rjmp	.+62     	; 0x10e6 <main+0x572>
    10a8:	fe 01       	movw	r30, r28
    10aa:	ef 57       	subi	r30, 0x7F	; 127
    10ac:	ff 4f       	sbci	r31, 0xFF	; 255
    10ae:	88 ec       	ldi	r24, 0xC8	; 200
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	91 83       	std	Z+1, r25	; 0x01
    10b4:	80 83       	st	Z, r24
    10b6:	fe 01       	movw	r30, r28
    10b8:	ef 57       	subi	r30, 0x7F	; 127
    10ba:	ff 4f       	sbci	r31, 0xFF	; 255
    10bc:	80 81       	ld	r24, Z
    10be:	91 81       	ldd	r25, Z+1	; 0x01
    10c0:	01 97       	sbiw	r24, 0x01	; 1
    10c2:	f1 f7       	brne	.-4      	; 0x10c0 <main+0x54c>
    10c4:	fe 01       	movw	r30, r28
    10c6:	ef 57       	subi	r30, 0x7F	; 127
    10c8:	ff 4f       	sbci	r31, 0xFF	; 255
    10ca:	91 83       	std	Z+1, r25	; 0x01
    10cc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10ce:	de 01       	movw	r26, r28
    10d0:	ad 57       	subi	r26, 0x7D	; 125
    10d2:	bf 4f       	sbci	r27, 0xFF	; 255
    10d4:	fe 01       	movw	r30, r28
    10d6:	ed 57       	subi	r30, 0x7D	; 125
    10d8:	ff 4f       	sbci	r31, 0xFF	; 255
    10da:	80 81       	ld	r24, Z
    10dc:	91 81       	ldd	r25, Z+1	; 0x01
    10de:	01 97       	sbiw	r24, 0x01	; 1
    10e0:	11 96       	adiw	r26, 0x01	; 1
    10e2:	9c 93       	st	X, r25
    10e4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10e6:	fe 01       	movw	r30, r28
    10e8:	ed 57       	subi	r30, 0x7D	; 125
    10ea:	ff 4f       	sbci	r31, 0xFF	; 255
    10ec:	80 81       	ld	r24, Z
    10ee:	91 81       	ldd	r25, Z+1	; 0x01
    10f0:	00 97       	sbiw	r24, 0x00	; 0
    10f2:	d1 f6       	brne	.-76     	; 0x10a8 <main+0x534>
    10f4:	28 c0       	rjmp	.+80     	; 0x1146 <main+0x5d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10f6:	8e 01       	movw	r16, r28
    10f8:	0d 57       	subi	r16, 0x7D	; 125
    10fa:	1f 4f       	sbci	r17, 0xFF	; 255
    10fc:	fe 01       	movw	r30, r28
    10fe:	eb 57       	subi	r30, 0x7B	; 123
    1100:	ff 4f       	sbci	r31, 0xFF	; 255
    1102:	60 81       	ld	r22, Z
    1104:	71 81       	ldd	r23, Z+1	; 0x01
    1106:	82 81       	ldd	r24, Z+2	; 0x02
    1108:	93 81       	ldd	r25, Z+3	; 0x03
    110a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    110e:	dc 01       	movw	r26, r24
    1110:	cb 01       	movw	r24, r22
    1112:	f8 01       	movw	r30, r16
    1114:	91 83       	std	Z+1, r25	; 0x01
    1116:	80 83       	st	Z, r24
    1118:	de 01       	movw	r26, r28
    111a:	a1 58       	subi	r26, 0x81	; 129
    111c:	bf 4f       	sbci	r27, 0xFF	; 255
    111e:	fe 01       	movw	r30, r28
    1120:	ed 57       	subi	r30, 0x7D	; 125
    1122:	ff 4f       	sbci	r31, 0xFF	; 255
    1124:	80 81       	ld	r24, Z
    1126:	91 81       	ldd	r25, Z+1	; 0x01
    1128:	11 96       	adiw	r26, 0x01	; 1
    112a:	9c 93       	st	X, r25
    112c:	8e 93       	st	-X, r24
    112e:	fe 01       	movw	r30, r28
    1130:	e1 58       	subi	r30, 0x81	; 129
    1132:	ff 4f       	sbci	r31, 0xFF	; 255
    1134:	80 81       	ld	r24, Z
    1136:	91 81       	ldd	r25, Z+1	; 0x01
    1138:	01 97       	sbiw	r24, 0x01	; 1
    113a:	f1 f7       	brne	.-4      	; 0x1138 <main+0x5c4>
    113c:	fe 01       	movw	r30, r28
    113e:	e1 58       	subi	r30, 0x81	; 129
    1140:	ff 4f       	sbci	r31, 0xFF	; 255
    1142:	91 83       	std	Z+1, r25	; 0x01
    1144:	80 83       	st	Z, r24
			_delay_ms(10);

			if (UART_data[1] == 'O')
    1146:	fe 01       	movw	r30, r28
    1148:	ee 55       	subi	r30, 0x5E	; 94
    114a:	ff 4f       	sbci	r31, 0xFF	; 255
    114c:	81 81       	ldd	r24, Z+1	; 0x01
    114e:	8f 34       	cpi	r24, 0x4F	; 79
    1150:	09 f0       	breq	.+2      	; 0x1154 <main+0x5e0>
    1152:	c4 c0       	rjmp	.+392    	; 0x12dc <main+0x768>
			{
				LCD_clearScreen();
    1154:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <LCD_clearScreen>
				LCD_moveCursor(0,0);
    1158:	80 e0       	ldi	r24, 0x00	; 0
    115a:	60 e0       	ldi	r22, 0x00	; 0
    115c:	0e 94 f4 1e 	call	0x3de8	; 0x3de8 <LCD_moveCursor>
				LCD_displayString("Matched!!");
    1160:	8c e8       	ldi	r24, 0x8C	; 140
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <LCD_displayString>
    1168:	fe 01       	movw	r30, r28
    116a:	e5 58       	subi	r30, 0x85	; 133
    116c:	ff 4f       	sbci	r31, 0xFF	; 255
    116e:	80 e0       	ldi	r24, 0x00	; 0
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	aa e7       	ldi	r26, 0x7A	; 122
    1174:	b3 e4       	ldi	r27, 0x43	; 67
    1176:	80 83       	st	Z, r24
    1178:	91 83       	std	Z+1, r25	; 0x01
    117a:	a2 83       	std	Z+2, r26	; 0x02
    117c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    117e:	8e 01       	movw	r16, r28
    1180:	09 58       	subi	r16, 0x89	; 137
    1182:	1f 4f       	sbci	r17, 0xFF	; 255
    1184:	fe 01       	movw	r30, r28
    1186:	e5 58       	subi	r30, 0x85	; 133
    1188:	ff 4f       	sbci	r31, 0xFF	; 255
    118a:	60 81       	ld	r22, Z
    118c:	71 81       	ldd	r23, Z+1	; 0x01
    118e:	82 81       	ldd	r24, Z+2	; 0x02
    1190:	93 81       	ldd	r25, Z+3	; 0x03
    1192:	20 e0       	ldi	r18, 0x00	; 0
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	4a ef       	ldi	r20, 0xFA	; 250
    1198:	54 e4       	ldi	r21, 0x44	; 68
    119a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    119e:	dc 01       	movw	r26, r24
    11a0:	cb 01       	movw	r24, r22
    11a2:	f8 01       	movw	r30, r16
    11a4:	80 83       	st	Z, r24
    11a6:	91 83       	std	Z+1, r25	; 0x01
    11a8:	a2 83       	std	Z+2, r26	; 0x02
    11aa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    11ac:	fe 01       	movw	r30, r28
    11ae:	e9 58       	subi	r30, 0x89	; 137
    11b0:	ff 4f       	sbci	r31, 0xFF	; 255
    11b2:	60 81       	ld	r22, Z
    11b4:	71 81       	ldd	r23, Z+1	; 0x01
    11b6:	82 81       	ldd	r24, Z+2	; 0x02
    11b8:	93 81       	ldd	r25, Z+3	; 0x03
    11ba:	20 e0       	ldi	r18, 0x00	; 0
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	40 e8       	ldi	r20, 0x80	; 128
    11c0:	5f e3       	ldi	r21, 0x3F	; 63
    11c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11c6:	88 23       	and	r24, r24
    11c8:	44 f4       	brge	.+16     	; 0x11da <main+0x666>
		__ticks = 1;
    11ca:	fe 01       	movw	r30, r28
    11cc:	eb 58       	subi	r30, 0x8B	; 139
    11ce:	ff 4f       	sbci	r31, 0xFF	; 255
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	91 83       	std	Z+1, r25	; 0x01
    11d6:	80 83       	st	Z, r24
    11d8:	64 c0       	rjmp	.+200    	; 0x12a2 <main+0x72e>
	else if (__tmp > 65535)
    11da:	fe 01       	movw	r30, r28
    11dc:	e9 58       	subi	r30, 0x89	; 137
    11de:	ff 4f       	sbci	r31, 0xFF	; 255
    11e0:	60 81       	ld	r22, Z
    11e2:	71 81       	ldd	r23, Z+1	; 0x01
    11e4:	82 81       	ldd	r24, Z+2	; 0x02
    11e6:	93 81       	ldd	r25, Z+3	; 0x03
    11e8:	20 e0       	ldi	r18, 0x00	; 0
    11ea:	3f ef       	ldi	r19, 0xFF	; 255
    11ec:	4f e7       	ldi	r20, 0x7F	; 127
    11ee:	57 e4       	ldi	r21, 0x47	; 71
    11f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11f4:	18 16       	cp	r1, r24
    11f6:	0c f0       	brlt	.+2      	; 0x11fa <main+0x686>
    11f8:	43 c0       	rjmp	.+134    	; 0x1280 <main+0x70c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11fa:	fe 01       	movw	r30, r28
    11fc:	e5 58       	subi	r30, 0x85	; 133
    11fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1200:	60 81       	ld	r22, Z
    1202:	71 81       	ldd	r23, Z+1	; 0x01
    1204:	82 81       	ldd	r24, Z+2	; 0x02
    1206:	93 81       	ldd	r25, Z+3	; 0x03
    1208:	20 e0       	ldi	r18, 0x00	; 0
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	40 e2       	ldi	r20, 0x20	; 32
    120e:	51 e4       	ldi	r21, 0x41	; 65
    1210:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1214:	dc 01       	movw	r26, r24
    1216:	cb 01       	movw	r24, r22
    1218:	8e 01       	movw	r16, r28
    121a:	0b 58       	subi	r16, 0x8B	; 139
    121c:	1f 4f       	sbci	r17, 0xFF	; 255
    121e:	bc 01       	movw	r22, r24
    1220:	cd 01       	movw	r24, r26
    1222:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1226:	dc 01       	movw	r26, r24
    1228:	cb 01       	movw	r24, r22
    122a:	f8 01       	movw	r30, r16
    122c:	91 83       	std	Z+1, r25	; 0x01
    122e:	80 83       	st	Z, r24
    1230:	1f c0       	rjmp	.+62     	; 0x1270 <main+0x6fc>
    1232:	fe 01       	movw	r30, r28
    1234:	ed 58       	subi	r30, 0x8D	; 141
    1236:	ff 4f       	sbci	r31, 0xFF	; 255
    1238:	88 ec       	ldi	r24, 0xC8	; 200
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	91 83       	std	Z+1, r25	; 0x01
    123e:	80 83       	st	Z, r24
    1240:	fe 01       	movw	r30, r28
    1242:	ed 58       	subi	r30, 0x8D	; 141
    1244:	ff 4f       	sbci	r31, 0xFF	; 255
    1246:	80 81       	ld	r24, Z
    1248:	91 81       	ldd	r25, Z+1	; 0x01
    124a:	01 97       	sbiw	r24, 0x01	; 1
    124c:	f1 f7       	brne	.-4      	; 0x124a <main+0x6d6>
    124e:	fe 01       	movw	r30, r28
    1250:	ed 58       	subi	r30, 0x8D	; 141
    1252:	ff 4f       	sbci	r31, 0xFF	; 255
    1254:	91 83       	std	Z+1, r25	; 0x01
    1256:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1258:	de 01       	movw	r26, r28
    125a:	ab 58       	subi	r26, 0x8B	; 139
    125c:	bf 4f       	sbci	r27, 0xFF	; 255
    125e:	fe 01       	movw	r30, r28
    1260:	eb 58       	subi	r30, 0x8B	; 139
    1262:	ff 4f       	sbci	r31, 0xFF	; 255
    1264:	80 81       	ld	r24, Z
    1266:	91 81       	ldd	r25, Z+1	; 0x01
    1268:	01 97       	sbiw	r24, 0x01	; 1
    126a:	11 96       	adiw	r26, 0x01	; 1
    126c:	9c 93       	st	X, r25
    126e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1270:	fe 01       	movw	r30, r28
    1272:	eb 58       	subi	r30, 0x8B	; 139
    1274:	ff 4f       	sbci	r31, 0xFF	; 255
    1276:	80 81       	ld	r24, Z
    1278:	91 81       	ldd	r25, Z+1	; 0x01
    127a:	00 97       	sbiw	r24, 0x00	; 0
    127c:	d1 f6       	brne	.-76     	; 0x1232 <main+0x6be>
    127e:	28 c0       	rjmp	.+80     	; 0x12d0 <main+0x75c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1280:	8e 01       	movw	r16, r28
    1282:	0b 58       	subi	r16, 0x8B	; 139
    1284:	1f 4f       	sbci	r17, 0xFF	; 255
    1286:	fe 01       	movw	r30, r28
    1288:	e9 58       	subi	r30, 0x89	; 137
    128a:	ff 4f       	sbci	r31, 0xFF	; 255
    128c:	60 81       	ld	r22, Z
    128e:	71 81       	ldd	r23, Z+1	; 0x01
    1290:	82 81       	ldd	r24, Z+2	; 0x02
    1292:	93 81       	ldd	r25, Z+3	; 0x03
    1294:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1298:	dc 01       	movw	r26, r24
    129a:	cb 01       	movw	r24, r22
    129c:	f8 01       	movw	r30, r16
    129e:	91 83       	std	Z+1, r25	; 0x01
    12a0:	80 83       	st	Z, r24
    12a2:	de 01       	movw	r26, r28
    12a4:	af 58       	subi	r26, 0x8F	; 143
    12a6:	bf 4f       	sbci	r27, 0xFF	; 255
    12a8:	fe 01       	movw	r30, r28
    12aa:	eb 58       	subi	r30, 0x8B	; 139
    12ac:	ff 4f       	sbci	r31, 0xFF	; 255
    12ae:	80 81       	ld	r24, Z
    12b0:	91 81       	ldd	r25, Z+1	; 0x01
    12b2:	11 96       	adiw	r26, 0x01	; 1
    12b4:	9c 93       	st	X, r25
    12b6:	8e 93       	st	-X, r24
    12b8:	fe 01       	movw	r30, r28
    12ba:	ef 58       	subi	r30, 0x8F	; 143
    12bc:	ff 4f       	sbci	r31, 0xFF	; 255
    12be:	80 81       	ld	r24, Z
    12c0:	91 81       	ldd	r25, Z+1	; 0x01
    12c2:	01 97       	sbiw	r24, 0x01	; 1
    12c4:	f1 f7       	brne	.-4      	; 0x12c2 <main+0x74e>
    12c6:	fe 01       	movw	r30, r28
    12c8:	ef 58       	subi	r30, 0x8F	; 143
    12ca:	ff 4f       	sbci	r31, 0xFF	; 255
    12cc:	91 83       	std	Z+1, r25	; 0x01
    12ce:	80 83       	st	Z, r24
				_delay_ms(250);
				case_select = 1;
    12d0:	fe 01       	movw	r30, r28
    12d2:	e2 56       	subi	r30, 0x62	; 98
    12d4:	ff 4f       	sbci	r31, 0xFF	; 255
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	80 83       	st	Z, r24
    12da:	cf cc       	rjmp	.-1634   	; 0xc7a <main+0x106>
			}
			else
			{
				LCD_clearScreen();
    12dc:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <LCD_clearScreen>
				LCD_moveCursor(0,0);
    12e0:	80 e0       	ldi	r24, 0x00	; 0
    12e2:	60 e0       	ldi	r22, 0x00	; 0
    12e4:	0e 94 f4 1e 	call	0x3de8	; 0x3de8 <LCD_moveCursor>
				LCD_displayString("Unmatched!!");
    12e8:	86 e9       	ldi	r24, 0x96	; 150
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <LCD_displayString>
    12f0:	fe 01       	movw	r30, r28
    12f2:	e3 59       	subi	r30, 0x93	; 147
    12f4:	ff 4f       	sbci	r31, 0xFF	; 255
    12f6:	80 e0       	ldi	r24, 0x00	; 0
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	aa ef       	ldi	r26, 0xFA	; 250
    12fc:	b3 e4       	ldi	r27, 0x43	; 67
    12fe:	80 83       	st	Z, r24
    1300:	91 83       	std	Z+1, r25	; 0x01
    1302:	a2 83       	std	Z+2, r26	; 0x02
    1304:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1306:	8e 01       	movw	r16, r28
    1308:	07 59       	subi	r16, 0x97	; 151
    130a:	1f 4f       	sbci	r17, 0xFF	; 255
    130c:	fe 01       	movw	r30, r28
    130e:	e3 59       	subi	r30, 0x93	; 147
    1310:	ff 4f       	sbci	r31, 0xFF	; 255
    1312:	60 81       	ld	r22, Z
    1314:	71 81       	ldd	r23, Z+1	; 0x01
    1316:	82 81       	ldd	r24, Z+2	; 0x02
    1318:	93 81       	ldd	r25, Z+3	; 0x03
    131a:	20 e0       	ldi	r18, 0x00	; 0
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	4a ef       	ldi	r20, 0xFA	; 250
    1320:	54 e4       	ldi	r21, 0x44	; 68
    1322:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1326:	dc 01       	movw	r26, r24
    1328:	cb 01       	movw	r24, r22
    132a:	f8 01       	movw	r30, r16
    132c:	80 83       	st	Z, r24
    132e:	91 83       	std	Z+1, r25	; 0x01
    1330:	a2 83       	std	Z+2, r26	; 0x02
    1332:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1334:	fe 01       	movw	r30, r28
    1336:	e7 59       	subi	r30, 0x97	; 151
    1338:	ff 4f       	sbci	r31, 0xFF	; 255
    133a:	60 81       	ld	r22, Z
    133c:	71 81       	ldd	r23, Z+1	; 0x01
    133e:	82 81       	ldd	r24, Z+2	; 0x02
    1340:	93 81       	ldd	r25, Z+3	; 0x03
    1342:	20 e0       	ldi	r18, 0x00	; 0
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	40 e8       	ldi	r20, 0x80	; 128
    1348:	5f e3       	ldi	r21, 0x3F	; 63
    134a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    134e:	88 23       	and	r24, r24
    1350:	44 f4       	brge	.+16     	; 0x1362 <main+0x7ee>
		__ticks = 1;
    1352:	fe 01       	movw	r30, r28
    1354:	e9 59       	subi	r30, 0x99	; 153
    1356:	ff 4f       	sbci	r31, 0xFF	; 255
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	91 83       	std	Z+1, r25	; 0x01
    135e:	80 83       	st	Z, r24
    1360:	64 c0       	rjmp	.+200    	; 0x142a <main+0x8b6>
	else if (__tmp > 65535)
    1362:	fe 01       	movw	r30, r28
    1364:	e7 59       	subi	r30, 0x97	; 151
    1366:	ff 4f       	sbci	r31, 0xFF	; 255
    1368:	60 81       	ld	r22, Z
    136a:	71 81       	ldd	r23, Z+1	; 0x01
    136c:	82 81       	ldd	r24, Z+2	; 0x02
    136e:	93 81       	ldd	r25, Z+3	; 0x03
    1370:	20 e0       	ldi	r18, 0x00	; 0
    1372:	3f ef       	ldi	r19, 0xFF	; 255
    1374:	4f e7       	ldi	r20, 0x7F	; 127
    1376:	57 e4       	ldi	r21, 0x47	; 71
    1378:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    137c:	18 16       	cp	r1, r24
    137e:	0c f0       	brlt	.+2      	; 0x1382 <main+0x80e>
    1380:	43 c0       	rjmp	.+134    	; 0x1408 <main+0x894>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1382:	fe 01       	movw	r30, r28
    1384:	e3 59       	subi	r30, 0x93	; 147
    1386:	ff 4f       	sbci	r31, 0xFF	; 255
    1388:	60 81       	ld	r22, Z
    138a:	71 81       	ldd	r23, Z+1	; 0x01
    138c:	82 81       	ldd	r24, Z+2	; 0x02
    138e:	93 81       	ldd	r25, Z+3	; 0x03
    1390:	20 e0       	ldi	r18, 0x00	; 0
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	40 e2       	ldi	r20, 0x20	; 32
    1396:	51 e4       	ldi	r21, 0x41	; 65
    1398:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    139c:	dc 01       	movw	r26, r24
    139e:	cb 01       	movw	r24, r22
    13a0:	8e 01       	movw	r16, r28
    13a2:	09 59       	subi	r16, 0x99	; 153
    13a4:	1f 4f       	sbci	r17, 0xFF	; 255
    13a6:	bc 01       	movw	r22, r24
    13a8:	cd 01       	movw	r24, r26
    13aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13ae:	dc 01       	movw	r26, r24
    13b0:	cb 01       	movw	r24, r22
    13b2:	f8 01       	movw	r30, r16
    13b4:	91 83       	std	Z+1, r25	; 0x01
    13b6:	80 83       	st	Z, r24
    13b8:	1f c0       	rjmp	.+62     	; 0x13f8 <main+0x884>
    13ba:	fe 01       	movw	r30, r28
    13bc:	eb 59       	subi	r30, 0x9B	; 155
    13be:	ff 4f       	sbci	r31, 0xFF	; 255
    13c0:	88 ec       	ldi	r24, 0xC8	; 200
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	91 83       	std	Z+1, r25	; 0x01
    13c6:	80 83       	st	Z, r24
    13c8:	fe 01       	movw	r30, r28
    13ca:	eb 59       	subi	r30, 0x9B	; 155
    13cc:	ff 4f       	sbci	r31, 0xFF	; 255
    13ce:	80 81       	ld	r24, Z
    13d0:	91 81       	ldd	r25, Z+1	; 0x01
    13d2:	01 97       	sbiw	r24, 0x01	; 1
    13d4:	f1 f7       	brne	.-4      	; 0x13d2 <main+0x85e>
    13d6:	fe 01       	movw	r30, r28
    13d8:	eb 59       	subi	r30, 0x9B	; 155
    13da:	ff 4f       	sbci	r31, 0xFF	; 255
    13dc:	91 83       	std	Z+1, r25	; 0x01
    13de:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13e0:	de 01       	movw	r26, r28
    13e2:	a9 59       	subi	r26, 0x99	; 153
    13e4:	bf 4f       	sbci	r27, 0xFF	; 255
    13e6:	fe 01       	movw	r30, r28
    13e8:	e9 59       	subi	r30, 0x99	; 153
    13ea:	ff 4f       	sbci	r31, 0xFF	; 255
    13ec:	80 81       	ld	r24, Z
    13ee:	91 81       	ldd	r25, Z+1	; 0x01
    13f0:	01 97       	sbiw	r24, 0x01	; 1
    13f2:	11 96       	adiw	r26, 0x01	; 1
    13f4:	9c 93       	st	X, r25
    13f6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13f8:	fe 01       	movw	r30, r28
    13fa:	e9 59       	subi	r30, 0x99	; 153
    13fc:	ff 4f       	sbci	r31, 0xFF	; 255
    13fe:	80 81       	ld	r24, Z
    1400:	91 81       	ldd	r25, Z+1	; 0x01
    1402:	00 97       	sbiw	r24, 0x00	; 0
    1404:	d1 f6       	brne	.-76     	; 0x13ba <main+0x846>
    1406:	27 c0       	rjmp	.+78     	; 0x1456 <main+0x8e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1408:	8e 01       	movw	r16, r28
    140a:	09 59       	subi	r16, 0x99	; 153
    140c:	1f 4f       	sbci	r17, 0xFF	; 255
    140e:	fe 01       	movw	r30, r28
    1410:	e7 59       	subi	r30, 0x97	; 151
    1412:	ff 4f       	sbci	r31, 0xFF	; 255
    1414:	60 81       	ld	r22, Z
    1416:	71 81       	ldd	r23, Z+1	; 0x01
    1418:	82 81       	ldd	r24, Z+2	; 0x02
    141a:	93 81       	ldd	r25, Z+3	; 0x03
    141c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1420:	dc 01       	movw	r26, r24
    1422:	cb 01       	movw	r24, r22
    1424:	f8 01       	movw	r30, r16
    1426:	91 83       	std	Z+1, r25	; 0x01
    1428:	80 83       	st	Z, r24
    142a:	de 01       	movw	r26, r28
    142c:	ad 59       	subi	r26, 0x9D	; 157
    142e:	bf 4f       	sbci	r27, 0xFF	; 255
    1430:	fe 01       	movw	r30, r28
    1432:	e9 59       	subi	r30, 0x99	; 153
    1434:	ff 4f       	sbci	r31, 0xFF	; 255
    1436:	80 81       	ld	r24, Z
    1438:	91 81       	ldd	r25, Z+1	; 0x01
    143a:	8d 93       	st	X+, r24
    143c:	9c 93       	st	X, r25
    143e:	fe 01       	movw	r30, r28
    1440:	ed 59       	subi	r30, 0x9D	; 157
    1442:	ff 4f       	sbci	r31, 0xFF	; 255
    1444:	80 81       	ld	r24, Z
    1446:	91 81       	ldd	r25, Z+1	; 0x01
    1448:	01 97       	sbiw	r24, 0x01	; 1
    144a:	f1 f7       	brne	.-4      	; 0x1448 <main+0x8d4>
    144c:	fe 01       	movw	r30, r28
    144e:	ed 59       	subi	r30, 0x9D	; 157
    1450:	ff 4f       	sbci	r31, 0xFF	; 255
    1452:	91 83       	std	Z+1, r25	; 0x01
    1454:	80 83       	st	Z, r24
				_delay_ms(500);
				LCD_clearScreen();
    1456:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <LCD_clearScreen>
				LCD_moveCursor(0,0);
    145a:	80 e0       	ldi	r24, 0x00	; 0
    145c:	60 e0       	ldi	r22, 0x00	; 0
    145e:	0e 94 f4 1e 	call	0x3de8	; 0x3de8 <LCD_moveCursor>
				LCD_displayString("plz enter pass");
    1462:	80 e6       	ldi	r24, 0x60	; 96
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <LCD_displayString>
    146a:	07 cc       	rjmp	.-2034   	; 0xc7a <main+0x106>
			}

			break;

		case 1:
			LCD_clearScreen();
    146c:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <LCD_clearScreen>
			LCD_moveCursor(0,0);
    1470:	80 e0       	ldi	r24, 0x00	; 0
    1472:	60 e0       	ldi	r22, 0x00	; 0
    1474:	0e 94 f4 1e 	call	0x3de8	; 0x3de8 <LCD_moveCursor>
			LCD_displayString("+ : Open Door");
    1478:	82 ea       	ldi	r24, 0xA2	; 162
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <LCD_displayString>
			LCD_moveCursor(1,0);
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	60 e0       	ldi	r22, 0x00	; 0
    1484:	0e 94 f4 1e 	call	0x3de8	; 0x3de8 <LCD_moveCursor>
			LCD_displayString("- : Change Pass");
    1488:	80 eb       	ldi	r24, 0xB0	; 176
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <LCD_displayString>
			sel_key = KEYPAD_getPressedKey();
    1490:	0e 94 86 13 	call	0x270c	; 0x270c <KEYPAD_getPressedKey>
    1494:	fe 01       	movw	r30, r28
    1496:	e1 56       	subi	r30, 0x61	; 97
    1498:	ff 4f       	sbci	r31, 0xFF	; 255
    149a:	80 83       	st	Z, r24
			if (sel_key != '+' && sel_key != '-') break;
    149c:	fe 01       	movw	r30, r28
    149e:	e1 56       	subi	r30, 0x61	; 97
    14a0:	ff 4f       	sbci	r31, 0xFF	; 255
    14a2:	80 81       	ld	r24, Z
    14a4:	8b 32       	cpi	r24, 0x2B	; 43
    14a6:	39 f0       	breq	.+14     	; 0x14b6 <main+0x942>
    14a8:	fe 01       	movw	r30, r28
    14aa:	e1 56       	subi	r30, 0x61	; 97
    14ac:	ff 4f       	sbci	r31, 0xFF	; 255
    14ae:	80 81       	ld	r24, Z
    14b0:	8d 32       	cpi	r24, 0x2D	; 45
    14b2:	09 f0       	breq	.+2      	; 0x14b6 <main+0x942>
    14b4:	e2 cb       	rjmp	.-2108   	; 0xc7a <main+0x106>

			case_select = 2;
    14b6:	fe 01       	movw	r30, r28
    14b8:	e2 56       	subi	r30, 0x62	; 98
    14ba:	ff 4f       	sbci	r31, 0xFF	; 255
    14bc:	82 e0       	ldi	r24, 0x02	; 2
    14be:	80 83       	st	Z, r24
    14c0:	dc cb       	rjmp	.-2120   	; 0xc7a <main+0x106>

			break;


		case 2:
			LCD_clearScreen();
    14c2:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <LCD_clearScreen>
			LCD_moveCursor(0,0);
    14c6:	80 e0       	ldi	r24, 0x00	; 0
    14c8:	60 e0       	ldi	r22, 0x00	; 0
    14ca:	0e 94 f4 1e 	call	0x3de8	; 0x3de8 <LCD_moveCursor>
			LCD_displayString("plz enter pass");
    14ce:	80 e6       	ldi	r24, 0x60	; 96
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <LCD_displayString>

			LCD_moveCursor(1,0);
    14d6:	81 e0       	ldi	r24, 0x01	; 1
    14d8:	60 e0       	ldi	r22, 0x00	; 0
    14da:	0e 94 f4 1e 	call	0x3de8	; 0x3de8 <LCD_moveCursor>
			UART_data [0] = '2';
    14de:	fe 01       	movw	r30, r28
    14e0:	ee 55       	subi	r30, 0x5E	; 94
    14e2:	ff 4f       	sbci	r31, 0xFF	; 255
    14e4:	82 e3       	ldi	r24, 0x32	; 50
    14e6:	80 83       	st	Z, r24

			for(counter = 0 ; counter<5 ; counter++)
    14e8:	fe 01       	movw	r30, r28
    14ea:	ef 55       	subi	r30, 0x5F	; 95
    14ec:	ff 4f       	sbci	r31, 0xFF	; 255
    14ee:	10 82       	st	Z, r1
    14f0:	43 c0       	rjmp	.+134    	; 0x1578 <main+0xa04>
			{
				key = KEYPAD_getPressedKey();
    14f2:	0e 94 86 13 	call	0x270c	; 0x270c <KEYPAD_getPressedKey>
    14f6:	fe 01       	movw	r30, r28
    14f8:	e0 56       	subi	r30, 0x60	; 96
    14fa:	ff 4f       	sbci	r31, 0xFF	; 255
    14fc:	80 83       	st	Z, r24
				if (key <=13)
    14fe:	fe 01       	movw	r30, r28
    1500:	e0 56       	subi	r30, 0x60	; 96
    1502:	ff 4f       	sbci	r31, 0xFF	; 255
    1504:	80 81       	ld	r24, Z
    1506:	8e 30       	cpi	r24, 0x0E	; 14
    1508:	b8 f4       	brcc	.+46     	; 0x1538 <main+0x9c4>
					UART_data[counter+1] = key +'0'  ;
    150a:	fe 01       	movw	r30, r28
    150c:	ef 55       	subi	r30, 0x5F	; 95
    150e:	ff 4f       	sbci	r31, 0xFF	; 255
    1510:	80 81       	ld	r24, Z
    1512:	88 2f       	mov	r24, r24
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	9c 01       	movw	r18, r24
    1518:	2f 5f       	subi	r18, 0xFF	; 255
    151a:	3f 4f       	sbci	r19, 0xFF	; 255
    151c:	fe 01       	movw	r30, r28
    151e:	e0 56       	subi	r30, 0x60	; 96
    1520:	ff 4f       	sbci	r31, 0xFF	; 255
    1522:	80 81       	ld	r24, Z
    1524:	48 2f       	mov	r20, r24
    1526:	40 5d       	subi	r20, 0xD0	; 208
    1528:	ce 01       	movw	r24, r28
    152a:	8e 55       	subi	r24, 0x5E	; 94
    152c:	9f 4f       	sbci	r25, 0xFF	; 255
    152e:	fc 01       	movw	r30, r24
    1530:	e2 0f       	add	r30, r18
    1532:	f3 1f       	adc	r31, r19
    1534:	40 83       	st	Z, r20
    1536:	14 c0       	rjmp	.+40     	; 0x1560 <main+0x9ec>

				else UART_data[counter+1] = key;
    1538:	fe 01       	movw	r30, r28
    153a:	ef 55       	subi	r30, 0x5F	; 95
    153c:	ff 4f       	sbci	r31, 0xFF	; 255
    153e:	80 81       	ld	r24, Z
    1540:	88 2f       	mov	r24, r24
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	9c 01       	movw	r18, r24
    1546:	2f 5f       	subi	r18, 0xFF	; 255
    1548:	3f 4f       	sbci	r19, 0xFF	; 255
    154a:	ce 01       	movw	r24, r28
    154c:	8e 55       	subi	r24, 0x5E	; 94
    154e:	9f 4f       	sbci	r25, 0xFF	; 255
    1550:	dc 01       	movw	r26, r24
    1552:	a2 0f       	add	r26, r18
    1554:	b3 1f       	adc	r27, r19
    1556:	fe 01       	movw	r30, r28
    1558:	e0 56       	subi	r30, 0x60	; 96
    155a:	ff 4f       	sbci	r31, 0xFF	; 255
    155c:	80 81       	ld	r24, Z
    155e:	8c 93       	st	X, r24
				LCD_displayCharacter('*');
    1560:	8a e2       	ldi	r24, 0x2A	; 42
    1562:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <LCD_displayCharacter>
			LCD_displayString("plz enter pass");

			LCD_moveCursor(1,0);
			UART_data [0] = '2';

			for(counter = 0 ; counter<5 ; counter++)
    1566:	de 01       	movw	r26, r28
    1568:	af 55       	subi	r26, 0x5F	; 95
    156a:	bf 4f       	sbci	r27, 0xFF	; 255
    156c:	fe 01       	movw	r30, r28
    156e:	ef 55       	subi	r30, 0x5F	; 95
    1570:	ff 4f       	sbci	r31, 0xFF	; 255
    1572:	80 81       	ld	r24, Z
    1574:	8f 5f       	subi	r24, 0xFF	; 255
    1576:	8c 93       	st	X, r24
    1578:	fe 01       	movw	r30, r28
    157a:	ef 55       	subi	r30, 0x5F	; 95
    157c:	ff 4f       	sbci	r31, 0xFF	; 255
    157e:	80 81       	ld	r24, Z
    1580:	85 30       	cpi	r24, 0x05	; 5
    1582:	08 f4       	brcc	.+2      	; 0x1586 <main+0xa12>
    1584:	b6 cf       	rjmp	.-148    	; 0x14f2 <main+0x97e>

				else UART_data[counter+1] = key;
				LCD_displayCharacter('*');
			}

			while(KEYPAD_getPressedKey() != '=');
    1586:	0e 94 86 13 	call	0x270c	; 0x270c <KEYPAD_getPressedKey>
    158a:	8d 33       	cpi	r24, 0x3D	; 61
    158c:	e1 f7       	brne	.-8      	; 0x1586 <main+0xa12>

			UART_data[6] = '#';
    158e:	fe 01       	movw	r30, r28
    1590:	ee 55       	subi	r30, 0x5E	; 94
    1592:	ff 4f       	sbci	r31, 0xFF	; 255
    1594:	83 e2       	ldi	r24, 0x23	; 35
    1596:	86 83       	std	Z+6, r24	; 0x06
			UART_data[7] = '\0';
    1598:	fe 01       	movw	r30, r28
    159a:	ee 55       	subi	r30, 0x5E	; 94
    159c:	ff 4f       	sbci	r31, 0xFF	; 255
    159e:	17 82       	std	Z+7, r1	; 0x07

			UART_sendString(UART_data);
    15a0:	ce 01       	movw	r24, r28
    15a2:	8e 55       	subi	r24, 0x5E	; 94
    15a4:	9f 4f       	sbci	r25, 0xFF	; 255
    15a6:	0e 94 ce 20 	call	0x419c	; 0x419c <UART_sendString>
    15aa:	fe 01       	movw	r30, r28
    15ac:	e1 5a       	subi	r30, 0xA1	; 161
    15ae:	ff 4f       	sbci	r31, 0xFF	; 255
    15b0:	80 e0       	ldi	r24, 0x00	; 0
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	a0 e2       	ldi	r26, 0x20	; 32
    15b6:	b1 e4       	ldi	r27, 0x41	; 65
    15b8:	80 83       	st	Z, r24
    15ba:	91 83       	std	Z+1, r25	; 0x01
    15bc:	a2 83       	std	Z+2, r26	; 0x02
    15be:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15c0:	8e 01       	movw	r16, r28
    15c2:	05 5a       	subi	r16, 0xA5	; 165
    15c4:	1f 4f       	sbci	r17, 0xFF	; 255
    15c6:	fe 01       	movw	r30, r28
    15c8:	e1 5a       	subi	r30, 0xA1	; 161
    15ca:	ff 4f       	sbci	r31, 0xFF	; 255
    15cc:	60 81       	ld	r22, Z
    15ce:	71 81       	ldd	r23, Z+1	; 0x01
    15d0:	82 81       	ldd	r24, Z+2	; 0x02
    15d2:	93 81       	ldd	r25, Z+3	; 0x03
    15d4:	20 e0       	ldi	r18, 0x00	; 0
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	4a ef       	ldi	r20, 0xFA	; 250
    15da:	54 e4       	ldi	r21, 0x44	; 68
    15dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15e0:	dc 01       	movw	r26, r24
    15e2:	cb 01       	movw	r24, r22
    15e4:	f8 01       	movw	r30, r16
    15e6:	80 83       	st	Z, r24
    15e8:	91 83       	std	Z+1, r25	; 0x01
    15ea:	a2 83       	std	Z+2, r26	; 0x02
    15ec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    15ee:	fe 01       	movw	r30, r28
    15f0:	e5 5a       	subi	r30, 0xA5	; 165
    15f2:	ff 4f       	sbci	r31, 0xFF	; 255
    15f4:	60 81       	ld	r22, Z
    15f6:	71 81       	ldd	r23, Z+1	; 0x01
    15f8:	82 81       	ldd	r24, Z+2	; 0x02
    15fa:	93 81       	ldd	r25, Z+3	; 0x03
    15fc:	20 e0       	ldi	r18, 0x00	; 0
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	40 e8       	ldi	r20, 0x80	; 128
    1602:	5f e3       	ldi	r21, 0x3F	; 63
    1604:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1608:	88 23       	and	r24, r24
    160a:	44 f4       	brge	.+16     	; 0x161c <main+0xaa8>
		__ticks = 1;
    160c:	fe 01       	movw	r30, r28
    160e:	e7 5a       	subi	r30, 0xA7	; 167
    1610:	ff 4f       	sbci	r31, 0xFF	; 255
    1612:	81 e0       	ldi	r24, 0x01	; 1
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	91 83       	std	Z+1, r25	; 0x01
    1618:	80 83       	st	Z, r24
    161a:	64 c0       	rjmp	.+200    	; 0x16e4 <main+0xb70>
	else if (__tmp > 65535)
    161c:	fe 01       	movw	r30, r28
    161e:	e5 5a       	subi	r30, 0xA5	; 165
    1620:	ff 4f       	sbci	r31, 0xFF	; 255
    1622:	60 81       	ld	r22, Z
    1624:	71 81       	ldd	r23, Z+1	; 0x01
    1626:	82 81       	ldd	r24, Z+2	; 0x02
    1628:	93 81       	ldd	r25, Z+3	; 0x03
    162a:	20 e0       	ldi	r18, 0x00	; 0
    162c:	3f ef       	ldi	r19, 0xFF	; 255
    162e:	4f e7       	ldi	r20, 0x7F	; 127
    1630:	57 e4       	ldi	r21, 0x47	; 71
    1632:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1636:	18 16       	cp	r1, r24
    1638:	0c f0       	brlt	.+2      	; 0x163c <main+0xac8>
    163a:	43 c0       	rjmp	.+134    	; 0x16c2 <main+0xb4e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    163c:	fe 01       	movw	r30, r28
    163e:	e1 5a       	subi	r30, 0xA1	; 161
    1640:	ff 4f       	sbci	r31, 0xFF	; 255
    1642:	60 81       	ld	r22, Z
    1644:	71 81       	ldd	r23, Z+1	; 0x01
    1646:	82 81       	ldd	r24, Z+2	; 0x02
    1648:	93 81       	ldd	r25, Z+3	; 0x03
    164a:	20 e0       	ldi	r18, 0x00	; 0
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	40 e2       	ldi	r20, 0x20	; 32
    1650:	51 e4       	ldi	r21, 0x41	; 65
    1652:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1656:	dc 01       	movw	r26, r24
    1658:	cb 01       	movw	r24, r22
    165a:	8e 01       	movw	r16, r28
    165c:	07 5a       	subi	r16, 0xA7	; 167
    165e:	1f 4f       	sbci	r17, 0xFF	; 255
    1660:	bc 01       	movw	r22, r24
    1662:	cd 01       	movw	r24, r26
    1664:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1668:	dc 01       	movw	r26, r24
    166a:	cb 01       	movw	r24, r22
    166c:	f8 01       	movw	r30, r16
    166e:	91 83       	std	Z+1, r25	; 0x01
    1670:	80 83       	st	Z, r24
    1672:	1f c0       	rjmp	.+62     	; 0x16b2 <main+0xb3e>
    1674:	fe 01       	movw	r30, r28
    1676:	e9 5a       	subi	r30, 0xA9	; 169
    1678:	ff 4f       	sbci	r31, 0xFF	; 255
    167a:	88 ec       	ldi	r24, 0xC8	; 200
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	91 83       	std	Z+1, r25	; 0x01
    1680:	80 83       	st	Z, r24
    1682:	fe 01       	movw	r30, r28
    1684:	e9 5a       	subi	r30, 0xA9	; 169
    1686:	ff 4f       	sbci	r31, 0xFF	; 255
    1688:	80 81       	ld	r24, Z
    168a:	91 81       	ldd	r25, Z+1	; 0x01
    168c:	01 97       	sbiw	r24, 0x01	; 1
    168e:	f1 f7       	brne	.-4      	; 0x168c <main+0xb18>
    1690:	fe 01       	movw	r30, r28
    1692:	e9 5a       	subi	r30, 0xA9	; 169
    1694:	ff 4f       	sbci	r31, 0xFF	; 255
    1696:	91 83       	std	Z+1, r25	; 0x01
    1698:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    169a:	de 01       	movw	r26, r28
    169c:	a7 5a       	subi	r26, 0xA7	; 167
    169e:	bf 4f       	sbci	r27, 0xFF	; 255
    16a0:	fe 01       	movw	r30, r28
    16a2:	e7 5a       	subi	r30, 0xA7	; 167
    16a4:	ff 4f       	sbci	r31, 0xFF	; 255
    16a6:	80 81       	ld	r24, Z
    16a8:	91 81       	ldd	r25, Z+1	; 0x01
    16aa:	01 97       	sbiw	r24, 0x01	; 1
    16ac:	11 96       	adiw	r26, 0x01	; 1
    16ae:	9c 93       	st	X, r25
    16b0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16b2:	fe 01       	movw	r30, r28
    16b4:	e7 5a       	subi	r30, 0xA7	; 167
    16b6:	ff 4f       	sbci	r31, 0xFF	; 255
    16b8:	80 81       	ld	r24, Z
    16ba:	91 81       	ldd	r25, Z+1	; 0x01
    16bc:	00 97       	sbiw	r24, 0x00	; 0
    16be:	d1 f6       	brne	.-76     	; 0x1674 <main+0xb00>
    16c0:	27 c0       	rjmp	.+78     	; 0x1710 <main+0xb9c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16c2:	8e 01       	movw	r16, r28
    16c4:	07 5a       	subi	r16, 0xA7	; 167
    16c6:	1f 4f       	sbci	r17, 0xFF	; 255
    16c8:	fe 01       	movw	r30, r28
    16ca:	e5 5a       	subi	r30, 0xA5	; 165
    16cc:	ff 4f       	sbci	r31, 0xFF	; 255
    16ce:	60 81       	ld	r22, Z
    16d0:	71 81       	ldd	r23, Z+1	; 0x01
    16d2:	82 81       	ldd	r24, Z+2	; 0x02
    16d4:	93 81       	ldd	r25, Z+3	; 0x03
    16d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16da:	dc 01       	movw	r26, r24
    16dc:	cb 01       	movw	r24, r22
    16de:	f8 01       	movw	r30, r16
    16e0:	91 83       	std	Z+1, r25	; 0x01
    16e2:	80 83       	st	Z, r24
    16e4:	de 01       	movw	r26, r28
    16e6:	ab 5a       	subi	r26, 0xAB	; 171
    16e8:	bf 4f       	sbci	r27, 0xFF	; 255
    16ea:	fe 01       	movw	r30, r28
    16ec:	e7 5a       	subi	r30, 0xA7	; 167
    16ee:	ff 4f       	sbci	r31, 0xFF	; 255
    16f0:	80 81       	ld	r24, Z
    16f2:	91 81       	ldd	r25, Z+1	; 0x01
    16f4:	8d 93       	st	X+, r24
    16f6:	9c 93       	st	X, r25
    16f8:	fe 01       	movw	r30, r28
    16fa:	eb 5a       	subi	r30, 0xAB	; 171
    16fc:	ff 4f       	sbci	r31, 0xFF	; 255
    16fe:	80 81       	ld	r24, Z
    1700:	91 81       	ldd	r25, Z+1	; 0x01
    1702:	01 97       	sbiw	r24, 0x01	; 1
    1704:	f1 f7       	brne	.-4      	; 0x1702 <main+0xb8e>
    1706:	fe 01       	movw	r30, r28
    1708:	eb 5a       	subi	r30, 0xAB	; 171
    170a:	ff 4f       	sbci	r31, 0xFF	; 255
    170c:	91 83       	std	Z+1, r25	; 0x01
    170e:	80 83       	st	Z, r24
			_delay_ms(10);
			UART_receiveString(UART_data);
    1710:	ce 01       	movw	r24, r28
    1712:	8e 55       	subi	r24, 0x5E	; 94
    1714:	9f 4f       	sbci	r25, 0xFF	; 255
    1716:	0e 94 f7 20 	call	0x41ee	; 0x41ee <UART_receiveString>
    171a:	fe 01       	movw	r30, r28
    171c:	ef 5a       	subi	r30, 0xAF	; 175
    171e:	ff 4f       	sbci	r31, 0xFF	; 255
    1720:	80 e0       	ldi	r24, 0x00	; 0
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	a0 e2       	ldi	r26, 0x20	; 32
    1726:	b1 e4       	ldi	r27, 0x41	; 65
    1728:	80 83       	st	Z, r24
    172a:	91 83       	std	Z+1, r25	; 0x01
    172c:	a2 83       	std	Z+2, r26	; 0x02
    172e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1730:	8e 01       	movw	r16, r28
    1732:	03 5b       	subi	r16, 0xB3	; 179
    1734:	1f 4f       	sbci	r17, 0xFF	; 255
    1736:	fe 01       	movw	r30, r28
    1738:	ef 5a       	subi	r30, 0xAF	; 175
    173a:	ff 4f       	sbci	r31, 0xFF	; 255
    173c:	60 81       	ld	r22, Z
    173e:	71 81       	ldd	r23, Z+1	; 0x01
    1740:	82 81       	ldd	r24, Z+2	; 0x02
    1742:	93 81       	ldd	r25, Z+3	; 0x03
    1744:	20 e0       	ldi	r18, 0x00	; 0
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	4a ef       	ldi	r20, 0xFA	; 250
    174a:	54 e4       	ldi	r21, 0x44	; 68
    174c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1750:	dc 01       	movw	r26, r24
    1752:	cb 01       	movw	r24, r22
    1754:	f8 01       	movw	r30, r16
    1756:	80 83       	st	Z, r24
    1758:	91 83       	std	Z+1, r25	; 0x01
    175a:	a2 83       	std	Z+2, r26	; 0x02
    175c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    175e:	fe 01       	movw	r30, r28
    1760:	e3 5b       	subi	r30, 0xB3	; 179
    1762:	ff 4f       	sbci	r31, 0xFF	; 255
    1764:	60 81       	ld	r22, Z
    1766:	71 81       	ldd	r23, Z+1	; 0x01
    1768:	82 81       	ldd	r24, Z+2	; 0x02
    176a:	93 81       	ldd	r25, Z+3	; 0x03
    176c:	20 e0       	ldi	r18, 0x00	; 0
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	40 e8       	ldi	r20, 0x80	; 128
    1772:	5f e3       	ldi	r21, 0x3F	; 63
    1774:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1778:	88 23       	and	r24, r24
    177a:	44 f4       	brge	.+16     	; 0x178c <main+0xc18>
		__ticks = 1;
    177c:	fe 01       	movw	r30, r28
    177e:	e5 5b       	subi	r30, 0xB5	; 181
    1780:	ff 4f       	sbci	r31, 0xFF	; 255
    1782:	81 e0       	ldi	r24, 0x01	; 1
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	91 83       	std	Z+1, r25	; 0x01
    1788:	80 83       	st	Z, r24
    178a:	64 c0       	rjmp	.+200    	; 0x1854 <main+0xce0>
	else if (__tmp > 65535)
    178c:	fe 01       	movw	r30, r28
    178e:	e3 5b       	subi	r30, 0xB3	; 179
    1790:	ff 4f       	sbci	r31, 0xFF	; 255
    1792:	60 81       	ld	r22, Z
    1794:	71 81       	ldd	r23, Z+1	; 0x01
    1796:	82 81       	ldd	r24, Z+2	; 0x02
    1798:	93 81       	ldd	r25, Z+3	; 0x03
    179a:	20 e0       	ldi	r18, 0x00	; 0
    179c:	3f ef       	ldi	r19, 0xFF	; 255
    179e:	4f e7       	ldi	r20, 0x7F	; 127
    17a0:	57 e4       	ldi	r21, 0x47	; 71
    17a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17a6:	18 16       	cp	r1, r24
    17a8:	0c f0       	brlt	.+2      	; 0x17ac <main+0xc38>
    17aa:	43 c0       	rjmp	.+134    	; 0x1832 <main+0xcbe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17ac:	fe 01       	movw	r30, r28
    17ae:	ef 5a       	subi	r30, 0xAF	; 175
    17b0:	ff 4f       	sbci	r31, 0xFF	; 255
    17b2:	60 81       	ld	r22, Z
    17b4:	71 81       	ldd	r23, Z+1	; 0x01
    17b6:	82 81       	ldd	r24, Z+2	; 0x02
    17b8:	93 81       	ldd	r25, Z+3	; 0x03
    17ba:	20 e0       	ldi	r18, 0x00	; 0
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	40 e2       	ldi	r20, 0x20	; 32
    17c0:	51 e4       	ldi	r21, 0x41	; 65
    17c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17c6:	dc 01       	movw	r26, r24
    17c8:	cb 01       	movw	r24, r22
    17ca:	8e 01       	movw	r16, r28
    17cc:	05 5b       	subi	r16, 0xB5	; 181
    17ce:	1f 4f       	sbci	r17, 0xFF	; 255
    17d0:	bc 01       	movw	r22, r24
    17d2:	cd 01       	movw	r24, r26
    17d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17d8:	dc 01       	movw	r26, r24
    17da:	cb 01       	movw	r24, r22
    17dc:	f8 01       	movw	r30, r16
    17de:	91 83       	std	Z+1, r25	; 0x01
    17e0:	80 83       	st	Z, r24
    17e2:	1f c0       	rjmp	.+62     	; 0x1822 <main+0xcae>
    17e4:	fe 01       	movw	r30, r28
    17e6:	e7 5b       	subi	r30, 0xB7	; 183
    17e8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ea:	88 ec       	ldi	r24, 0xC8	; 200
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	91 83       	std	Z+1, r25	; 0x01
    17f0:	80 83       	st	Z, r24
    17f2:	fe 01       	movw	r30, r28
    17f4:	e7 5b       	subi	r30, 0xB7	; 183
    17f6:	ff 4f       	sbci	r31, 0xFF	; 255
    17f8:	80 81       	ld	r24, Z
    17fa:	91 81       	ldd	r25, Z+1	; 0x01
    17fc:	01 97       	sbiw	r24, 0x01	; 1
    17fe:	f1 f7       	brne	.-4      	; 0x17fc <main+0xc88>
    1800:	fe 01       	movw	r30, r28
    1802:	e7 5b       	subi	r30, 0xB7	; 183
    1804:	ff 4f       	sbci	r31, 0xFF	; 255
    1806:	91 83       	std	Z+1, r25	; 0x01
    1808:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    180a:	de 01       	movw	r26, r28
    180c:	a5 5b       	subi	r26, 0xB5	; 181
    180e:	bf 4f       	sbci	r27, 0xFF	; 255
    1810:	fe 01       	movw	r30, r28
    1812:	e5 5b       	subi	r30, 0xB5	; 181
    1814:	ff 4f       	sbci	r31, 0xFF	; 255
    1816:	80 81       	ld	r24, Z
    1818:	91 81       	ldd	r25, Z+1	; 0x01
    181a:	01 97       	sbiw	r24, 0x01	; 1
    181c:	11 96       	adiw	r26, 0x01	; 1
    181e:	9c 93       	st	X, r25
    1820:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1822:	fe 01       	movw	r30, r28
    1824:	e5 5b       	subi	r30, 0xB5	; 181
    1826:	ff 4f       	sbci	r31, 0xFF	; 255
    1828:	80 81       	ld	r24, Z
    182a:	91 81       	ldd	r25, Z+1	; 0x01
    182c:	00 97       	sbiw	r24, 0x00	; 0
    182e:	d1 f6       	brne	.-76     	; 0x17e4 <main+0xc70>
    1830:	28 c0       	rjmp	.+80     	; 0x1882 <main+0xd0e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1832:	8e 01       	movw	r16, r28
    1834:	05 5b       	subi	r16, 0xB5	; 181
    1836:	1f 4f       	sbci	r17, 0xFF	; 255
    1838:	fe 01       	movw	r30, r28
    183a:	e3 5b       	subi	r30, 0xB3	; 179
    183c:	ff 4f       	sbci	r31, 0xFF	; 255
    183e:	60 81       	ld	r22, Z
    1840:	71 81       	ldd	r23, Z+1	; 0x01
    1842:	82 81       	ldd	r24, Z+2	; 0x02
    1844:	93 81       	ldd	r25, Z+3	; 0x03
    1846:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    184a:	dc 01       	movw	r26, r24
    184c:	cb 01       	movw	r24, r22
    184e:	f8 01       	movw	r30, r16
    1850:	91 83       	std	Z+1, r25	; 0x01
    1852:	80 83       	st	Z, r24
    1854:	de 01       	movw	r26, r28
    1856:	a9 5b       	subi	r26, 0xB9	; 185
    1858:	bf 4f       	sbci	r27, 0xFF	; 255
    185a:	fe 01       	movw	r30, r28
    185c:	e5 5b       	subi	r30, 0xB5	; 181
    185e:	ff 4f       	sbci	r31, 0xFF	; 255
    1860:	80 81       	ld	r24, Z
    1862:	91 81       	ldd	r25, Z+1	; 0x01
    1864:	11 96       	adiw	r26, 0x01	; 1
    1866:	9c 93       	st	X, r25
    1868:	8e 93       	st	-X, r24
    186a:	fe 01       	movw	r30, r28
    186c:	e9 5b       	subi	r30, 0xB9	; 185
    186e:	ff 4f       	sbci	r31, 0xFF	; 255
    1870:	80 81       	ld	r24, Z
    1872:	91 81       	ldd	r25, Z+1	; 0x01
    1874:	01 97       	sbiw	r24, 0x01	; 1
    1876:	f1 f7       	brne	.-4      	; 0x1874 <main+0xd00>
    1878:	fe 01       	movw	r30, r28
    187a:	e9 5b       	subi	r30, 0xB9	; 185
    187c:	ff 4f       	sbci	r31, 0xFF	; 255
    187e:	91 83       	std	Z+1, r25	; 0x01
    1880:	80 83       	st	Z, r24
			_delay_ms(10);

			if (UART_data[1] == 'O')
    1882:	fe 01       	movw	r30, r28
    1884:	ee 55       	subi	r30, 0x5E	; 94
    1886:	ff 4f       	sbci	r31, 0xFF	; 255
    1888:	81 81       	ldd	r24, Z+1	; 0x01
    188a:	8f 34       	cpi	r24, 0x4F	; 79
    188c:	09 f0       	breq	.+2      	; 0x1890 <main+0xd1c>
    188e:	07 c2       	rjmp	.+1038   	; 0x1c9e <main+0x112a>
			{
				wrongPass = 0;
    1890:	fe 01       	movw	r30, r28
    1892:	e3 56       	subi	r30, 0x63	; 99
    1894:	ff 4f       	sbci	r31, 0xFF	; 255
    1896:	10 82       	st	Z, r1

				if (sel_key == '+')
    1898:	fe 01       	movw	r30, r28
    189a:	e1 56       	subi	r30, 0x61	; 97
    189c:	ff 4f       	sbci	r31, 0xFF	; 255
    189e:	80 81       	ld	r24, Z
    18a0:	8b 32       	cpi	r24, 0x2B	; 43
    18a2:	09 f0       	breq	.+2      	; 0x18a6 <main+0xd32>
    18a4:	e4 c1       	rjmp	.+968    	; 0x1c6e <main+0x10fa>
				{
					UART_data[0] = '3';
    18a6:	fe 01       	movw	r30, r28
    18a8:	ee 55       	subi	r30, 0x5E	; 94
    18aa:	ff 4f       	sbci	r31, 0xFF	; 255
    18ac:	83 e3       	ldi	r24, 0x33	; 51
    18ae:	80 83       	st	Z, r24
					UART_data[1] = '#';
    18b0:	fe 01       	movw	r30, r28
    18b2:	ee 55       	subi	r30, 0x5E	; 94
    18b4:	ff 4f       	sbci	r31, 0xFF	; 255
    18b6:	83 e2       	ldi	r24, 0x23	; 35
    18b8:	81 83       	std	Z+1, r24	; 0x01
					UART_data[2] = '\0';
    18ba:	fe 01       	movw	r30, r28
    18bc:	ee 55       	subi	r30, 0x5E	; 94
    18be:	ff 4f       	sbci	r31, 0xFF	; 255
    18c0:	12 82       	std	Z+2, r1	; 0x02
					UART_sendString(UART_data);
    18c2:	ce 01       	movw	r24, r28
    18c4:	8e 55       	subi	r24, 0x5E	; 94
    18c6:	9f 4f       	sbci	r25, 0xFF	; 255
    18c8:	0e 94 ce 20 	call	0x419c	; 0x419c <UART_sendString>

					Timer1_con.initial_value = 0;
    18cc:	fe 01       	movw	r30, r28
    18ce:	e8 54       	subi	r30, 0x48	; 72
    18d0:	ff 4f       	sbci	r31, 0xFF	; 255
    18d2:	11 82       	std	Z+1, r1	; 0x01
    18d4:	10 82       	st	Z, r1
					Timer1_con.compare_value = 58594;
    18d6:	fe 01       	movw	r30, r28
    18d8:	e8 54       	subi	r30, 0x48	; 72
    18da:	ff 4f       	sbci	r31, 0xFF	; 255
    18dc:	82 ee       	ldi	r24, 0xE2	; 226
    18de:	94 ee       	ldi	r25, 0xE4	; 228
    18e0:	93 83       	std	Z+3, r25	; 0x03
    18e2:	82 83       	std	Z+2, r24	; 0x02
					Timer1_con.prescaler = PSC_1024;
    18e4:	fe 01       	movw	r30, r28
    18e6:	e8 54       	subi	r30, 0x48	; 72
    18e8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ea:	85 e0       	ldi	r24, 0x05	; 5
    18ec:	84 83       	std	Z+4, r24	; 0x04
					Timer1_con.mode = CTC;
    18ee:	fe 01       	movw	r30, r28
    18f0:	e8 54       	subi	r30, 0x48	; 72
    18f2:	ff 4f       	sbci	r31, 0xFF	; 255
    18f4:	81 e0       	ldi	r24, 0x01	; 1
    18f6:	85 83       	std	Z+5, r24	; 0x05
					Timer1_init(&Timer1_con);
    18f8:	ce 01       	movw	r24, r28
    18fa:	88 54       	subi	r24, 0x48	; 72
    18fc:	9f 4f       	sbci	r25, 0xFF	; 255
    18fe:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <Timer1_init>

					LCD_clearScreen();
    1902:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <LCD_clearScreen>
					LCD_moveCursor(0,0);
    1906:	80 e0       	ldi	r24, 0x00	; 0
    1908:	60 e0       	ldi	r22, 0x00	; 0
    190a:	0e 94 f4 1e 	call	0x3de8	; 0x3de8 <LCD_moveCursor>
					LCD_displayString("    Opening");
    190e:	80 ec       	ldi	r24, 0xC0	; 192
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <LCD_displayString>

					uint8 c =14;
    1916:	fe 01       	movw	r30, r28
    1918:	e4 56       	subi	r30, 0x64	; 100
    191a:	ff 4f       	sbci	r31, 0xFF	; 255
    191c:	8e e0       	ldi	r24, 0x0E	; 14
    191e:	80 83       	st	Z, r24
    1920:	a7 c0       	rjmp	.+334    	; 0x1a70 <main+0xefc>
					while(g_clbk == 0)
					{
						LCD_moveCursor(1,7);
    1922:	81 e0       	ldi	r24, 0x01	; 1
    1924:	67 e0       	ldi	r22, 0x07	; 7
    1926:	0e 94 f4 1e 	call	0x3de8	; 0x3de8 <LCD_moveCursor>
						LCD_intgerToString(c);
    192a:	fe 01       	movw	r30, r28
    192c:	e4 56       	subi	r30, 0x64	; 100
    192e:	ff 4f       	sbci	r31, 0xFF	; 255
    1930:	80 81       	ld	r24, Z
    1932:	88 2f       	mov	r24, r24
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	0e 94 4f 1f 	call	0x3e9e	; 0x3e9e <LCD_intgerToString>
						if (c<10)
    193a:	fe 01       	movw	r30, r28
    193c:	e4 56       	subi	r30, 0x64	; 100
    193e:	ff 4f       	sbci	r31, 0xFF	; 255
    1940:	80 81       	ld	r24, Z
    1942:	8a 30       	cpi	r24, 0x0A	; 10
    1944:	38 f4       	brcc	.+14     	; 0x1954 <main+0xde0>
						{
							LCD_moveCursor(1,8);
    1946:	81 e0       	ldi	r24, 0x01	; 1
    1948:	68 e0       	ldi	r22, 0x08	; 8
    194a:	0e 94 f4 1e 	call	0x3de8	; 0x3de8 <LCD_moveCursor>
							LCD_displayCharacter(' ');
    194e:	80 e2       	ldi	r24, 0x20	; 32
    1950:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <LCD_displayCharacter>
    1954:	fe 01       	movw	r30, r28
    1956:	ed 5b       	subi	r30, 0xBD	; 189
    1958:	ff 4f       	sbci	r31, 0xFF	; 255
    195a:	80 e0       	ldi	r24, 0x00	; 0
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	aa e7       	ldi	r26, 0x7A	; 122
    1960:	b4 e4       	ldi	r27, 0x44	; 68
    1962:	80 83       	st	Z, r24
    1964:	91 83       	std	Z+1, r25	; 0x01
    1966:	a2 83       	std	Z+2, r26	; 0x02
    1968:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    196a:	8e 01       	movw	r16, r28
    196c:	01 5c       	subi	r16, 0xC1	; 193
    196e:	1f 4f       	sbci	r17, 0xFF	; 255
    1970:	fe 01       	movw	r30, r28
    1972:	ed 5b       	subi	r30, 0xBD	; 189
    1974:	ff 4f       	sbci	r31, 0xFF	; 255
    1976:	60 81       	ld	r22, Z
    1978:	71 81       	ldd	r23, Z+1	; 0x01
    197a:	82 81       	ldd	r24, Z+2	; 0x02
    197c:	93 81       	ldd	r25, Z+3	; 0x03
    197e:	20 e0       	ldi	r18, 0x00	; 0
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	4a ef       	ldi	r20, 0xFA	; 250
    1984:	54 e4       	ldi	r21, 0x44	; 68
    1986:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    198a:	dc 01       	movw	r26, r24
    198c:	cb 01       	movw	r24, r22
    198e:	f8 01       	movw	r30, r16
    1990:	80 83       	st	Z, r24
    1992:	91 83       	std	Z+1, r25	; 0x01
    1994:	a2 83       	std	Z+2, r26	; 0x02
    1996:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1998:	fe 01       	movw	r30, r28
    199a:	ff 96       	adiw	r30, 0x3f	; 63
    199c:	60 81       	ld	r22, Z
    199e:	71 81       	ldd	r23, Z+1	; 0x01
    19a0:	82 81       	ldd	r24, Z+2	; 0x02
    19a2:	93 81       	ldd	r25, Z+3	; 0x03
    19a4:	20 e0       	ldi	r18, 0x00	; 0
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	40 e8       	ldi	r20, 0x80	; 128
    19aa:	5f e3       	ldi	r21, 0x3F	; 63
    19ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19b0:	88 23       	and	r24, r24
    19b2:	2c f4       	brge	.+10     	; 0x19be <main+0xe4a>
		__ticks = 1;
    19b4:	81 e0       	ldi	r24, 0x01	; 1
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	9e af       	std	Y+62, r25	; 0x3e
    19ba:	8d af       	std	Y+61, r24	; 0x3d
    19bc:	46 c0       	rjmp	.+140    	; 0x1a4a <main+0xed6>
	else if (__tmp > 65535)
    19be:	fe 01       	movw	r30, r28
    19c0:	ff 96       	adiw	r30, 0x3f	; 63
    19c2:	60 81       	ld	r22, Z
    19c4:	71 81       	ldd	r23, Z+1	; 0x01
    19c6:	82 81       	ldd	r24, Z+2	; 0x02
    19c8:	93 81       	ldd	r25, Z+3	; 0x03
    19ca:	20 e0       	ldi	r18, 0x00	; 0
    19cc:	3f ef       	ldi	r19, 0xFF	; 255
    19ce:	4f e7       	ldi	r20, 0x7F	; 127
    19d0:	57 e4       	ldi	r21, 0x47	; 71
    19d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19d6:	18 16       	cp	r1, r24
    19d8:	64 f5       	brge	.+88     	; 0x1a32 <main+0xebe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19da:	fe 01       	movw	r30, r28
    19dc:	ed 5b       	subi	r30, 0xBD	; 189
    19de:	ff 4f       	sbci	r31, 0xFF	; 255
    19e0:	60 81       	ld	r22, Z
    19e2:	71 81       	ldd	r23, Z+1	; 0x01
    19e4:	82 81       	ldd	r24, Z+2	; 0x02
    19e6:	93 81       	ldd	r25, Z+3	; 0x03
    19e8:	20 e0       	ldi	r18, 0x00	; 0
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	40 e2       	ldi	r20, 0x20	; 32
    19ee:	51 e4       	ldi	r21, 0x41	; 65
    19f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19f4:	dc 01       	movw	r26, r24
    19f6:	cb 01       	movw	r24, r22
    19f8:	bc 01       	movw	r22, r24
    19fa:	cd 01       	movw	r24, r26
    19fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a00:	dc 01       	movw	r26, r24
    1a02:	cb 01       	movw	r24, r22
    1a04:	9e af       	std	Y+62, r25	; 0x3e
    1a06:	8d af       	std	Y+61, r24	; 0x3d
    1a08:	0f c0       	rjmp	.+30     	; 0x1a28 <main+0xeb4>
    1a0a:	88 ec       	ldi	r24, 0xC8	; 200
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	9c af       	std	Y+60, r25	; 0x3c
    1a10:	8b af       	std	Y+59, r24	; 0x3b
    1a12:	8b ad       	ldd	r24, Y+59	; 0x3b
    1a14:	9c ad       	ldd	r25, Y+60	; 0x3c
    1a16:	01 97       	sbiw	r24, 0x01	; 1
    1a18:	f1 f7       	brne	.-4      	; 0x1a16 <main+0xea2>
    1a1a:	9c af       	std	Y+60, r25	; 0x3c
    1a1c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a1e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a20:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a22:	01 97       	sbiw	r24, 0x01	; 1
    1a24:	9e af       	std	Y+62, r25	; 0x3e
    1a26:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a28:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a2a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a2c:	00 97       	sbiw	r24, 0x00	; 0
    1a2e:	69 f7       	brne	.-38     	; 0x1a0a <main+0xe96>
    1a30:	16 c0       	rjmp	.+44     	; 0x1a5e <main+0xeea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a32:	fe 01       	movw	r30, r28
    1a34:	ff 96       	adiw	r30, 0x3f	; 63
    1a36:	60 81       	ld	r22, Z
    1a38:	71 81       	ldd	r23, Z+1	; 0x01
    1a3a:	82 81       	ldd	r24, Z+2	; 0x02
    1a3c:	93 81       	ldd	r25, Z+3	; 0x03
    1a3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a42:	dc 01       	movw	r26, r24
    1a44:	cb 01       	movw	r24, r22
    1a46:	9e af       	std	Y+62, r25	; 0x3e
    1a48:	8d af       	std	Y+61, r24	; 0x3d
    1a4a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a4c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a4e:	9a af       	std	Y+58, r25	; 0x3a
    1a50:	89 af       	std	Y+57, r24	; 0x39
    1a52:	89 ad       	ldd	r24, Y+57	; 0x39
    1a54:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a56:	01 97       	sbiw	r24, 0x01	; 1
    1a58:	f1 f7       	brne	.-4      	; 0x1a56 <main+0xee2>
    1a5a:	9a af       	std	Y+58, r25	; 0x3a
    1a5c:	89 af       	std	Y+57, r24	; 0x39
						}
						_delay_ms(1000);
						c--;
    1a5e:	de 01       	movw	r26, r28
    1a60:	a4 56       	subi	r26, 0x64	; 100
    1a62:	bf 4f       	sbci	r27, 0xFF	; 255
    1a64:	fe 01       	movw	r30, r28
    1a66:	e4 56       	subi	r30, 0x64	; 100
    1a68:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6a:	80 81       	ld	r24, Z
    1a6c:	81 50       	subi	r24, 0x01	; 1
    1a6e:	8c 93       	st	X, r24
					LCD_clearScreen();
					LCD_moveCursor(0,0);
					LCD_displayString("    Opening");

					uint8 c =14;
					while(g_clbk == 0)
    1a70:	80 91 31 01 	lds	r24, 0x0131
    1a74:	88 23       	and	r24, r24
    1a76:	09 f4       	brne	.+2      	; 0x1a7a <main+0xf06>
    1a78:	54 cf       	rjmp	.-344    	; 0x1922 <main+0xdae>
						}
						_delay_ms(1000);
						c--;
					}

					Timer1_con.initial_value = 0;
    1a7a:	fe 01       	movw	r30, r28
    1a7c:	e8 54       	subi	r30, 0x48	; 72
    1a7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a80:	11 82       	std	Z+1, r1	; 0x01
    1a82:	10 82       	st	Z, r1
					Timer1_con.compare_value = 31250;
    1a84:	fe 01       	movw	r30, r28
    1a86:	e8 54       	subi	r30, 0x48	; 72
    1a88:	ff 4f       	sbci	r31, 0xFF	; 255
    1a8a:	82 e1       	ldi	r24, 0x12	; 18
    1a8c:	9a e7       	ldi	r25, 0x7A	; 122
    1a8e:	93 83       	std	Z+3, r25	; 0x03
    1a90:	82 83       	std	Z+2, r24	; 0x02
					Timer1_con.prescaler = PSC_256;
    1a92:	fe 01       	movw	r30, r28
    1a94:	e8 54       	subi	r30, 0x48	; 72
    1a96:	ff 4f       	sbci	r31, 0xFF	; 255
    1a98:	84 e0       	ldi	r24, 0x04	; 4
    1a9a:	84 83       	std	Z+4, r24	; 0x04
					Timer1_con.mode = CTC;
    1a9c:	fe 01       	movw	r30, r28
    1a9e:	e8 54       	subi	r30, 0x48	; 72
    1aa0:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa2:	81 e0       	ldi	r24, 0x01	; 1
    1aa4:	85 83       	std	Z+5, r24	; 0x05
					Timer1_init(&Timer1_con);
    1aa6:	ce 01       	movw	r24, r28
    1aa8:	88 54       	subi	r24, 0x48	; 72
    1aaa:	9f 4f       	sbci	r25, 0xFF	; 255
    1aac:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <Timer1_init>

					LCD_clearScreen();
    1ab0:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <LCD_clearScreen>
					LCD_moveCursor(0,0);
    1ab4:	80 e0       	ldi	r24, 0x00	; 0
    1ab6:	60 e0       	ldi	r22, 0x00	; 0
    1ab8:	0e 94 f4 1e 	call	0x3de8	; 0x3de8 <LCD_moveCursor>
					LCD_displayString("    Holding");
    1abc:	8c ec       	ldi	r24, 0xCC	; 204
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <LCD_displayString>
					while(g_clbk == 1);
    1ac4:	80 91 31 01 	lds	r24, 0x0131
    1ac8:	81 30       	cpi	r24, 0x01	; 1
    1aca:	e1 f3       	breq	.-8      	; 0x1ac4 <main+0xf50>

					Timer1_con.initial_value = 0;
    1acc:	fe 01       	movw	r30, r28
    1ace:	e8 54       	subi	r30, 0x48	; 72
    1ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad2:	11 82       	std	Z+1, r1	; 0x01
    1ad4:	10 82       	st	Z, r1
					Timer1_con.compare_value = 58594;
    1ad6:	fe 01       	movw	r30, r28
    1ad8:	e8 54       	subi	r30, 0x48	; 72
    1ada:	ff 4f       	sbci	r31, 0xFF	; 255
    1adc:	82 ee       	ldi	r24, 0xE2	; 226
    1ade:	94 ee       	ldi	r25, 0xE4	; 228
    1ae0:	93 83       	std	Z+3, r25	; 0x03
    1ae2:	82 83       	std	Z+2, r24	; 0x02
					Timer1_con.prescaler = PSC_1024;
    1ae4:	fe 01       	movw	r30, r28
    1ae6:	e8 54       	subi	r30, 0x48	; 72
    1ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aea:	85 e0       	ldi	r24, 0x05	; 5
    1aec:	84 83       	std	Z+4, r24	; 0x04
					Timer1_con.mode = CTC;
    1aee:	fe 01       	movw	r30, r28
    1af0:	e8 54       	subi	r30, 0x48	; 72
    1af2:	ff 4f       	sbci	r31, 0xFF	; 255
    1af4:	81 e0       	ldi	r24, 0x01	; 1
    1af6:	85 83       	std	Z+5, r24	; 0x05
					Timer1_init(&Timer1_con);
    1af8:	ce 01       	movw	r24, r28
    1afa:	88 54       	subi	r24, 0x48	; 72
    1afc:	9f 4f       	sbci	r25, 0xFF	; 255
    1afe:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <Timer1_init>

					LCD_clearScreen();
    1b02:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <LCD_clearScreen>
					LCD_moveCursor(0,0);
    1b06:	80 e0       	ldi	r24, 0x00	; 0
    1b08:	60 e0       	ldi	r22, 0x00	; 0
    1b0a:	0e 94 f4 1e 	call	0x3de8	; 0x3de8 <LCD_moveCursor>
					LCD_displayString("    Closing");
    1b0e:	88 ed       	ldi	r24, 0xD8	; 216
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <LCD_displayString>
					c = 14;
    1b16:	fe 01       	movw	r30, r28
    1b18:	e4 56       	subi	r30, 0x64	; 100
    1b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1c:	8e e0       	ldi	r24, 0x0E	; 14
    1b1e:	80 83       	st	Z, r24
    1b20:	94 c0       	rjmp	.+296    	; 0x1c4a <main+0x10d6>

					while(g_clbk == 2)
					{
						LCD_moveCursor(1,7);
    1b22:	81 e0       	ldi	r24, 0x01	; 1
    1b24:	67 e0       	ldi	r22, 0x07	; 7
    1b26:	0e 94 f4 1e 	call	0x3de8	; 0x3de8 <LCD_moveCursor>
						LCD_intgerToString(c);
    1b2a:	fe 01       	movw	r30, r28
    1b2c:	e4 56       	subi	r30, 0x64	; 100
    1b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b30:	80 81       	ld	r24, Z
    1b32:	88 2f       	mov	r24, r24
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	0e 94 4f 1f 	call	0x3e9e	; 0x3e9e <LCD_intgerToString>
						if (c<10)
    1b3a:	fe 01       	movw	r30, r28
    1b3c:	e4 56       	subi	r30, 0x64	; 100
    1b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b40:	80 81       	ld	r24, Z
    1b42:	8a 30       	cpi	r24, 0x0A	; 10
    1b44:	38 f4       	brcc	.+14     	; 0x1b54 <main+0xfe0>
						{
							LCD_moveCursor(1,8);
    1b46:	81 e0       	ldi	r24, 0x01	; 1
    1b48:	68 e0       	ldi	r22, 0x08	; 8
    1b4a:	0e 94 f4 1e 	call	0x3de8	; 0x3de8 <LCD_moveCursor>
							LCD_displayCharacter(' ');
    1b4e:	80 e2       	ldi	r24, 0x20	; 32
    1b50:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <LCD_displayCharacter>
    1b54:	80 e0       	ldi	r24, 0x00	; 0
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	aa e7       	ldi	r26, 0x7A	; 122
    1b5a:	b4 e4       	ldi	r27, 0x44	; 68
    1b5c:	8d ab       	std	Y+53, r24	; 0x35
    1b5e:	9e ab       	std	Y+54, r25	; 0x36
    1b60:	af ab       	std	Y+55, r26	; 0x37
    1b62:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b64:	6d a9       	ldd	r22, Y+53	; 0x35
    1b66:	7e a9       	ldd	r23, Y+54	; 0x36
    1b68:	8f a9       	ldd	r24, Y+55	; 0x37
    1b6a:	98 ad       	ldd	r25, Y+56	; 0x38
    1b6c:	20 e0       	ldi	r18, 0x00	; 0
    1b6e:	30 e0       	ldi	r19, 0x00	; 0
    1b70:	4a ef       	ldi	r20, 0xFA	; 250
    1b72:	54 e4       	ldi	r21, 0x44	; 68
    1b74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b78:	dc 01       	movw	r26, r24
    1b7a:	cb 01       	movw	r24, r22
    1b7c:	89 ab       	std	Y+49, r24	; 0x31
    1b7e:	9a ab       	std	Y+50, r25	; 0x32
    1b80:	ab ab       	std	Y+51, r26	; 0x33
    1b82:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1b84:	69 a9       	ldd	r22, Y+49	; 0x31
    1b86:	7a a9       	ldd	r23, Y+50	; 0x32
    1b88:	8b a9       	ldd	r24, Y+51	; 0x33
    1b8a:	9c a9       	ldd	r25, Y+52	; 0x34
    1b8c:	20 e0       	ldi	r18, 0x00	; 0
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	40 e8       	ldi	r20, 0x80	; 128
    1b92:	5f e3       	ldi	r21, 0x3F	; 63
    1b94:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b98:	88 23       	and	r24, r24
    1b9a:	2c f4       	brge	.+10     	; 0x1ba6 <main+0x1032>
		__ticks = 1;
    1b9c:	81 e0       	ldi	r24, 0x01	; 1
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	98 ab       	std	Y+48, r25	; 0x30
    1ba2:	8f a7       	std	Y+47, r24	; 0x2f
    1ba4:	3f c0       	rjmp	.+126    	; 0x1c24 <main+0x10b0>
	else if (__tmp > 65535)
    1ba6:	69 a9       	ldd	r22, Y+49	; 0x31
    1ba8:	7a a9       	ldd	r23, Y+50	; 0x32
    1baa:	8b a9       	ldd	r24, Y+51	; 0x33
    1bac:	9c a9       	ldd	r25, Y+52	; 0x34
    1bae:	20 e0       	ldi	r18, 0x00	; 0
    1bb0:	3f ef       	ldi	r19, 0xFF	; 255
    1bb2:	4f e7       	ldi	r20, 0x7F	; 127
    1bb4:	57 e4       	ldi	r21, 0x47	; 71
    1bb6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bba:	18 16       	cp	r1, r24
    1bbc:	4c f5       	brge	.+82     	; 0x1c10 <main+0x109c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bbe:	6d a9       	ldd	r22, Y+53	; 0x35
    1bc0:	7e a9       	ldd	r23, Y+54	; 0x36
    1bc2:	8f a9       	ldd	r24, Y+55	; 0x37
    1bc4:	98 ad       	ldd	r25, Y+56	; 0x38
    1bc6:	20 e0       	ldi	r18, 0x00	; 0
    1bc8:	30 e0       	ldi	r19, 0x00	; 0
    1bca:	40 e2       	ldi	r20, 0x20	; 32
    1bcc:	51 e4       	ldi	r21, 0x41	; 65
    1bce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bd2:	dc 01       	movw	r26, r24
    1bd4:	cb 01       	movw	r24, r22
    1bd6:	bc 01       	movw	r22, r24
    1bd8:	cd 01       	movw	r24, r26
    1bda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bde:	dc 01       	movw	r26, r24
    1be0:	cb 01       	movw	r24, r22
    1be2:	98 ab       	std	Y+48, r25	; 0x30
    1be4:	8f a7       	std	Y+47, r24	; 0x2f
    1be6:	0f c0       	rjmp	.+30     	; 0x1c06 <main+0x1092>
    1be8:	88 ec       	ldi	r24, 0xC8	; 200
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	9e a7       	std	Y+46, r25	; 0x2e
    1bee:	8d a7       	std	Y+45, r24	; 0x2d
    1bf0:	8d a5       	ldd	r24, Y+45	; 0x2d
    1bf2:	9e a5       	ldd	r25, Y+46	; 0x2e
    1bf4:	01 97       	sbiw	r24, 0x01	; 1
    1bf6:	f1 f7       	brne	.-4      	; 0x1bf4 <main+0x1080>
    1bf8:	9e a7       	std	Y+46, r25	; 0x2e
    1bfa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bfc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bfe:	98 a9       	ldd	r25, Y+48	; 0x30
    1c00:	01 97       	sbiw	r24, 0x01	; 1
    1c02:	98 ab       	std	Y+48, r25	; 0x30
    1c04:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c06:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c08:	98 a9       	ldd	r25, Y+48	; 0x30
    1c0a:	00 97       	sbiw	r24, 0x00	; 0
    1c0c:	69 f7       	brne	.-38     	; 0x1be8 <main+0x1074>
    1c0e:	14 c0       	rjmp	.+40     	; 0x1c38 <main+0x10c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c10:	69 a9       	ldd	r22, Y+49	; 0x31
    1c12:	7a a9       	ldd	r23, Y+50	; 0x32
    1c14:	8b a9       	ldd	r24, Y+51	; 0x33
    1c16:	9c a9       	ldd	r25, Y+52	; 0x34
    1c18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c1c:	dc 01       	movw	r26, r24
    1c1e:	cb 01       	movw	r24, r22
    1c20:	98 ab       	std	Y+48, r25	; 0x30
    1c22:	8f a7       	std	Y+47, r24	; 0x2f
    1c24:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c26:	98 a9       	ldd	r25, Y+48	; 0x30
    1c28:	9c a7       	std	Y+44, r25	; 0x2c
    1c2a:	8b a7       	std	Y+43, r24	; 0x2b
    1c2c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c2e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c30:	01 97       	sbiw	r24, 0x01	; 1
    1c32:	f1 f7       	brne	.-4      	; 0x1c30 <main+0x10bc>
    1c34:	9c a7       	std	Y+44, r25	; 0x2c
    1c36:	8b a7       	std	Y+43, r24	; 0x2b
						}
						_delay_ms(1000);
						c--;
    1c38:	de 01       	movw	r26, r28
    1c3a:	a4 56       	subi	r26, 0x64	; 100
    1c3c:	bf 4f       	sbci	r27, 0xFF	; 255
    1c3e:	fe 01       	movw	r30, r28
    1c40:	e4 56       	subi	r30, 0x64	; 100
    1c42:	ff 4f       	sbci	r31, 0xFF	; 255
    1c44:	80 81       	ld	r24, Z
    1c46:	81 50       	subi	r24, 0x01	; 1
    1c48:	8c 93       	st	X, r24
					LCD_clearScreen();
					LCD_moveCursor(0,0);
					LCD_displayString("    Closing");
					c = 14;

					while(g_clbk == 2)
    1c4a:	80 91 31 01 	lds	r24, 0x0131
    1c4e:	82 30       	cpi	r24, 0x02	; 2
    1c50:	09 f4       	brne	.+2      	; 0x1c54 <main+0x10e0>
    1c52:	67 cf       	rjmp	.-306    	; 0x1b22 <main+0xfae>
						}
						_delay_ms(1000);
						c--;
					}

					Timer1_deInit();
    1c54:	0e 94 c8 1f 	call	0x3f90	; 0x3f90 <Timer1_deInit>
					LCD_clearScreen();
    1c58:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <LCD_clearScreen>
					g_clbk=0;
    1c5c:	10 92 31 01 	sts	0x0131, r1

					//*********
					case_select = 1;
    1c60:	fe 01       	movw	r30, r28
    1c62:	e2 56       	subi	r30, 0x62	; 98
    1c64:	ff 4f       	sbci	r31, 0xFF	; 255
    1c66:	81 e0       	ldi	r24, 0x01	; 1
    1c68:	80 83       	st	Z, r24
    1c6a:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <main+0x106>

				}
				else if (sel_key == '-')
    1c6e:	fe 01       	movw	r30, r28
    1c70:	e1 56       	subi	r30, 0x61	; 97
    1c72:	ff 4f       	sbci	r31, 0xFF	; 255
    1c74:	80 81       	ld	r24, Z
    1c76:	8d 32       	cpi	r24, 0x2D	; 45
    1c78:	11 f0       	breq	.+4      	; 0x1c7e <main+0x110a>
    1c7a:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <main+0x106>
				{
					LCD_clearScreen();
    1c7e:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <LCD_clearScreen>
					LCD_moveCursor(0,0);
    1c82:	80 e0       	ldi	r24, 0x00	; 0
    1c84:	60 e0       	ldi	r22, 0x00	; 0
    1c86:	0e 94 f4 1e 	call	0x3de8	; 0x3de8 <LCD_moveCursor>
					LCD_displayString("plz enter pass");
    1c8a:	80 e6       	ldi	r24, 0x60	; 96
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <LCD_displayString>
					case_select=0;
    1c92:	fe 01       	movw	r30, r28
    1c94:	e2 56       	subi	r30, 0x62	; 98
    1c96:	ff 4f       	sbci	r31, 0xFF	; 255
    1c98:	10 82       	st	Z, r1
    1c9a:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <main+0x106>
				}

			}
			else
			{
				wrongPass ++;
    1c9e:	de 01       	movw	r26, r28
    1ca0:	a3 56       	subi	r26, 0x63	; 99
    1ca2:	bf 4f       	sbci	r27, 0xFF	; 255
    1ca4:	fe 01       	movw	r30, r28
    1ca6:	e3 56       	subi	r30, 0x63	; 99
    1ca8:	ff 4f       	sbci	r31, 0xFF	; 255
    1caa:	80 81       	ld	r24, Z
    1cac:	8f 5f       	subi	r24, 0xFF	; 255
    1cae:	8c 93       	st	X, r24
				if (wrongPass == 3)
    1cb0:	fe 01       	movw	r30, r28
    1cb2:	e3 56       	subi	r30, 0x63	; 99
    1cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb6:	80 81       	ld	r24, Z
    1cb8:	83 30       	cpi	r24, 0x03	; 3
    1cba:	09 f0       	breq	.+2      	; 0x1cbe <main+0x114a>
    1cbc:	5e c1       	rjmp	.+700    	; 0x1f7a <main+0x1406>
				{
					LCD_clearScreen();
    1cbe:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <LCD_clearScreen>
					LCD_moveCursor(0,0);
    1cc2:	80 e0       	ldi	r24, 0x00	; 0
    1cc4:	60 e0       	ldi	r22, 0x00	; 0
    1cc6:	0e 94 f4 1e 	call	0x3de8	; 0x3de8 <LCD_moveCursor>
					LCD_displayString("WRONG PASS !!");
    1cca:	84 ee       	ldi	r24, 0xE4	; 228
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <LCD_displayString>
    1cd2:	80 e0       	ldi	r24, 0x00	; 0
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	aa ef       	ldi	r26, 0xFA	; 250
    1cd8:	b3 e4       	ldi	r27, 0x43	; 67
    1cda:	8f a3       	std	Y+39, r24	; 0x27
    1cdc:	98 a7       	std	Y+40, r25	; 0x28
    1cde:	a9 a7       	std	Y+41, r26	; 0x29
    1ce0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ce2:	6f a1       	ldd	r22, Y+39	; 0x27
    1ce4:	78 a5       	ldd	r23, Y+40	; 0x28
    1ce6:	89 a5       	ldd	r24, Y+41	; 0x29
    1ce8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cea:	20 e0       	ldi	r18, 0x00	; 0
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	4a ef       	ldi	r20, 0xFA	; 250
    1cf0:	54 e4       	ldi	r21, 0x44	; 68
    1cf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cf6:	dc 01       	movw	r26, r24
    1cf8:	cb 01       	movw	r24, r22
    1cfa:	8b a3       	std	Y+35, r24	; 0x23
    1cfc:	9c a3       	std	Y+36, r25	; 0x24
    1cfe:	ad a3       	std	Y+37, r26	; 0x25
    1d00:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d02:	6b a1       	ldd	r22, Y+35	; 0x23
    1d04:	7c a1       	ldd	r23, Y+36	; 0x24
    1d06:	8d a1       	ldd	r24, Y+37	; 0x25
    1d08:	9e a1       	ldd	r25, Y+38	; 0x26
    1d0a:	20 e0       	ldi	r18, 0x00	; 0
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	40 e8       	ldi	r20, 0x80	; 128
    1d10:	5f e3       	ldi	r21, 0x3F	; 63
    1d12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d16:	88 23       	and	r24, r24
    1d18:	2c f4       	brge	.+10     	; 0x1d24 <main+0x11b0>
		__ticks = 1;
    1d1a:	81 e0       	ldi	r24, 0x01	; 1
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	9a a3       	std	Y+34, r25	; 0x22
    1d20:	89 a3       	std	Y+33, r24	; 0x21
    1d22:	3f c0       	rjmp	.+126    	; 0x1da2 <main+0x122e>
	else if (__tmp > 65535)
    1d24:	6b a1       	ldd	r22, Y+35	; 0x23
    1d26:	7c a1       	ldd	r23, Y+36	; 0x24
    1d28:	8d a1       	ldd	r24, Y+37	; 0x25
    1d2a:	9e a1       	ldd	r25, Y+38	; 0x26
    1d2c:	20 e0       	ldi	r18, 0x00	; 0
    1d2e:	3f ef       	ldi	r19, 0xFF	; 255
    1d30:	4f e7       	ldi	r20, 0x7F	; 127
    1d32:	57 e4       	ldi	r21, 0x47	; 71
    1d34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d38:	18 16       	cp	r1, r24
    1d3a:	4c f5       	brge	.+82     	; 0x1d8e <main+0x121a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d3c:	6f a1       	ldd	r22, Y+39	; 0x27
    1d3e:	78 a5       	ldd	r23, Y+40	; 0x28
    1d40:	89 a5       	ldd	r24, Y+41	; 0x29
    1d42:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d44:	20 e0       	ldi	r18, 0x00	; 0
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	40 e2       	ldi	r20, 0x20	; 32
    1d4a:	51 e4       	ldi	r21, 0x41	; 65
    1d4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d50:	dc 01       	movw	r26, r24
    1d52:	cb 01       	movw	r24, r22
    1d54:	bc 01       	movw	r22, r24
    1d56:	cd 01       	movw	r24, r26
    1d58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d5c:	dc 01       	movw	r26, r24
    1d5e:	cb 01       	movw	r24, r22
    1d60:	9a a3       	std	Y+34, r25	; 0x22
    1d62:	89 a3       	std	Y+33, r24	; 0x21
    1d64:	0f c0       	rjmp	.+30     	; 0x1d84 <main+0x1210>
    1d66:	88 ec       	ldi	r24, 0xC8	; 200
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	98 a3       	std	Y+32, r25	; 0x20
    1d6c:	8f 8f       	std	Y+31, r24	; 0x1f
    1d6e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d70:	98 a1       	ldd	r25, Y+32	; 0x20
    1d72:	01 97       	sbiw	r24, 0x01	; 1
    1d74:	f1 f7       	brne	.-4      	; 0x1d72 <main+0x11fe>
    1d76:	98 a3       	std	Y+32, r25	; 0x20
    1d78:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d7a:	89 a1       	ldd	r24, Y+33	; 0x21
    1d7c:	9a a1       	ldd	r25, Y+34	; 0x22
    1d7e:	01 97       	sbiw	r24, 0x01	; 1
    1d80:	9a a3       	std	Y+34, r25	; 0x22
    1d82:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d84:	89 a1       	ldd	r24, Y+33	; 0x21
    1d86:	9a a1       	ldd	r25, Y+34	; 0x22
    1d88:	00 97       	sbiw	r24, 0x00	; 0
    1d8a:	69 f7       	brne	.-38     	; 0x1d66 <main+0x11f2>
    1d8c:	14 c0       	rjmp	.+40     	; 0x1db6 <main+0x1242>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d8e:	6b a1       	ldd	r22, Y+35	; 0x23
    1d90:	7c a1       	ldd	r23, Y+36	; 0x24
    1d92:	8d a1       	ldd	r24, Y+37	; 0x25
    1d94:	9e a1       	ldd	r25, Y+38	; 0x26
    1d96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d9a:	dc 01       	movw	r26, r24
    1d9c:	cb 01       	movw	r24, r22
    1d9e:	9a a3       	std	Y+34, r25	; 0x22
    1da0:	89 a3       	std	Y+33, r24	; 0x21
    1da2:	89 a1       	ldd	r24, Y+33	; 0x21
    1da4:	9a a1       	ldd	r25, Y+34	; 0x22
    1da6:	9e 8f       	std	Y+30, r25	; 0x1e
    1da8:	8d 8f       	std	Y+29, r24	; 0x1d
    1daa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1dac:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1dae:	01 97       	sbiw	r24, 0x01	; 1
    1db0:	f1 f7       	brne	.-4      	; 0x1dae <main+0x123a>
    1db2:	9e 8f       	std	Y+30, r25	; 0x1e
    1db4:	8d 8f       	std	Y+29, r24	; 0x1d
					_delay_ms(500);

					UART_data[0] = '4';
    1db6:	fe 01       	movw	r30, r28
    1db8:	ee 55       	subi	r30, 0x5E	; 94
    1dba:	ff 4f       	sbci	r31, 0xFF	; 255
    1dbc:	84 e3       	ldi	r24, 0x34	; 52
    1dbe:	80 83       	st	Z, r24
					UART_data[1] = '#';
    1dc0:	fe 01       	movw	r30, r28
    1dc2:	ee 55       	subi	r30, 0x5E	; 94
    1dc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc6:	83 e2       	ldi	r24, 0x23	; 35
    1dc8:	81 83       	std	Z+1, r24	; 0x01
					UART_data[2] = '\0';
    1dca:	fe 01       	movw	r30, r28
    1dcc:	ee 55       	subi	r30, 0x5E	; 94
    1dce:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd0:	12 82       	std	Z+2, r1	; 0x02
					UART_sendString(UART_data);
    1dd2:	ce 01       	movw	r24, r28
    1dd4:	8e 55       	subi	r24, 0x5E	; 94
    1dd6:	9f 4f       	sbci	r25, 0xFF	; 255
    1dd8:	0e 94 ce 20 	call	0x419c	; 0x419c <UART_sendString>

					Timer1_con.initial_value = 0;
    1ddc:	fe 01       	movw	r30, r28
    1dde:	e8 54       	subi	r30, 0x48	; 72
    1de0:	ff 4f       	sbci	r31, 0xFF	; 255
    1de2:	11 82       	std	Z+1, r1	; 0x01
    1de4:	10 82       	st	Z, r1
					Timer1_con.compare_value = 58594;
    1de6:	fe 01       	movw	r30, r28
    1de8:	e8 54       	subi	r30, 0x48	; 72
    1dea:	ff 4f       	sbci	r31, 0xFF	; 255
    1dec:	82 ee       	ldi	r24, 0xE2	; 226
    1dee:	94 ee       	ldi	r25, 0xE4	; 228
    1df0:	93 83       	std	Z+3, r25	; 0x03
    1df2:	82 83       	std	Z+2, r24	; 0x02
					Timer1_con.prescaler = PSC_1024;
    1df4:	fe 01       	movw	r30, r28
    1df6:	e8 54       	subi	r30, 0x48	; 72
    1df8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfa:	85 e0       	ldi	r24, 0x05	; 5
    1dfc:	84 83       	std	Z+4, r24	; 0x04
					Timer1_con.mode = CTC;
    1dfe:	fe 01       	movw	r30, r28
    1e00:	e8 54       	subi	r30, 0x48	; 72
    1e02:	ff 4f       	sbci	r31, 0xFF	; 255
    1e04:	81 e0       	ldi	r24, 0x01	; 1
    1e06:	85 83       	std	Z+5, r24	; 0x05
					Timer1_init(&Timer1_con);
    1e08:	ce 01       	movw	r24, r28
    1e0a:	88 54       	subi	r24, 0x48	; 72
    1e0c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e0e:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <Timer1_init>

					LCD_clearScreen();
    1e12:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <LCD_clearScreen>
					LCD_moveCursor(0,0);
    1e16:	80 e0       	ldi	r24, 0x00	; 0
    1e18:	60 e0       	ldi	r22, 0x00	; 0
    1e1a:	0e 94 f4 1e 	call	0x3de8	; 0x3de8 <LCD_moveCursor>
					LCD_displayString("  E R R O R !!  ");
    1e1e:	82 ef       	ldi	r24, 0xF2	; 242
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <LCD_displayString>
					uint8 c = 60;
    1e26:	fe 01       	movw	r30, r28
    1e28:	e5 56       	subi	r30, 0x65	; 101
    1e2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2c:	8c e3       	ldi	r24, 0x3C	; 60
    1e2e:	80 83       	st	Z, r24
    1e30:	94 c0       	rjmp	.+296    	; 0x1f5a <main+0x13e6>
					while(g_clbk <4){
						LCD_moveCursor(1,7);
    1e32:	81 e0       	ldi	r24, 0x01	; 1
    1e34:	67 e0       	ldi	r22, 0x07	; 7
    1e36:	0e 94 f4 1e 	call	0x3de8	; 0x3de8 <LCD_moveCursor>
						LCD_intgerToString(c);
    1e3a:	fe 01       	movw	r30, r28
    1e3c:	e5 56       	subi	r30, 0x65	; 101
    1e3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e40:	80 81       	ld	r24, Z
    1e42:	88 2f       	mov	r24, r24
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	0e 94 4f 1f 	call	0x3e9e	; 0x3e9e <LCD_intgerToString>
						if (c<10)
    1e4a:	fe 01       	movw	r30, r28
    1e4c:	e5 56       	subi	r30, 0x65	; 101
    1e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e50:	80 81       	ld	r24, Z
    1e52:	8a 30       	cpi	r24, 0x0A	; 10
    1e54:	38 f4       	brcc	.+14     	; 0x1e64 <main+0x12f0>
						{
							LCD_moveCursor(1,8);
    1e56:	81 e0       	ldi	r24, 0x01	; 1
    1e58:	68 e0       	ldi	r22, 0x08	; 8
    1e5a:	0e 94 f4 1e 	call	0x3de8	; 0x3de8 <LCD_moveCursor>
							LCD_displayCharacter(' ');
    1e5e:	80 e2       	ldi	r24, 0x20	; 32
    1e60:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <LCD_displayCharacter>
    1e64:	80 e0       	ldi	r24, 0x00	; 0
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	aa e7       	ldi	r26, 0x7A	; 122
    1e6a:	b4 e4       	ldi	r27, 0x44	; 68
    1e6c:	89 8f       	std	Y+25, r24	; 0x19
    1e6e:	9a 8f       	std	Y+26, r25	; 0x1a
    1e70:	ab 8f       	std	Y+27, r26	; 0x1b
    1e72:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e74:	69 8d       	ldd	r22, Y+25	; 0x19
    1e76:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e78:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e7a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e7c:	20 e0       	ldi	r18, 0x00	; 0
    1e7e:	30 e0       	ldi	r19, 0x00	; 0
    1e80:	4a ef       	ldi	r20, 0xFA	; 250
    1e82:	54 e4       	ldi	r21, 0x44	; 68
    1e84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e88:	dc 01       	movw	r26, r24
    1e8a:	cb 01       	movw	r24, r22
    1e8c:	8d 8b       	std	Y+21, r24	; 0x15
    1e8e:	9e 8b       	std	Y+22, r25	; 0x16
    1e90:	af 8b       	std	Y+23, r26	; 0x17
    1e92:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e94:	6d 89       	ldd	r22, Y+21	; 0x15
    1e96:	7e 89       	ldd	r23, Y+22	; 0x16
    1e98:	8f 89       	ldd	r24, Y+23	; 0x17
    1e9a:	98 8d       	ldd	r25, Y+24	; 0x18
    1e9c:	20 e0       	ldi	r18, 0x00	; 0
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
    1ea0:	40 e8       	ldi	r20, 0x80	; 128
    1ea2:	5f e3       	ldi	r21, 0x3F	; 63
    1ea4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ea8:	88 23       	and	r24, r24
    1eaa:	2c f4       	brge	.+10     	; 0x1eb6 <main+0x1342>
		__ticks = 1;
    1eac:	81 e0       	ldi	r24, 0x01	; 1
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	9c 8b       	std	Y+20, r25	; 0x14
    1eb2:	8b 8b       	std	Y+19, r24	; 0x13
    1eb4:	3f c0       	rjmp	.+126    	; 0x1f34 <main+0x13c0>
	else if (__tmp > 65535)
    1eb6:	6d 89       	ldd	r22, Y+21	; 0x15
    1eb8:	7e 89       	ldd	r23, Y+22	; 0x16
    1eba:	8f 89       	ldd	r24, Y+23	; 0x17
    1ebc:	98 8d       	ldd	r25, Y+24	; 0x18
    1ebe:	20 e0       	ldi	r18, 0x00	; 0
    1ec0:	3f ef       	ldi	r19, 0xFF	; 255
    1ec2:	4f e7       	ldi	r20, 0x7F	; 127
    1ec4:	57 e4       	ldi	r21, 0x47	; 71
    1ec6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1eca:	18 16       	cp	r1, r24
    1ecc:	4c f5       	brge	.+82     	; 0x1f20 <main+0x13ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ece:	69 8d       	ldd	r22, Y+25	; 0x19
    1ed0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ed2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ed4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ed6:	20 e0       	ldi	r18, 0x00	; 0
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	40 e2       	ldi	r20, 0x20	; 32
    1edc:	51 e4       	ldi	r21, 0x41	; 65
    1ede:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ee2:	dc 01       	movw	r26, r24
    1ee4:	cb 01       	movw	r24, r22
    1ee6:	bc 01       	movw	r22, r24
    1ee8:	cd 01       	movw	r24, r26
    1eea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eee:	dc 01       	movw	r26, r24
    1ef0:	cb 01       	movw	r24, r22
    1ef2:	9c 8b       	std	Y+20, r25	; 0x14
    1ef4:	8b 8b       	std	Y+19, r24	; 0x13
    1ef6:	0f c0       	rjmp	.+30     	; 0x1f16 <main+0x13a2>
    1ef8:	88 ec       	ldi	r24, 0xC8	; 200
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	9a 8b       	std	Y+18, r25	; 0x12
    1efe:	89 8b       	std	Y+17, r24	; 0x11
    1f00:	89 89       	ldd	r24, Y+17	; 0x11
    1f02:	9a 89       	ldd	r25, Y+18	; 0x12
    1f04:	01 97       	sbiw	r24, 0x01	; 1
    1f06:	f1 f7       	brne	.-4      	; 0x1f04 <main+0x1390>
    1f08:	9a 8b       	std	Y+18, r25	; 0x12
    1f0a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f0c:	8b 89       	ldd	r24, Y+19	; 0x13
    1f0e:	9c 89       	ldd	r25, Y+20	; 0x14
    1f10:	01 97       	sbiw	r24, 0x01	; 1
    1f12:	9c 8b       	std	Y+20, r25	; 0x14
    1f14:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f16:	8b 89       	ldd	r24, Y+19	; 0x13
    1f18:	9c 89       	ldd	r25, Y+20	; 0x14
    1f1a:	00 97       	sbiw	r24, 0x00	; 0
    1f1c:	69 f7       	brne	.-38     	; 0x1ef8 <main+0x1384>
    1f1e:	14 c0       	rjmp	.+40     	; 0x1f48 <main+0x13d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f20:	6d 89       	ldd	r22, Y+21	; 0x15
    1f22:	7e 89       	ldd	r23, Y+22	; 0x16
    1f24:	8f 89       	ldd	r24, Y+23	; 0x17
    1f26:	98 8d       	ldd	r25, Y+24	; 0x18
    1f28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f2c:	dc 01       	movw	r26, r24
    1f2e:	cb 01       	movw	r24, r22
    1f30:	9c 8b       	std	Y+20, r25	; 0x14
    1f32:	8b 8b       	std	Y+19, r24	; 0x13
    1f34:	8b 89       	ldd	r24, Y+19	; 0x13
    1f36:	9c 89       	ldd	r25, Y+20	; 0x14
    1f38:	98 8b       	std	Y+16, r25	; 0x10
    1f3a:	8f 87       	std	Y+15, r24	; 0x0f
    1f3c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f3e:	98 89       	ldd	r25, Y+16	; 0x10
    1f40:	01 97       	sbiw	r24, 0x01	; 1
    1f42:	f1 f7       	brne	.-4      	; 0x1f40 <main+0x13cc>
    1f44:	98 8b       	std	Y+16, r25	; 0x10
    1f46:	8f 87       	std	Y+15, r24	; 0x0f
						}
						_delay_ms(1000);
						c--;
    1f48:	de 01       	movw	r26, r28
    1f4a:	a5 56       	subi	r26, 0x65	; 101
    1f4c:	bf 4f       	sbci	r27, 0xFF	; 255
    1f4e:	fe 01       	movw	r30, r28
    1f50:	e5 56       	subi	r30, 0x65	; 101
    1f52:	ff 4f       	sbci	r31, 0xFF	; 255
    1f54:	80 81       	ld	r24, Z
    1f56:	81 50       	subi	r24, 0x01	; 1
    1f58:	8c 93       	st	X, r24

					LCD_clearScreen();
					LCD_moveCursor(0,0);
					LCD_displayString("  E R R O R !!  ");
					uint8 c = 60;
					while(g_clbk <4){
    1f5a:	80 91 31 01 	lds	r24, 0x0131
    1f5e:	84 30       	cpi	r24, 0x04	; 4
    1f60:	08 f4       	brcc	.+2      	; 0x1f64 <main+0x13f0>
    1f62:	67 cf       	rjmp	.-306    	; 0x1e32 <main+0x12be>
						}
						_delay_ms(1000);
						c--;
					}

					Timer1_deInit();
    1f64:	0e 94 c8 1f 	call	0x3f90	; 0x3f90 <Timer1_deInit>

					g_clbk=0;
    1f68:	10 92 31 01 	sts	0x0131, r1

					case_select = 1;
    1f6c:	fe 01       	movw	r30, r28
    1f6e:	e2 56       	subi	r30, 0x62	; 98
    1f70:	ff 4f       	sbci	r31, 0xFF	; 255
    1f72:	81 e0       	ldi	r24, 0x01	; 1
    1f74:	80 83       	st	Z, r24
    1f76:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <main+0x106>

				}

				else
				{
					LCD_clearScreen();
    1f7a:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <LCD_clearScreen>
					LCD_moveCursor(0,0);
    1f7e:	80 e0       	ldi	r24, 0x00	; 0
    1f80:	60 e0       	ldi	r22, 0x00	; 0
    1f82:	0e 94 f4 1e 	call	0x3de8	; 0x3de8 <LCD_moveCursor>
					LCD_displayString(" WRONG PASS !!");
    1f86:	83 e0       	ldi	r24, 0x03	; 3
    1f88:	91 e0       	ldi	r25, 0x01	; 1
    1f8a:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <LCD_displayString>
					LCD_moveCursor(1,0);
    1f8e:	81 e0       	ldi	r24, 0x01	; 1
    1f90:	60 e0       	ldi	r22, 0x00	; 0
    1f92:	0e 94 f4 1e 	call	0x3de8	; 0x3de8 <LCD_moveCursor>
					LCD_displayString("  TRY AGAIN  ");
    1f96:	82 e1       	ldi	r24, 0x12	; 18
    1f98:	91 e0       	ldi	r25, 0x01	; 1
    1f9a:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <LCD_displayString>
    1f9e:	80 e0       	ldi	r24, 0x00	; 0
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	aa ef       	ldi	r26, 0xFA	; 250
    1fa4:	b3 e4       	ldi	r27, 0x43	; 67
    1fa6:	8b 87       	std	Y+11, r24	; 0x0b
    1fa8:	9c 87       	std	Y+12, r25	; 0x0c
    1faa:	ad 87       	std	Y+13, r26	; 0x0d
    1fac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fae:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fb0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fb2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fb4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fb6:	20 e0       	ldi	r18, 0x00	; 0
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	4a ef       	ldi	r20, 0xFA	; 250
    1fbc:	54 e4       	ldi	r21, 0x44	; 68
    1fbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fc2:	dc 01       	movw	r26, r24
    1fc4:	cb 01       	movw	r24, r22
    1fc6:	8f 83       	std	Y+7, r24	; 0x07
    1fc8:	98 87       	std	Y+8, r25	; 0x08
    1fca:	a9 87       	std	Y+9, r26	; 0x09
    1fcc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fce:	6f 81       	ldd	r22, Y+7	; 0x07
    1fd0:	78 85       	ldd	r23, Y+8	; 0x08
    1fd2:	89 85       	ldd	r24, Y+9	; 0x09
    1fd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fd6:	20 e0       	ldi	r18, 0x00	; 0
    1fd8:	30 e0       	ldi	r19, 0x00	; 0
    1fda:	40 e8       	ldi	r20, 0x80	; 128
    1fdc:	5f e3       	ldi	r21, 0x3F	; 63
    1fde:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fe2:	88 23       	and	r24, r24
    1fe4:	2c f4       	brge	.+10     	; 0x1ff0 <main+0x147c>
		__ticks = 1;
    1fe6:	81 e0       	ldi	r24, 0x01	; 1
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	9e 83       	std	Y+6, r25	; 0x06
    1fec:	8d 83       	std	Y+5, r24	; 0x05
    1fee:	3f c0       	rjmp	.+126    	; 0x206e <main+0x14fa>
	else if (__tmp > 65535)
    1ff0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ff2:	78 85       	ldd	r23, Y+8	; 0x08
    1ff4:	89 85       	ldd	r24, Y+9	; 0x09
    1ff6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ff8:	20 e0       	ldi	r18, 0x00	; 0
    1ffa:	3f ef       	ldi	r19, 0xFF	; 255
    1ffc:	4f e7       	ldi	r20, 0x7F	; 127
    1ffe:	57 e4       	ldi	r21, 0x47	; 71
    2000:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2004:	18 16       	cp	r1, r24
    2006:	4c f5       	brge	.+82     	; 0x205a <main+0x14e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2008:	6b 85       	ldd	r22, Y+11	; 0x0b
    200a:	7c 85       	ldd	r23, Y+12	; 0x0c
    200c:	8d 85       	ldd	r24, Y+13	; 0x0d
    200e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2010:	20 e0       	ldi	r18, 0x00	; 0
    2012:	30 e0       	ldi	r19, 0x00	; 0
    2014:	40 e2       	ldi	r20, 0x20	; 32
    2016:	51 e4       	ldi	r21, 0x41	; 65
    2018:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    201c:	dc 01       	movw	r26, r24
    201e:	cb 01       	movw	r24, r22
    2020:	bc 01       	movw	r22, r24
    2022:	cd 01       	movw	r24, r26
    2024:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2028:	dc 01       	movw	r26, r24
    202a:	cb 01       	movw	r24, r22
    202c:	9e 83       	std	Y+6, r25	; 0x06
    202e:	8d 83       	std	Y+5, r24	; 0x05
    2030:	0f c0       	rjmp	.+30     	; 0x2050 <main+0x14dc>
    2032:	88 ec       	ldi	r24, 0xC8	; 200
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	9c 83       	std	Y+4, r25	; 0x04
    2038:	8b 83       	std	Y+3, r24	; 0x03
    203a:	8b 81       	ldd	r24, Y+3	; 0x03
    203c:	9c 81       	ldd	r25, Y+4	; 0x04
    203e:	01 97       	sbiw	r24, 0x01	; 1
    2040:	f1 f7       	brne	.-4      	; 0x203e <main+0x14ca>
    2042:	9c 83       	std	Y+4, r25	; 0x04
    2044:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2046:	8d 81       	ldd	r24, Y+5	; 0x05
    2048:	9e 81       	ldd	r25, Y+6	; 0x06
    204a:	01 97       	sbiw	r24, 0x01	; 1
    204c:	9e 83       	std	Y+6, r25	; 0x06
    204e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2050:	8d 81       	ldd	r24, Y+5	; 0x05
    2052:	9e 81       	ldd	r25, Y+6	; 0x06
    2054:	00 97       	sbiw	r24, 0x00	; 0
    2056:	69 f7       	brne	.-38     	; 0x2032 <main+0x14be>
    2058:	14 c0       	rjmp	.+40     	; 0x2082 <main+0x150e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    205a:	6f 81       	ldd	r22, Y+7	; 0x07
    205c:	78 85       	ldd	r23, Y+8	; 0x08
    205e:	89 85       	ldd	r24, Y+9	; 0x09
    2060:	9a 85       	ldd	r25, Y+10	; 0x0a
    2062:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2066:	dc 01       	movw	r26, r24
    2068:	cb 01       	movw	r24, r22
    206a:	9e 83       	std	Y+6, r25	; 0x06
    206c:	8d 83       	std	Y+5, r24	; 0x05
    206e:	8d 81       	ldd	r24, Y+5	; 0x05
    2070:	9e 81       	ldd	r25, Y+6	; 0x06
    2072:	9a 83       	std	Y+2, r25	; 0x02
    2074:	89 83       	std	Y+1, r24	; 0x01
    2076:	89 81       	ldd	r24, Y+1	; 0x01
    2078:	9a 81       	ldd	r25, Y+2	; 0x02
    207a:	01 97       	sbiw	r24, 0x01	; 1
    207c:	f1 f7       	brne	.-4      	; 0x207a <main+0x1506>
    207e:	9a 83       	std	Y+2, r25	; 0x02
    2080:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(500);
					case_select = 2;
    2082:	fe 01       	movw	r30, r28
    2084:	e2 56       	subi	r30, 0x62	; 98
    2086:	ff 4f       	sbci	r31, 0xFF	; 255
    2088:	82 e0       	ldi	r24, 0x02	; 2
    208a:	80 83       	st	Z, r24
    208c:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <main+0x106>

00002090 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    2090:	df 93       	push	r29
    2092:	cf 93       	push	r28
    2094:	00 d0       	rcall	.+0      	; 0x2096 <GPIO_setupPinDirection+0x6>
    2096:	00 d0       	rcall	.+0      	; 0x2098 <GPIO_setupPinDirection+0x8>
    2098:	0f 92       	push	r0
    209a:	cd b7       	in	r28, 0x3d	; 61
    209c:	de b7       	in	r29, 0x3e	; 62
    209e:	89 83       	std	Y+1, r24	; 0x01
    20a0:	6a 83       	std	Y+2, r22	; 0x02
    20a2:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    20a4:	8a 81       	ldd	r24, Y+2	; 0x02
    20a6:	88 30       	cpi	r24, 0x08	; 8
    20a8:	08 f0       	brcs	.+2      	; 0x20ac <GPIO_setupPinDirection+0x1c>
    20aa:	d5 c0       	rjmp	.+426    	; 0x2256 <GPIO_setupPinDirection+0x1c6>
    20ac:	89 81       	ldd	r24, Y+1	; 0x01
    20ae:	84 30       	cpi	r24, 0x04	; 4
    20b0:	08 f0       	brcs	.+2      	; 0x20b4 <GPIO_setupPinDirection+0x24>
    20b2:	d1 c0       	rjmp	.+418    	; 0x2256 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    20b4:	89 81       	ldd	r24, Y+1	; 0x01
    20b6:	28 2f       	mov	r18, r24
    20b8:	30 e0       	ldi	r19, 0x00	; 0
    20ba:	3d 83       	std	Y+5, r19	; 0x05
    20bc:	2c 83       	std	Y+4, r18	; 0x04
    20be:	8c 81       	ldd	r24, Y+4	; 0x04
    20c0:	9d 81       	ldd	r25, Y+5	; 0x05
    20c2:	81 30       	cpi	r24, 0x01	; 1
    20c4:	91 05       	cpc	r25, r1
    20c6:	09 f4       	brne	.+2      	; 0x20ca <GPIO_setupPinDirection+0x3a>
    20c8:	43 c0       	rjmp	.+134    	; 0x2150 <GPIO_setupPinDirection+0xc0>
    20ca:	2c 81       	ldd	r18, Y+4	; 0x04
    20cc:	3d 81       	ldd	r19, Y+5	; 0x05
    20ce:	22 30       	cpi	r18, 0x02	; 2
    20d0:	31 05       	cpc	r19, r1
    20d2:	2c f4       	brge	.+10     	; 0x20de <GPIO_setupPinDirection+0x4e>
    20d4:	8c 81       	ldd	r24, Y+4	; 0x04
    20d6:	9d 81       	ldd	r25, Y+5	; 0x05
    20d8:	00 97       	sbiw	r24, 0x00	; 0
    20da:	71 f0       	breq	.+28     	; 0x20f8 <GPIO_setupPinDirection+0x68>
    20dc:	bc c0       	rjmp	.+376    	; 0x2256 <GPIO_setupPinDirection+0x1c6>
    20de:	2c 81       	ldd	r18, Y+4	; 0x04
    20e0:	3d 81       	ldd	r19, Y+5	; 0x05
    20e2:	22 30       	cpi	r18, 0x02	; 2
    20e4:	31 05       	cpc	r19, r1
    20e6:	09 f4       	brne	.+2      	; 0x20ea <GPIO_setupPinDirection+0x5a>
    20e8:	5f c0       	rjmp	.+190    	; 0x21a8 <GPIO_setupPinDirection+0x118>
    20ea:	8c 81       	ldd	r24, Y+4	; 0x04
    20ec:	9d 81       	ldd	r25, Y+5	; 0x05
    20ee:	83 30       	cpi	r24, 0x03	; 3
    20f0:	91 05       	cpc	r25, r1
    20f2:	09 f4       	brne	.+2      	; 0x20f6 <GPIO_setupPinDirection+0x66>
    20f4:	85 c0       	rjmp	.+266    	; 0x2200 <GPIO_setupPinDirection+0x170>
    20f6:	af c0       	rjmp	.+350    	; 0x2256 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    20f8:	8b 81       	ldd	r24, Y+3	; 0x03
    20fa:	81 30       	cpi	r24, 0x01	; 1
    20fc:	a1 f4       	brne	.+40     	; 0x2126 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    20fe:	aa e3       	ldi	r26, 0x3A	; 58
    2100:	b0 e0       	ldi	r27, 0x00	; 0
    2102:	ea e3       	ldi	r30, 0x3A	; 58
    2104:	f0 e0       	ldi	r31, 0x00	; 0
    2106:	80 81       	ld	r24, Z
    2108:	48 2f       	mov	r20, r24
    210a:	8a 81       	ldd	r24, Y+2	; 0x02
    210c:	28 2f       	mov	r18, r24
    210e:	30 e0       	ldi	r19, 0x00	; 0
    2110:	81 e0       	ldi	r24, 0x01	; 1
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	02 2e       	mov	r0, r18
    2116:	02 c0       	rjmp	.+4      	; 0x211c <GPIO_setupPinDirection+0x8c>
    2118:	88 0f       	add	r24, r24
    211a:	99 1f       	adc	r25, r25
    211c:	0a 94       	dec	r0
    211e:	e2 f7       	brpl	.-8      	; 0x2118 <GPIO_setupPinDirection+0x88>
    2120:	84 2b       	or	r24, r20
    2122:	8c 93       	st	X, r24
    2124:	98 c0       	rjmp	.+304    	; 0x2256 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    2126:	aa e3       	ldi	r26, 0x3A	; 58
    2128:	b0 e0       	ldi	r27, 0x00	; 0
    212a:	ea e3       	ldi	r30, 0x3A	; 58
    212c:	f0 e0       	ldi	r31, 0x00	; 0
    212e:	80 81       	ld	r24, Z
    2130:	48 2f       	mov	r20, r24
    2132:	8a 81       	ldd	r24, Y+2	; 0x02
    2134:	28 2f       	mov	r18, r24
    2136:	30 e0       	ldi	r19, 0x00	; 0
    2138:	81 e0       	ldi	r24, 0x01	; 1
    213a:	90 e0       	ldi	r25, 0x00	; 0
    213c:	02 2e       	mov	r0, r18
    213e:	02 c0       	rjmp	.+4      	; 0x2144 <GPIO_setupPinDirection+0xb4>
    2140:	88 0f       	add	r24, r24
    2142:	99 1f       	adc	r25, r25
    2144:	0a 94       	dec	r0
    2146:	e2 f7       	brpl	.-8      	; 0x2140 <GPIO_setupPinDirection+0xb0>
    2148:	80 95       	com	r24
    214a:	84 23       	and	r24, r20
    214c:	8c 93       	st	X, r24
    214e:	83 c0       	rjmp	.+262    	; 0x2256 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    2150:	8b 81       	ldd	r24, Y+3	; 0x03
    2152:	81 30       	cpi	r24, 0x01	; 1
    2154:	a1 f4       	brne	.+40     	; 0x217e <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    2156:	a7 e3       	ldi	r26, 0x37	; 55
    2158:	b0 e0       	ldi	r27, 0x00	; 0
    215a:	e7 e3       	ldi	r30, 0x37	; 55
    215c:	f0 e0       	ldi	r31, 0x00	; 0
    215e:	80 81       	ld	r24, Z
    2160:	48 2f       	mov	r20, r24
    2162:	8a 81       	ldd	r24, Y+2	; 0x02
    2164:	28 2f       	mov	r18, r24
    2166:	30 e0       	ldi	r19, 0x00	; 0
    2168:	81 e0       	ldi	r24, 0x01	; 1
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	02 2e       	mov	r0, r18
    216e:	02 c0       	rjmp	.+4      	; 0x2174 <GPIO_setupPinDirection+0xe4>
    2170:	88 0f       	add	r24, r24
    2172:	99 1f       	adc	r25, r25
    2174:	0a 94       	dec	r0
    2176:	e2 f7       	brpl	.-8      	; 0x2170 <GPIO_setupPinDirection+0xe0>
    2178:	84 2b       	or	r24, r20
    217a:	8c 93       	st	X, r24
    217c:	6c c0       	rjmp	.+216    	; 0x2256 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    217e:	a7 e3       	ldi	r26, 0x37	; 55
    2180:	b0 e0       	ldi	r27, 0x00	; 0
    2182:	e7 e3       	ldi	r30, 0x37	; 55
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	80 81       	ld	r24, Z
    2188:	48 2f       	mov	r20, r24
    218a:	8a 81       	ldd	r24, Y+2	; 0x02
    218c:	28 2f       	mov	r18, r24
    218e:	30 e0       	ldi	r19, 0x00	; 0
    2190:	81 e0       	ldi	r24, 0x01	; 1
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	02 2e       	mov	r0, r18
    2196:	02 c0       	rjmp	.+4      	; 0x219c <GPIO_setupPinDirection+0x10c>
    2198:	88 0f       	add	r24, r24
    219a:	99 1f       	adc	r25, r25
    219c:	0a 94       	dec	r0
    219e:	e2 f7       	brpl	.-8      	; 0x2198 <GPIO_setupPinDirection+0x108>
    21a0:	80 95       	com	r24
    21a2:	84 23       	and	r24, r20
    21a4:	8c 93       	st	X, r24
    21a6:	57 c0       	rjmp	.+174    	; 0x2256 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    21a8:	8b 81       	ldd	r24, Y+3	; 0x03
    21aa:	81 30       	cpi	r24, 0x01	; 1
    21ac:	a1 f4       	brne	.+40     	; 0x21d6 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    21ae:	a4 e3       	ldi	r26, 0x34	; 52
    21b0:	b0 e0       	ldi	r27, 0x00	; 0
    21b2:	e4 e3       	ldi	r30, 0x34	; 52
    21b4:	f0 e0       	ldi	r31, 0x00	; 0
    21b6:	80 81       	ld	r24, Z
    21b8:	48 2f       	mov	r20, r24
    21ba:	8a 81       	ldd	r24, Y+2	; 0x02
    21bc:	28 2f       	mov	r18, r24
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	81 e0       	ldi	r24, 0x01	; 1
    21c2:	90 e0       	ldi	r25, 0x00	; 0
    21c4:	02 2e       	mov	r0, r18
    21c6:	02 c0       	rjmp	.+4      	; 0x21cc <GPIO_setupPinDirection+0x13c>
    21c8:	88 0f       	add	r24, r24
    21ca:	99 1f       	adc	r25, r25
    21cc:	0a 94       	dec	r0
    21ce:	e2 f7       	brpl	.-8      	; 0x21c8 <GPIO_setupPinDirection+0x138>
    21d0:	84 2b       	or	r24, r20
    21d2:	8c 93       	st	X, r24
    21d4:	40 c0       	rjmp	.+128    	; 0x2256 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    21d6:	a4 e3       	ldi	r26, 0x34	; 52
    21d8:	b0 e0       	ldi	r27, 0x00	; 0
    21da:	e4 e3       	ldi	r30, 0x34	; 52
    21dc:	f0 e0       	ldi	r31, 0x00	; 0
    21de:	80 81       	ld	r24, Z
    21e0:	48 2f       	mov	r20, r24
    21e2:	8a 81       	ldd	r24, Y+2	; 0x02
    21e4:	28 2f       	mov	r18, r24
    21e6:	30 e0       	ldi	r19, 0x00	; 0
    21e8:	81 e0       	ldi	r24, 0x01	; 1
    21ea:	90 e0       	ldi	r25, 0x00	; 0
    21ec:	02 2e       	mov	r0, r18
    21ee:	02 c0       	rjmp	.+4      	; 0x21f4 <GPIO_setupPinDirection+0x164>
    21f0:	88 0f       	add	r24, r24
    21f2:	99 1f       	adc	r25, r25
    21f4:	0a 94       	dec	r0
    21f6:	e2 f7       	brpl	.-8      	; 0x21f0 <GPIO_setupPinDirection+0x160>
    21f8:	80 95       	com	r24
    21fa:	84 23       	and	r24, r20
    21fc:	8c 93       	st	X, r24
    21fe:	2b c0       	rjmp	.+86     	; 0x2256 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    2200:	8b 81       	ldd	r24, Y+3	; 0x03
    2202:	81 30       	cpi	r24, 0x01	; 1
    2204:	a1 f4       	brne	.+40     	; 0x222e <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    2206:	a1 e3       	ldi	r26, 0x31	; 49
    2208:	b0 e0       	ldi	r27, 0x00	; 0
    220a:	e1 e3       	ldi	r30, 0x31	; 49
    220c:	f0 e0       	ldi	r31, 0x00	; 0
    220e:	80 81       	ld	r24, Z
    2210:	48 2f       	mov	r20, r24
    2212:	8a 81       	ldd	r24, Y+2	; 0x02
    2214:	28 2f       	mov	r18, r24
    2216:	30 e0       	ldi	r19, 0x00	; 0
    2218:	81 e0       	ldi	r24, 0x01	; 1
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	02 2e       	mov	r0, r18
    221e:	02 c0       	rjmp	.+4      	; 0x2224 <GPIO_setupPinDirection+0x194>
    2220:	88 0f       	add	r24, r24
    2222:	99 1f       	adc	r25, r25
    2224:	0a 94       	dec	r0
    2226:	e2 f7       	brpl	.-8      	; 0x2220 <GPIO_setupPinDirection+0x190>
    2228:	84 2b       	or	r24, r20
    222a:	8c 93       	st	X, r24
    222c:	14 c0       	rjmp	.+40     	; 0x2256 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    222e:	a1 e3       	ldi	r26, 0x31	; 49
    2230:	b0 e0       	ldi	r27, 0x00	; 0
    2232:	e1 e3       	ldi	r30, 0x31	; 49
    2234:	f0 e0       	ldi	r31, 0x00	; 0
    2236:	80 81       	ld	r24, Z
    2238:	48 2f       	mov	r20, r24
    223a:	8a 81       	ldd	r24, Y+2	; 0x02
    223c:	28 2f       	mov	r18, r24
    223e:	30 e0       	ldi	r19, 0x00	; 0
    2240:	81 e0       	ldi	r24, 0x01	; 1
    2242:	90 e0       	ldi	r25, 0x00	; 0
    2244:	02 2e       	mov	r0, r18
    2246:	02 c0       	rjmp	.+4      	; 0x224c <GPIO_setupPinDirection+0x1bc>
    2248:	88 0f       	add	r24, r24
    224a:	99 1f       	adc	r25, r25
    224c:	0a 94       	dec	r0
    224e:	e2 f7       	brpl	.-8      	; 0x2248 <GPIO_setupPinDirection+0x1b8>
    2250:	80 95       	com	r24
    2252:	84 23       	and	r24, r20
    2254:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2256:	0f 90       	pop	r0
    2258:	0f 90       	pop	r0
    225a:	0f 90       	pop	r0
    225c:	0f 90       	pop	r0
    225e:	0f 90       	pop	r0
    2260:	cf 91       	pop	r28
    2262:	df 91       	pop	r29
    2264:	08 95       	ret

00002266 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    2266:	df 93       	push	r29
    2268:	cf 93       	push	r28
    226a:	00 d0       	rcall	.+0      	; 0x226c <GPIO_writePin+0x6>
    226c:	00 d0       	rcall	.+0      	; 0x226e <GPIO_writePin+0x8>
    226e:	0f 92       	push	r0
    2270:	cd b7       	in	r28, 0x3d	; 61
    2272:	de b7       	in	r29, 0x3e	; 62
    2274:	89 83       	std	Y+1, r24	; 0x01
    2276:	6a 83       	std	Y+2, r22	; 0x02
    2278:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    227a:	8a 81       	ldd	r24, Y+2	; 0x02
    227c:	88 30       	cpi	r24, 0x08	; 8
    227e:	08 f0       	brcs	.+2      	; 0x2282 <GPIO_writePin+0x1c>
    2280:	d5 c0       	rjmp	.+426    	; 0x242c <GPIO_writePin+0x1c6>
    2282:	89 81       	ldd	r24, Y+1	; 0x01
    2284:	84 30       	cpi	r24, 0x04	; 4
    2286:	08 f0       	brcs	.+2      	; 0x228a <GPIO_writePin+0x24>
    2288:	d1 c0       	rjmp	.+418    	; 0x242c <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    228a:	89 81       	ldd	r24, Y+1	; 0x01
    228c:	28 2f       	mov	r18, r24
    228e:	30 e0       	ldi	r19, 0x00	; 0
    2290:	3d 83       	std	Y+5, r19	; 0x05
    2292:	2c 83       	std	Y+4, r18	; 0x04
    2294:	8c 81       	ldd	r24, Y+4	; 0x04
    2296:	9d 81       	ldd	r25, Y+5	; 0x05
    2298:	81 30       	cpi	r24, 0x01	; 1
    229a:	91 05       	cpc	r25, r1
    229c:	09 f4       	brne	.+2      	; 0x22a0 <GPIO_writePin+0x3a>
    229e:	43 c0       	rjmp	.+134    	; 0x2326 <GPIO_writePin+0xc0>
    22a0:	2c 81       	ldd	r18, Y+4	; 0x04
    22a2:	3d 81       	ldd	r19, Y+5	; 0x05
    22a4:	22 30       	cpi	r18, 0x02	; 2
    22a6:	31 05       	cpc	r19, r1
    22a8:	2c f4       	brge	.+10     	; 0x22b4 <GPIO_writePin+0x4e>
    22aa:	8c 81       	ldd	r24, Y+4	; 0x04
    22ac:	9d 81       	ldd	r25, Y+5	; 0x05
    22ae:	00 97       	sbiw	r24, 0x00	; 0
    22b0:	71 f0       	breq	.+28     	; 0x22ce <GPIO_writePin+0x68>
    22b2:	bc c0       	rjmp	.+376    	; 0x242c <GPIO_writePin+0x1c6>
    22b4:	2c 81       	ldd	r18, Y+4	; 0x04
    22b6:	3d 81       	ldd	r19, Y+5	; 0x05
    22b8:	22 30       	cpi	r18, 0x02	; 2
    22ba:	31 05       	cpc	r19, r1
    22bc:	09 f4       	brne	.+2      	; 0x22c0 <GPIO_writePin+0x5a>
    22be:	5f c0       	rjmp	.+190    	; 0x237e <GPIO_writePin+0x118>
    22c0:	8c 81       	ldd	r24, Y+4	; 0x04
    22c2:	9d 81       	ldd	r25, Y+5	; 0x05
    22c4:	83 30       	cpi	r24, 0x03	; 3
    22c6:	91 05       	cpc	r25, r1
    22c8:	09 f4       	brne	.+2      	; 0x22cc <GPIO_writePin+0x66>
    22ca:	85 c0       	rjmp	.+266    	; 0x23d6 <GPIO_writePin+0x170>
    22cc:	af c0       	rjmp	.+350    	; 0x242c <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    22ce:	8b 81       	ldd	r24, Y+3	; 0x03
    22d0:	81 30       	cpi	r24, 0x01	; 1
    22d2:	a1 f4       	brne	.+40     	; 0x22fc <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    22d4:	ab e3       	ldi	r26, 0x3B	; 59
    22d6:	b0 e0       	ldi	r27, 0x00	; 0
    22d8:	eb e3       	ldi	r30, 0x3B	; 59
    22da:	f0 e0       	ldi	r31, 0x00	; 0
    22dc:	80 81       	ld	r24, Z
    22de:	48 2f       	mov	r20, r24
    22e0:	8a 81       	ldd	r24, Y+2	; 0x02
    22e2:	28 2f       	mov	r18, r24
    22e4:	30 e0       	ldi	r19, 0x00	; 0
    22e6:	81 e0       	ldi	r24, 0x01	; 1
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	02 2e       	mov	r0, r18
    22ec:	02 c0       	rjmp	.+4      	; 0x22f2 <GPIO_writePin+0x8c>
    22ee:	88 0f       	add	r24, r24
    22f0:	99 1f       	adc	r25, r25
    22f2:	0a 94       	dec	r0
    22f4:	e2 f7       	brpl	.-8      	; 0x22ee <GPIO_writePin+0x88>
    22f6:	84 2b       	or	r24, r20
    22f8:	8c 93       	st	X, r24
    22fa:	98 c0       	rjmp	.+304    	; 0x242c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    22fc:	ab e3       	ldi	r26, 0x3B	; 59
    22fe:	b0 e0       	ldi	r27, 0x00	; 0
    2300:	eb e3       	ldi	r30, 0x3B	; 59
    2302:	f0 e0       	ldi	r31, 0x00	; 0
    2304:	80 81       	ld	r24, Z
    2306:	48 2f       	mov	r20, r24
    2308:	8a 81       	ldd	r24, Y+2	; 0x02
    230a:	28 2f       	mov	r18, r24
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	81 e0       	ldi	r24, 0x01	; 1
    2310:	90 e0       	ldi	r25, 0x00	; 0
    2312:	02 2e       	mov	r0, r18
    2314:	02 c0       	rjmp	.+4      	; 0x231a <GPIO_writePin+0xb4>
    2316:	88 0f       	add	r24, r24
    2318:	99 1f       	adc	r25, r25
    231a:	0a 94       	dec	r0
    231c:	e2 f7       	brpl	.-8      	; 0x2316 <GPIO_writePin+0xb0>
    231e:	80 95       	com	r24
    2320:	84 23       	and	r24, r20
    2322:	8c 93       	st	X, r24
    2324:	83 c0       	rjmp	.+262    	; 0x242c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    2326:	8b 81       	ldd	r24, Y+3	; 0x03
    2328:	81 30       	cpi	r24, 0x01	; 1
    232a:	a1 f4       	brne	.+40     	; 0x2354 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    232c:	a8 e3       	ldi	r26, 0x38	; 56
    232e:	b0 e0       	ldi	r27, 0x00	; 0
    2330:	e8 e3       	ldi	r30, 0x38	; 56
    2332:	f0 e0       	ldi	r31, 0x00	; 0
    2334:	80 81       	ld	r24, Z
    2336:	48 2f       	mov	r20, r24
    2338:	8a 81       	ldd	r24, Y+2	; 0x02
    233a:	28 2f       	mov	r18, r24
    233c:	30 e0       	ldi	r19, 0x00	; 0
    233e:	81 e0       	ldi	r24, 0x01	; 1
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	02 2e       	mov	r0, r18
    2344:	02 c0       	rjmp	.+4      	; 0x234a <GPIO_writePin+0xe4>
    2346:	88 0f       	add	r24, r24
    2348:	99 1f       	adc	r25, r25
    234a:	0a 94       	dec	r0
    234c:	e2 f7       	brpl	.-8      	; 0x2346 <GPIO_writePin+0xe0>
    234e:	84 2b       	or	r24, r20
    2350:	8c 93       	st	X, r24
    2352:	6c c0       	rjmp	.+216    	; 0x242c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    2354:	a8 e3       	ldi	r26, 0x38	; 56
    2356:	b0 e0       	ldi	r27, 0x00	; 0
    2358:	e8 e3       	ldi	r30, 0x38	; 56
    235a:	f0 e0       	ldi	r31, 0x00	; 0
    235c:	80 81       	ld	r24, Z
    235e:	48 2f       	mov	r20, r24
    2360:	8a 81       	ldd	r24, Y+2	; 0x02
    2362:	28 2f       	mov	r18, r24
    2364:	30 e0       	ldi	r19, 0x00	; 0
    2366:	81 e0       	ldi	r24, 0x01	; 1
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	02 2e       	mov	r0, r18
    236c:	02 c0       	rjmp	.+4      	; 0x2372 <GPIO_writePin+0x10c>
    236e:	88 0f       	add	r24, r24
    2370:	99 1f       	adc	r25, r25
    2372:	0a 94       	dec	r0
    2374:	e2 f7       	brpl	.-8      	; 0x236e <GPIO_writePin+0x108>
    2376:	80 95       	com	r24
    2378:	84 23       	and	r24, r20
    237a:	8c 93       	st	X, r24
    237c:	57 c0       	rjmp	.+174    	; 0x242c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    237e:	8b 81       	ldd	r24, Y+3	; 0x03
    2380:	81 30       	cpi	r24, 0x01	; 1
    2382:	a1 f4       	brne	.+40     	; 0x23ac <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    2384:	a5 e3       	ldi	r26, 0x35	; 53
    2386:	b0 e0       	ldi	r27, 0x00	; 0
    2388:	e5 e3       	ldi	r30, 0x35	; 53
    238a:	f0 e0       	ldi	r31, 0x00	; 0
    238c:	80 81       	ld	r24, Z
    238e:	48 2f       	mov	r20, r24
    2390:	8a 81       	ldd	r24, Y+2	; 0x02
    2392:	28 2f       	mov	r18, r24
    2394:	30 e0       	ldi	r19, 0x00	; 0
    2396:	81 e0       	ldi	r24, 0x01	; 1
    2398:	90 e0       	ldi	r25, 0x00	; 0
    239a:	02 2e       	mov	r0, r18
    239c:	02 c0       	rjmp	.+4      	; 0x23a2 <GPIO_writePin+0x13c>
    239e:	88 0f       	add	r24, r24
    23a0:	99 1f       	adc	r25, r25
    23a2:	0a 94       	dec	r0
    23a4:	e2 f7       	brpl	.-8      	; 0x239e <GPIO_writePin+0x138>
    23a6:	84 2b       	or	r24, r20
    23a8:	8c 93       	st	X, r24
    23aa:	40 c0       	rjmp	.+128    	; 0x242c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    23ac:	a5 e3       	ldi	r26, 0x35	; 53
    23ae:	b0 e0       	ldi	r27, 0x00	; 0
    23b0:	e5 e3       	ldi	r30, 0x35	; 53
    23b2:	f0 e0       	ldi	r31, 0x00	; 0
    23b4:	80 81       	ld	r24, Z
    23b6:	48 2f       	mov	r20, r24
    23b8:	8a 81       	ldd	r24, Y+2	; 0x02
    23ba:	28 2f       	mov	r18, r24
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	81 e0       	ldi	r24, 0x01	; 1
    23c0:	90 e0       	ldi	r25, 0x00	; 0
    23c2:	02 2e       	mov	r0, r18
    23c4:	02 c0       	rjmp	.+4      	; 0x23ca <GPIO_writePin+0x164>
    23c6:	88 0f       	add	r24, r24
    23c8:	99 1f       	adc	r25, r25
    23ca:	0a 94       	dec	r0
    23cc:	e2 f7       	brpl	.-8      	; 0x23c6 <GPIO_writePin+0x160>
    23ce:	80 95       	com	r24
    23d0:	84 23       	and	r24, r20
    23d2:	8c 93       	st	X, r24
    23d4:	2b c0       	rjmp	.+86     	; 0x242c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    23d6:	8b 81       	ldd	r24, Y+3	; 0x03
    23d8:	81 30       	cpi	r24, 0x01	; 1
    23da:	a1 f4       	brne	.+40     	; 0x2404 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    23dc:	a2 e3       	ldi	r26, 0x32	; 50
    23de:	b0 e0       	ldi	r27, 0x00	; 0
    23e0:	e2 e3       	ldi	r30, 0x32	; 50
    23e2:	f0 e0       	ldi	r31, 0x00	; 0
    23e4:	80 81       	ld	r24, Z
    23e6:	48 2f       	mov	r20, r24
    23e8:	8a 81       	ldd	r24, Y+2	; 0x02
    23ea:	28 2f       	mov	r18, r24
    23ec:	30 e0       	ldi	r19, 0x00	; 0
    23ee:	81 e0       	ldi	r24, 0x01	; 1
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	02 2e       	mov	r0, r18
    23f4:	02 c0       	rjmp	.+4      	; 0x23fa <GPIO_writePin+0x194>
    23f6:	88 0f       	add	r24, r24
    23f8:	99 1f       	adc	r25, r25
    23fa:	0a 94       	dec	r0
    23fc:	e2 f7       	brpl	.-8      	; 0x23f6 <GPIO_writePin+0x190>
    23fe:	84 2b       	or	r24, r20
    2400:	8c 93       	st	X, r24
    2402:	14 c0       	rjmp	.+40     	; 0x242c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    2404:	a2 e3       	ldi	r26, 0x32	; 50
    2406:	b0 e0       	ldi	r27, 0x00	; 0
    2408:	e2 e3       	ldi	r30, 0x32	; 50
    240a:	f0 e0       	ldi	r31, 0x00	; 0
    240c:	80 81       	ld	r24, Z
    240e:	48 2f       	mov	r20, r24
    2410:	8a 81       	ldd	r24, Y+2	; 0x02
    2412:	28 2f       	mov	r18, r24
    2414:	30 e0       	ldi	r19, 0x00	; 0
    2416:	81 e0       	ldi	r24, 0x01	; 1
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	02 2e       	mov	r0, r18
    241c:	02 c0       	rjmp	.+4      	; 0x2422 <GPIO_writePin+0x1bc>
    241e:	88 0f       	add	r24, r24
    2420:	99 1f       	adc	r25, r25
    2422:	0a 94       	dec	r0
    2424:	e2 f7       	brpl	.-8      	; 0x241e <GPIO_writePin+0x1b8>
    2426:	80 95       	com	r24
    2428:	84 23       	and	r24, r20
    242a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    242c:	0f 90       	pop	r0
    242e:	0f 90       	pop	r0
    2430:	0f 90       	pop	r0
    2432:	0f 90       	pop	r0
    2434:	0f 90       	pop	r0
    2436:	cf 91       	pop	r28
    2438:	df 91       	pop	r29
    243a:	08 95       	ret

0000243c <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    243c:	df 93       	push	r29
    243e:	cf 93       	push	r28
    2440:	00 d0       	rcall	.+0      	; 0x2442 <GPIO_readPin+0x6>
    2442:	00 d0       	rcall	.+0      	; 0x2444 <GPIO_readPin+0x8>
    2444:	0f 92       	push	r0
    2446:	cd b7       	in	r28, 0x3d	; 61
    2448:	de b7       	in	r29, 0x3e	; 62
    244a:	8a 83       	std	Y+2, r24	; 0x02
    244c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    244e:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2450:	8b 81       	ldd	r24, Y+3	; 0x03
    2452:	88 30       	cpi	r24, 0x08	; 8
    2454:	08 f0       	brcs	.+2      	; 0x2458 <GPIO_readPin+0x1c>
    2456:	84 c0       	rjmp	.+264    	; 0x2560 <GPIO_readPin+0x124>
    2458:	8a 81       	ldd	r24, Y+2	; 0x02
    245a:	84 30       	cpi	r24, 0x04	; 4
    245c:	08 f0       	brcs	.+2      	; 0x2460 <GPIO_readPin+0x24>
    245e:	80 c0       	rjmp	.+256    	; 0x2560 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    2460:	8a 81       	ldd	r24, Y+2	; 0x02
    2462:	28 2f       	mov	r18, r24
    2464:	30 e0       	ldi	r19, 0x00	; 0
    2466:	3d 83       	std	Y+5, r19	; 0x05
    2468:	2c 83       	std	Y+4, r18	; 0x04
    246a:	4c 81       	ldd	r20, Y+4	; 0x04
    246c:	5d 81       	ldd	r21, Y+5	; 0x05
    246e:	41 30       	cpi	r20, 0x01	; 1
    2470:	51 05       	cpc	r21, r1
    2472:	79 f1       	breq	.+94     	; 0x24d2 <GPIO_readPin+0x96>
    2474:	8c 81       	ldd	r24, Y+4	; 0x04
    2476:	9d 81       	ldd	r25, Y+5	; 0x05
    2478:	82 30       	cpi	r24, 0x02	; 2
    247a:	91 05       	cpc	r25, r1
    247c:	34 f4       	brge	.+12     	; 0x248a <GPIO_readPin+0x4e>
    247e:	2c 81       	ldd	r18, Y+4	; 0x04
    2480:	3d 81       	ldd	r19, Y+5	; 0x05
    2482:	21 15       	cp	r18, r1
    2484:	31 05       	cpc	r19, r1
    2486:	69 f0       	breq	.+26     	; 0x24a2 <GPIO_readPin+0x66>
    2488:	6b c0       	rjmp	.+214    	; 0x2560 <GPIO_readPin+0x124>
    248a:	4c 81       	ldd	r20, Y+4	; 0x04
    248c:	5d 81       	ldd	r21, Y+5	; 0x05
    248e:	42 30       	cpi	r20, 0x02	; 2
    2490:	51 05       	cpc	r21, r1
    2492:	b9 f1       	breq	.+110    	; 0x2502 <GPIO_readPin+0xc6>
    2494:	8c 81       	ldd	r24, Y+4	; 0x04
    2496:	9d 81       	ldd	r25, Y+5	; 0x05
    2498:	83 30       	cpi	r24, 0x03	; 3
    249a:	91 05       	cpc	r25, r1
    249c:	09 f4       	brne	.+2      	; 0x24a0 <GPIO_readPin+0x64>
    249e:	49 c0       	rjmp	.+146    	; 0x2532 <GPIO_readPin+0xf6>
    24a0:	5f c0       	rjmp	.+190    	; 0x2560 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    24a2:	e9 e3       	ldi	r30, 0x39	; 57
    24a4:	f0 e0       	ldi	r31, 0x00	; 0
    24a6:	80 81       	ld	r24, Z
    24a8:	28 2f       	mov	r18, r24
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	8b 81       	ldd	r24, Y+3	; 0x03
    24ae:	88 2f       	mov	r24, r24
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	a9 01       	movw	r20, r18
    24b4:	02 c0       	rjmp	.+4      	; 0x24ba <GPIO_readPin+0x7e>
    24b6:	55 95       	asr	r21
    24b8:	47 95       	ror	r20
    24ba:	8a 95       	dec	r24
    24bc:	e2 f7       	brpl	.-8      	; 0x24b6 <GPIO_readPin+0x7a>
    24be:	ca 01       	movw	r24, r20
    24c0:	81 70       	andi	r24, 0x01	; 1
    24c2:	90 70       	andi	r25, 0x00	; 0
    24c4:	88 23       	and	r24, r24
    24c6:	19 f0       	breq	.+6      	; 0x24ce <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    24c8:	81 e0       	ldi	r24, 0x01	; 1
    24ca:	89 83       	std	Y+1, r24	; 0x01
    24cc:	49 c0       	rjmp	.+146    	; 0x2560 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    24ce:	19 82       	std	Y+1, r1	; 0x01
    24d0:	47 c0       	rjmp	.+142    	; 0x2560 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    24d2:	e6 e3       	ldi	r30, 0x36	; 54
    24d4:	f0 e0       	ldi	r31, 0x00	; 0
    24d6:	80 81       	ld	r24, Z
    24d8:	28 2f       	mov	r18, r24
    24da:	30 e0       	ldi	r19, 0x00	; 0
    24dc:	8b 81       	ldd	r24, Y+3	; 0x03
    24de:	88 2f       	mov	r24, r24
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	a9 01       	movw	r20, r18
    24e4:	02 c0       	rjmp	.+4      	; 0x24ea <GPIO_readPin+0xae>
    24e6:	55 95       	asr	r21
    24e8:	47 95       	ror	r20
    24ea:	8a 95       	dec	r24
    24ec:	e2 f7       	brpl	.-8      	; 0x24e6 <GPIO_readPin+0xaa>
    24ee:	ca 01       	movw	r24, r20
    24f0:	81 70       	andi	r24, 0x01	; 1
    24f2:	90 70       	andi	r25, 0x00	; 0
    24f4:	88 23       	and	r24, r24
    24f6:	19 f0       	breq	.+6      	; 0x24fe <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    24f8:	81 e0       	ldi	r24, 0x01	; 1
    24fa:	89 83       	std	Y+1, r24	; 0x01
    24fc:	31 c0       	rjmp	.+98     	; 0x2560 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    24fe:	19 82       	std	Y+1, r1	; 0x01
    2500:	2f c0       	rjmp	.+94     	; 0x2560 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    2502:	e3 e3       	ldi	r30, 0x33	; 51
    2504:	f0 e0       	ldi	r31, 0x00	; 0
    2506:	80 81       	ld	r24, Z
    2508:	28 2f       	mov	r18, r24
    250a:	30 e0       	ldi	r19, 0x00	; 0
    250c:	8b 81       	ldd	r24, Y+3	; 0x03
    250e:	88 2f       	mov	r24, r24
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	a9 01       	movw	r20, r18
    2514:	02 c0       	rjmp	.+4      	; 0x251a <GPIO_readPin+0xde>
    2516:	55 95       	asr	r21
    2518:	47 95       	ror	r20
    251a:	8a 95       	dec	r24
    251c:	e2 f7       	brpl	.-8      	; 0x2516 <GPIO_readPin+0xda>
    251e:	ca 01       	movw	r24, r20
    2520:	81 70       	andi	r24, 0x01	; 1
    2522:	90 70       	andi	r25, 0x00	; 0
    2524:	88 23       	and	r24, r24
    2526:	19 f0       	breq	.+6      	; 0x252e <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    2528:	81 e0       	ldi	r24, 0x01	; 1
    252a:	89 83       	std	Y+1, r24	; 0x01
    252c:	19 c0       	rjmp	.+50     	; 0x2560 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    252e:	19 82       	std	Y+1, r1	; 0x01
    2530:	17 c0       	rjmp	.+46     	; 0x2560 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    2532:	e0 e3       	ldi	r30, 0x30	; 48
    2534:	f0 e0       	ldi	r31, 0x00	; 0
    2536:	80 81       	ld	r24, Z
    2538:	28 2f       	mov	r18, r24
    253a:	30 e0       	ldi	r19, 0x00	; 0
    253c:	8b 81       	ldd	r24, Y+3	; 0x03
    253e:	88 2f       	mov	r24, r24
    2540:	90 e0       	ldi	r25, 0x00	; 0
    2542:	a9 01       	movw	r20, r18
    2544:	02 c0       	rjmp	.+4      	; 0x254a <GPIO_readPin+0x10e>
    2546:	55 95       	asr	r21
    2548:	47 95       	ror	r20
    254a:	8a 95       	dec	r24
    254c:	e2 f7       	brpl	.-8      	; 0x2546 <GPIO_readPin+0x10a>
    254e:	ca 01       	movw	r24, r20
    2550:	81 70       	andi	r24, 0x01	; 1
    2552:	90 70       	andi	r25, 0x00	; 0
    2554:	88 23       	and	r24, r24
    2556:	19 f0       	breq	.+6      	; 0x255e <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    2558:	81 e0       	ldi	r24, 0x01	; 1
    255a:	89 83       	std	Y+1, r24	; 0x01
    255c:	01 c0       	rjmp	.+2      	; 0x2560 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    255e:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    2560:	89 81       	ldd	r24, Y+1	; 0x01
}
    2562:	0f 90       	pop	r0
    2564:	0f 90       	pop	r0
    2566:	0f 90       	pop	r0
    2568:	0f 90       	pop	r0
    256a:	0f 90       	pop	r0
    256c:	cf 91       	pop	r28
    256e:	df 91       	pop	r29
    2570:	08 95       	ret

00002572 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    2572:	df 93       	push	r29
    2574:	cf 93       	push	r28
    2576:	00 d0       	rcall	.+0      	; 0x2578 <GPIO_setupPortDirection+0x6>
    2578:	00 d0       	rcall	.+0      	; 0x257a <GPIO_setupPortDirection+0x8>
    257a:	cd b7       	in	r28, 0x3d	; 61
    257c:	de b7       	in	r29, 0x3e	; 62
    257e:	89 83       	std	Y+1, r24	; 0x01
    2580:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2582:	89 81       	ldd	r24, Y+1	; 0x01
    2584:	84 30       	cpi	r24, 0x04	; 4
    2586:	90 f5       	brcc	.+100    	; 0x25ec <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    2588:	89 81       	ldd	r24, Y+1	; 0x01
    258a:	28 2f       	mov	r18, r24
    258c:	30 e0       	ldi	r19, 0x00	; 0
    258e:	3c 83       	std	Y+4, r19	; 0x04
    2590:	2b 83       	std	Y+3, r18	; 0x03
    2592:	8b 81       	ldd	r24, Y+3	; 0x03
    2594:	9c 81       	ldd	r25, Y+4	; 0x04
    2596:	81 30       	cpi	r24, 0x01	; 1
    2598:	91 05       	cpc	r25, r1
    259a:	d1 f0       	breq	.+52     	; 0x25d0 <GPIO_setupPortDirection+0x5e>
    259c:	2b 81       	ldd	r18, Y+3	; 0x03
    259e:	3c 81       	ldd	r19, Y+4	; 0x04
    25a0:	22 30       	cpi	r18, 0x02	; 2
    25a2:	31 05       	cpc	r19, r1
    25a4:	2c f4       	brge	.+10     	; 0x25b0 <GPIO_setupPortDirection+0x3e>
    25a6:	8b 81       	ldd	r24, Y+3	; 0x03
    25a8:	9c 81       	ldd	r25, Y+4	; 0x04
    25aa:	00 97       	sbiw	r24, 0x00	; 0
    25ac:	61 f0       	breq	.+24     	; 0x25c6 <GPIO_setupPortDirection+0x54>
    25ae:	1e c0       	rjmp	.+60     	; 0x25ec <GPIO_setupPortDirection+0x7a>
    25b0:	2b 81       	ldd	r18, Y+3	; 0x03
    25b2:	3c 81       	ldd	r19, Y+4	; 0x04
    25b4:	22 30       	cpi	r18, 0x02	; 2
    25b6:	31 05       	cpc	r19, r1
    25b8:	81 f0       	breq	.+32     	; 0x25da <GPIO_setupPortDirection+0x68>
    25ba:	8b 81       	ldd	r24, Y+3	; 0x03
    25bc:	9c 81       	ldd	r25, Y+4	; 0x04
    25be:	83 30       	cpi	r24, 0x03	; 3
    25c0:	91 05       	cpc	r25, r1
    25c2:	81 f0       	breq	.+32     	; 0x25e4 <GPIO_setupPortDirection+0x72>
    25c4:	13 c0       	rjmp	.+38     	; 0x25ec <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    25c6:	ea e3       	ldi	r30, 0x3A	; 58
    25c8:	f0 e0       	ldi	r31, 0x00	; 0
    25ca:	8a 81       	ldd	r24, Y+2	; 0x02
    25cc:	80 83       	st	Z, r24
    25ce:	0e c0       	rjmp	.+28     	; 0x25ec <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    25d0:	e7 e3       	ldi	r30, 0x37	; 55
    25d2:	f0 e0       	ldi	r31, 0x00	; 0
    25d4:	8a 81       	ldd	r24, Y+2	; 0x02
    25d6:	80 83       	st	Z, r24
    25d8:	09 c0       	rjmp	.+18     	; 0x25ec <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    25da:	e4 e3       	ldi	r30, 0x34	; 52
    25dc:	f0 e0       	ldi	r31, 0x00	; 0
    25de:	8a 81       	ldd	r24, Y+2	; 0x02
    25e0:	80 83       	st	Z, r24
    25e2:	04 c0       	rjmp	.+8      	; 0x25ec <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    25e4:	e1 e3       	ldi	r30, 0x31	; 49
    25e6:	f0 e0       	ldi	r31, 0x00	; 0
    25e8:	8a 81       	ldd	r24, Y+2	; 0x02
    25ea:	80 83       	st	Z, r24
			break;
		}
	}
}
    25ec:	0f 90       	pop	r0
    25ee:	0f 90       	pop	r0
    25f0:	0f 90       	pop	r0
    25f2:	0f 90       	pop	r0
    25f4:	cf 91       	pop	r28
    25f6:	df 91       	pop	r29
    25f8:	08 95       	ret

000025fa <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    25fa:	df 93       	push	r29
    25fc:	cf 93       	push	r28
    25fe:	00 d0       	rcall	.+0      	; 0x2600 <GPIO_writePort+0x6>
    2600:	00 d0       	rcall	.+0      	; 0x2602 <GPIO_writePort+0x8>
    2602:	cd b7       	in	r28, 0x3d	; 61
    2604:	de b7       	in	r29, 0x3e	; 62
    2606:	89 83       	std	Y+1, r24	; 0x01
    2608:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    260a:	89 81       	ldd	r24, Y+1	; 0x01
    260c:	84 30       	cpi	r24, 0x04	; 4
    260e:	90 f5       	brcc	.+100    	; 0x2674 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    2610:	89 81       	ldd	r24, Y+1	; 0x01
    2612:	28 2f       	mov	r18, r24
    2614:	30 e0       	ldi	r19, 0x00	; 0
    2616:	3c 83       	std	Y+4, r19	; 0x04
    2618:	2b 83       	std	Y+3, r18	; 0x03
    261a:	8b 81       	ldd	r24, Y+3	; 0x03
    261c:	9c 81       	ldd	r25, Y+4	; 0x04
    261e:	81 30       	cpi	r24, 0x01	; 1
    2620:	91 05       	cpc	r25, r1
    2622:	d1 f0       	breq	.+52     	; 0x2658 <GPIO_writePort+0x5e>
    2624:	2b 81       	ldd	r18, Y+3	; 0x03
    2626:	3c 81       	ldd	r19, Y+4	; 0x04
    2628:	22 30       	cpi	r18, 0x02	; 2
    262a:	31 05       	cpc	r19, r1
    262c:	2c f4       	brge	.+10     	; 0x2638 <GPIO_writePort+0x3e>
    262e:	8b 81       	ldd	r24, Y+3	; 0x03
    2630:	9c 81       	ldd	r25, Y+4	; 0x04
    2632:	00 97       	sbiw	r24, 0x00	; 0
    2634:	61 f0       	breq	.+24     	; 0x264e <GPIO_writePort+0x54>
    2636:	1e c0       	rjmp	.+60     	; 0x2674 <GPIO_writePort+0x7a>
    2638:	2b 81       	ldd	r18, Y+3	; 0x03
    263a:	3c 81       	ldd	r19, Y+4	; 0x04
    263c:	22 30       	cpi	r18, 0x02	; 2
    263e:	31 05       	cpc	r19, r1
    2640:	81 f0       	breq	.+32     	; 0x2662 <GPIO_writePort+0x68>
    2642:	8b 81       	ldd	r24, Y+3	; 0x03
    2644:	9c 81       	ldd	r25, Y+4	; 0x04
    2646:	83 30       	cpi	r24, 0x03	; 3
    2648:	91 05       	cpc	r25, r1
    264a:	81 f0       	breq	.+32     	; 0x266c <GPIO_writePort+0x72>
    264c:	13 c0       	rjmp	.+38     	; 0x2674 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    264e:	eb e3       	ldi	r30, 0x3B	; 59
    2650:	f0 e0       	ldi	r31, 0x00	; 0
    2652:	8a 81       	ldd	r24, Y+2	; 0x02
    2654:	80 83       	st	Z, r24
    2656:	0e c0       	rjmp	.+28     	; 0x2674 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    2658:	e8 e3       	ldi	r30, 0x38	; 56
    265a:	f0 e0       	ldi	r31, 0x00	; 0
    265c:	8a 81       	ldd	r24, Y+2	; 0x02
    265e:	80 83       	st	Z, r24
    2660:	09 c0       	rjmp	.+18     	; 0x2674 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    2662:	e5 e3       	ldi	r30, 0x35	; 53
    2664:	f0 e0       	ldi	r31, 0x00	; 0
    2666:	8a 81       	ldd	r24, Y+2	; 0x02
    2668:	80 83       	st	Z, r24
    266a:	04 c0       	rjmp	.+8      	; 0x2674 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    266c:	e2 e3       	ldi	r30, 0x32	; 50
    266e:	f0 e0       	ldi	r31, 0x00	; 0
    2670:	8a 81       	ldd	r24, Y+2	; 0x02
    2672:	80 83       	st	Z, r24
			break;
		}
	}
}
    2674:	0f 90       	pop	r0
    2676:	0f 90       	pop	r0
    2678:	0f 90       	pop	r0
    267a:	0f 90       	pop	r0
    267c:	cf 91       	pop	r28
    267e:	df 91       	pop	r29
    2680:	08 95       	ret

00002682 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    2682:	df 93       	push	r29
    2684:	cf 93       	push	r28
    2686:	00 d0       	rcall	.+0      	; 0x2688 <GPIO_readPort+0x6>
    2688:	00 d0       	rcall	.+0      	; 0x268a <GPIO_readPort+0x8>
    268a:	cd b7       	in	r28, 0x3d	; 61
    268c:	de b7       	in	r29, 0x3e	; 62
    268e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    2690:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2692:	8a 81       	ldd	r24, Y+2	; 0x02
    2694:	84 30       	cpi	r24, 0x04	; 4
    2696:	90 f5       	brcc	.+100    	; 0x26fc <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    2698:	8a 81       	ldd	r24, Y+2	; 0x02
    269a:	28 2f       	mov	r18, r24
    269c:	30 e0       	ldi	r19, 0x00	; 0
    269e:	3c 83       	std	Y+4, r19	; 0x04
    26a0:	2b 83       	std	Y+3, r18	; 0x03
    26a2:	8b 81       	ldd	r24, Y+3	; 0x03
    26a4:	9c 81       	ldd	r25, Y+4	; 0x04
    26a6:	81 30       	cpi	r24, 0x01	; 1
    26a8:	91 05       	cpc	r25, r1
    26aa:	d1 f0       	breq	.+52     	; 0x26e0 <GPIO_readPort+0x5e>
    26ac:	2b 81       	ldd	r18, Y+3	; 0x03
    26ae:	3c 81       	ldd	r19, Y+4	; 0x04
    26b0:	22 30       	cpi	r18, 0x02	; 2
    26b2:	31 05       	cpc	r19, r1
    26b4:	2c f4       	brge	.+10     	; 0x26c0 <GPIO_readPort+0x3e>
    26b6:	8b 81       	ldd	r24, Y+3	; 0x03
    26b8:	9c 81       	ldd	r25, Y+4	; 0x04
    26ba:	00 97       	sbiw	r24, 0x00	; 0
    26bc:	61 f0       	breq	.+24     	; 0x26d6 <GPIO_readPort+0x54>
    26be:	1e c0       	rjmp	.+60     	; 0x26fc <GPIO_readPort+0x7a>
    26c0:	2b 81       	ldd	r18, Y+3	; 0x03
    26c2:	3c 81       	ldd	r19, Y+4	; 0x04
    26c4:	22 30       	cpi	r18, 0x02	; 2
    26c6:	31 05       	cpc	r19, r1
    26c8:	81 f0       	breq	.+32     	; 0x26ea <GPIO_readPort+0x68>
    26ca:	8b 81       	ldd	r24, Y+3	; 0x03
    26cc:	9c 81       	ldd	r25, Y+4	; 0x04
    26ce:	83 30       	cpi	r24, 0x03	; 3
    26d0:	91 05       	cpc	r25, r1
    26d2:	81 f0       	breq	.+32     	; 0x26f4 <GPIO_readPort+0x72>
    26d4:	13 c0       	rjmp	.+38     	; 0x26fc <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    26d6:	e9 e3       	ldi	r30, 0x39	; 57
    26d8:	f0 e0       	ldi	r31, 0x00	; 0
    26da:	80 81       	ld	r24, Z
    26dc:	89 83       	std	Y+1, r24	; 0x01
    26de:	0e c0       	rjmp	.+28     	; 0x26fc <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    26e0:	e6 e3       	ldi	r30, 0x36	; 54
    26e2:	f0 e0       	ldi	r31, 0x00	; 0
    26e4:	80 81       	ld	r24, Z
    26e6:	89 83       	std	Y+1, r24	; 0x01
    26e8:	09 c0       	rjmp	.+18     	; 0x26fc <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    26ea:	e3 e3       	ldi	r30, 0x33	; 51
    26ec:	f0 e0       	ldi	r31, 0x00	; 0
    26ee:	80 81       	ld	r24, Z
    26f0:	89 83       	std	Y+1, r24	; 0x01
    26f2:	04 c0       	rjmp	.+8      	; 0x26fc <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    26f4:	e0 e3       	ldi	r30, 0x30	; 48
    26f6:	f0 e0       	ldi	r31, 0x00	; 0
    26f8:	80 81       	ld	r24, Z
    26fa:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    26fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    26fe:	0f 90       	pop	r0
    2700:	0f 90       	pop	r0
    2702:	0f 90       	pop	r0
    2704:	0f 90       	pop	r0
    2706:	cf 91       	pop	r28
    2708:	df 91       	pop	r29
    270a:	08 95       	ret

0000270c <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    270c:	df 93       	push	r29
    270e:	cf 93       	push	r28
    2710:	cd b7       	in	r28, 0x3d	; 61
    2712:	de b7       	in	r29, 0x3e	; 62
    2714:	60 97       	sbiw	r28, 0x10	; 16
    2716:	0f b6       	in	r0, 0x3f	; 63
    2718:	f8 94       	cli
    271a:	de bf       	out	0x3e, r29	; 62
    271c:	0f be       	out	0x3f, r0	; 63
    271e:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    2720:	81 e0       	ldi	r24, 0x01	; 1
    2722:	64 e0       	ldi	r22, 0x04	; 4
    2724:	40 e0       	ldi	r20, 0x00	; 0
    2726:	0e 94 48 10 	call	0x2090	; 0x2090 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    272a:	81 e0       	ldi	r24, 0x01	; 1
    272c:	65 e0       	ldi	r22, 0x05	; 5
    272e:	40 e0       	ldi	r20, 0x00	; 0
    2730:	0e 94 48 10 	call	0x2090	; 0x2090 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    2734:	81 e0       	ldi	r24, 0x01	; 1
    2736:	66 e0       	ldi	r22, 0x06	; 6
    2738:	40 e0       	ldi	r20, 0x00	; 0
    273a:	0e 94 48 10 	call	0x2090	; 0x2090 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    273e:	81 e0       	ldi	r24, 0x01	; 1
    2740:	67 e0       	ldi	r22, 0x07	; 7
    2742:	40 e0       	ldi	r20, 0x00	; 0
    2744:	0e 94 48 10 	call	0x2090	; 0x2090 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    2748:	83 e0       	ldi	r24, 0x03	; 3
    274a:	62 e0       	ldi	r22, 0x02	; 2
    274c:	40 e0       	ldi	r20, 0x00	; 0
    274e:	0e 94 48 10 	call	0x2090	; 0x2090 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    2752:	83 e0       	ldi	r24, 0x03	; 3
    2754:	63 e0       	ldi	r22, 0x03	; 3
    2756:	40 e0       	ldi	r20, 0x00	; 0
    2758:	0e 94 48 10 	call	0x2090	; 0x2090 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    275c:	83 e0       	ldi	r24, 0x03	; 3
    275e:	64 e0       	ldi	r22, 0x04	; 4
    2760:	40 e0       	ldi	r20, 0x00	; 0
    2762:	0e 94 48 10 	call	0x2090	; 0x2090 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    2766:	83 e0       	ldi	r24, 0x03	; 3
    2768:	65 e0       	ldi	r22, 0x05	; 5
    276a:	40 e0       	ldi	r20, 0x00	; 0
    276c:	0e 94 48 10 	call	0x2090	; 0x2090 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    2770:	1f 86       	std	Y+15, r1	; 0x0f
    2772:	bd c0       	rjmp	.+378    	; 0x28ee <KEYPAD_getPressedKey+0x1e2>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    2774:	8f 85       	ldd	r24, Y+15	; 0x0f
    2776:	98 2f       	mov	r25, r24
    2778:	9c 5f       	subi	r25, 0xFC	; 252
    277a:	81 e0       	ldi	r24, 0x01	; 1
    277c:	69 2f       	mov	r22, r25
    277e:	41 e0       	ldi	r20, 0x01	; 1
    2780:	0e 94 48 10 	call	0x2090	; 0x2090 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    2784:	8f 85       	ldd	r24, Y+15	; 0x0f
    2786:	98 2f       	mov	r25, r24
    2788:	9c 5f       	subi	r25, 0xFC	; 252
    278a:	81 e0       	ldi	r24, 0x01	; 1
    278c:	69 2f       	mov	r22, r25
    278e:	40 e0       	ldi	r20, 0x00	; 0
    2790:	0e 94 33 11 	call	0x2266	; 0x2266 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    2794:	18 8a       	std	Y+16, r1	; 0x10
    2796:	2b c0       	rjmp	.+86     	; 0x27ee <KEYPAD_getPressedKey+0xe2>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    2798:	88 89       	ldd	r24, Y+16	; 0x10
    279a:	98 2f       	mov	r25, r24
    279c:	9e 5f       	subi	r25, 0xFE	; 254
    279e:	83 e0       	ldi	r24, 0x03	; 3
    27a0:	69 2f       	mov	r22, r25
    27a2:	0e 94 1e 12 	call	0x243c	; 0x243c <GPIO_readPin>
    27a6:	88 23       	and	r24, r24
    27a8:	f9 f4       	brne	.+62     	; 0x27e8 <KEYPAD_getPressedKey+0xdc>
				{
					while (GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED);
    27aa:	88 89       	ldd	r24, Y+16	; 0x10
    27ac:	98 2f       	mov	r25, r24
    27ae:	9e 5f       	subi	r25, 0xFE	; 254
    27b0:	83 e0       	ldi	r24, 0x03	; 3
    27b2:	69 2f       	mov	r22, r25
    27b4:	0e 94 1e 12 	call	0x243c	; 0x243c <GPIO_readPin>
    27b8:	88 23       	and	r24, r24
    27ba:	b9 f3       	breq	.-18     	; 0x27aa <KEYPAD_getPressedKey+0x9e>
#endif
#elif (KEYPAD_NUM_COLS == 4)
#ifdef STANDARD_KEYPAD
					return ((row*KEYPAD_NUM_COLS)+col+1);
#else
					return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    27bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    27be:	88 2f       	mov	r24, r24
    27c0:	90 e0       	ldi	r25, 0x00	; 0
    27c2:	88 0f       	add	r24, r24
    27c4:	99 1f       	adc	r25, r25
    27c6:	88 0f       	add	r24, r24
    27c8:	99 1f       	adc	r25, r25
    27ca:	98 2f       	mov	r25, r24
    27cc:	88 89       	ldd	r24, Y+16	; 0x10
    27ce:	89 0f       	add	r24, r25
    27d0:	8f 5f       	subi	r24, 0xFF	; 255
    27d2:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <KEYPAD_4x4_adjustKeyNumber>
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
		//return '$';
	}	
}
    27d6:	60 96       	adiw	r28, 0x10	; 16
    27d8:	0f b6       	in	r0, 0x3f	; 63
    27da:	f8 94       	cli
    27dc:	de bf       	out	0x3e, r29	; 62
    27de:	0f be       	out	0x3f, r0	; 63
    27e0:	cd bf       	out	0x3d, r28	; 61
    27e2:	cf 91       	pop	r28
    27e4:	df 91       	pop	r29
    27e6:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    27e8:	88 89       	ldd	r24, Y+16	; 0x10
    27ea:	8f 5f       	subi	r24, 0xFF	; 255
    27ec:	88 8b       	std	Y+16, r24	; 0x10
    27ee:	88 89       	ldd	r24, Y+16	; 0x10
    27f0:	84 30       	cpi	r24, 0x04	; 4
    27f2:	90 f2       	brcs	.-92     	; 0x2798 <KEYPAD_getPressedKey+0x8c>
					return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
#endif
#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    27f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    27f6:	98 2f       	mov	r25, r24
    27f8:	9c 5f       	subi	r25, 0xFC	; 252
    27fa:	81 e0       	ldi	r24, 0x01	; 1
    27fc:	69 2f       	mov	r22, r25
    27fe:	40 e0       	ldi	r20, 0x00	; 0
    2800:	0e 94 48 10 	call	0x2090	; 0x2090 <GPIO_setupPinDirection>
    2804:	80 e0       	ldi	r24, 0x00	; 0
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	a0 ea       	ldi	r26, 0xA0	; 160
    280a:	b0 e4       	ldi	r27, 0x40	; 64
    280c:	8b 87       	std	Y+11, r24	; 0x0b
    280e:	9c 87       	std	Y+12, r25	; 0x0c
    2810:	ad 87       	std	Y+13, r26	; 0x0d
    2812:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2814:	6b 85       	ldd	r22, Y+11	; 0x0b
    2816:	7c 85       	ldd	r23, Y+12	; 0x0c
    2818:	8d 85       	ldd	r24, Y+13	; 0x0d
    281a:	9e 85       	ldd	r25, Y+14	; 0x0e
    281c:	20 e0       	ldi	r18, 0x00	; 0
    281e:	30 e0       	ldi	r19, 0x00	; 0
    2820:	4a ef       	ldi	r20, 0xFA	; 250
    2822:	54 e4       	ldi	r21, 0x44	; 68
    2824:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2828:	dc 01       	movw	r26, r24
    282a:	cb 01       	movw	r24, r22
    282c:	8f 83       	std	Y+7, r24	; 0x07
    282e:	98 87       	std	Y+8, r25	; 0x08
    2830:	a9 87       	std	Y+9, r26	; 0x09
    2832:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2834:	6f 81       	ldd	r22, Y+7	; 0x07
    2836:	78 85       	ldd	r23, Y+8	; 0x08
    2838:	89 85       	ldd	r24, Y+9	; 0x09
    283a:	9a 85       	ldd	r25, Y+10	; 0x0a
    283c:	20 e0       	ldi	r18, 0x00	; 0
    283e:	30 e0       	ldi	r19, 0x00	; 0
    2840:	40 e8       	ldi	r20, 0x80	; 128
    2842:	5f e3       	ldi	r21, 0x3F	; 63
    2844:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2848:	88 23       	and	r24, r24
    284a:	2c f4       	brge	.+10     	; 0x2856 <KEYPAD_getPressedKey+0x14a>
		__ticks = 1;
    284c:	81 e0       	ldi	r24, 0x01	; 1
    284e:	90 e0       	ldi	r25, 0x00	; 0
    2850:	9e 83       	std	Y+6, r25	; 0x06
    2852:	8d 83       	std	Y+5, r24	; 0x05
    2854:	3f c0       	rjmp	.+126    	; 0x28d4 <KEYPAD_getPressedKey+0x1c8>
	else if (__tmp > 65535)
    2856:	6f 81       	ldd	r22, Y+7	; 0x07
    2858:	78 85       	ldd	r23, Y+8	; 0x08
    285a:	89 85       	ldd	r24, Y+9	; 0x09
    285c:	9a 85       	ldd	r25, Y+10	; 0x0a
    285e:	20 e0       	ldi	r18, 0x00	; 0
    2860:	3f ef       	ldi	r19, 0xFF	; 255
    2862:	4f e7       	ldi	r20, 0x7F	; 127
    2864:	57 e4       	ldi	r21, 0x47	; 71
    2866:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    286a:	18 16       	cp	r1, r24
    286c:	4c f5       	brge	.+82     	; 0x28c0 <KEYPAD_getPressedKey+0x1b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    286e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2870:	7c 85       	ldd	r23, Y+12	; 0x0c
    2872:	8d 85       	ldd	r24, Y+13	; 0x0d
    2874:	9e 85       	ldd	r25, Y+14	; 0x0e
    2876:	20 e0       	ldi	r18, 0x00	; 0
    2878:	30 e0       	ldi	r19, 0x00	; 0
    287a:	40 e2       	ldi	r20, 0x20	; 32
    287c:	51 e4       	ldi	r21, 0x41	; 65
    287e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2882:	dc 01       	movw	r26, r24
    2884:	cb 01       	movw	r24, r22
    2886:	bc 01       	movw	r22, r24
    2888:	cd 01       	movw	r24, r26
    288a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    288e:	dc 01       	movw	r26, r24
    2890:	cb 01       	movw	r24, r22
    2892:	9e 83       	std	Y+6, r25	; 0x06
    2894:	8d 83       	std	Y+5, r24	; 0x05
    2896:	0f c0       	rjmp	.+30     	; 0x28b6 <KEYPAD_getPressedKey+0x1aa>
    2898:	88 ec       	ldi	r24, 0xC8	; 200
    289a:	90 e0       	ldi	r25, 0x00	; 0
    289c:	9c 83       	std	Y+4, r25	; 0x04
    289e:	8b 83       	std	Y+3, r24	; 0x03
    28a0:	8b 81       	ldd	r24, Y+3	; 0x03
    28a2:	9c 81       	ldd	r25, Y+4	; 0x04
    28a4:	01 97       	sbiw	r24, 0x01	; 1
    28a6:	f1 f7       	brne	.-4      	; 0x28a4 <KEYPAD_getPressedKey+0x198>
    28a8:	9c 83       	std	Y+4, r25	; 0x04
    28aa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28ac:	8d 81       	ldd	r24, Y+5	; 0x05
    28ae:	9e 81       	ldd	r25, Y+6	; 0x06
    28b0:	01 97       	sbiw	r24, 0x01	; 1
    28b2:	9e 83       	std	Y+6, r25	; 0x06
    28b4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28b6:	8d 81       	ldd	r24, Y+5	; 0x05
    28b8:	9e 81       	ldd	r25, Y+6	; 0x06
    28ba:	00 97       	sbiw	r24, 0x00	; 0
    28bc:	69 f7       	brne	.-38     	; 0x2898 <KEYPAD_getPressedKey+0x18c>
    28be:	14 c0       	rjmp	.+40     	; 0x28e8 <KEYPAD_getPressedKey+0x1dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28c0:	6f 81       	ldd	r22, Y+7	; 0x07
    28c2:	78 85       	ldd	r23, Y+8	; 0x08
    28c4:	89 85       	ldd	r24, Y+9	; 0x09
    28c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    28c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28cc:	dc 01       	movw	r26, r24
    28ce:	cb 01       	movw	r24, r22
    28d0:	9e 83       	std	Y+6, r25	; 0x06
    28d2:	8d 83       	std	Y+5, r24	; 0x05
    28d4:	8d 81       	ldd	r24, Y+5	; 0x05
    28d6:	9e 81       	ldd	r25, Y+6	; 0x06
    28d8:	9a 83       	std	Y+2, r25	; 0x02
    28da:	89 83       	std	Y+1, r24	; 0x01
    28dc:	89 81       	ldd	r24, Y+1	; 0x01
    28de:	9a 81       	ldd	r25, Y+2	; 0x02
    28e0:	01 97       	sbiw	r24, 0x01	; 1
    28e2:	f1 f7       	brne	.-4      	; 0x28e0 <KEYPAD_getPressedKey+0x1d4>
    28e4:	9a 83       	std	Y+2, r25	; 0x02
    28e6:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    28e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    28ea:	8f 5f       	subi	r24, 0xFF	; 255
    28ec:	8f 87       	std	Y+15, r24	; 0x0f
    28ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    28f0:	84 30       	cpi	r24, 0x04	; 4
    28f2:	08 f4       	brcc	.+2      	; 0x28f6 <KEYPAD_getPressedKey+0x1ea>
    28f4:	3f cf       	rjmp	.-386    	; 0x2774 <KEYPAD_getPressedKey+0x68>
    28f6:	3c cf       	rjmp	.-392    	; 0x2770 <KEYPAD_getPressedKey+0x64>

000028f8 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    28f8:	df 93       	push	r29
    28fa:	cf 93       	push	r28
    28fc:	00 d0       	rcall	.+0      	; 0x28fe <KEYPAD_4x4_adjustKeyNumber+0x6>
    28fe:	00 d0       	rcall	.+0      	; 0x2900 <KEYPAD_4x4_adjustKeyNumber+0x8>
    2900:	cd b7       	in	r28, 0x3d	; 61
    2902:	de b7       	in	r29, 0x3e	; 62
    2904:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    2906:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    2908:	8a 81       	ldd	r24, Y+2	; 0x02
    290a:	28 2f       	mov	r18, r24
    290c:	30 e0       	ldi	r19, 0x00	; 0
    290e:	3c 83       	std	Y+4, r19	; 0x04
    2910:	2b 83       	std	Y+3, r18	; 0x03
    2912:	8b 81       	ldd	r24, Y+3	; 0x03
    2914:	9c 81       	ldd	r25, Y+4	; 0x04
    2916:	88 30       	cpi	r24, 0x08	; 8
    2918:	91 05       	cpc	r25, r1
    291a:	09 f4       	brne	.+2      	; 0x291e <KEYPAD_4x4_adjustKeyNumber+0x26>
    291c:	70 c0       	rjmp	.+224    	; 0x29fe <KEYPAD_4x4_adjustKeyNumber+0x106>
    291e:	2b 81       	ldd	r18, Y+3	; 0x03
    2920:	3c 81       	ldd	r19, Y+4	; 0x04
    2922:	29 30       	cpi	r18, 0x09	; 9
    2924:	31 05       	cpc	r19, r1
    2926:	5c f5       	brge	.+86     	; 0x297e <KEYPAD_4x4_adjustKeyNumber+0x86>
    2928:	8b 81       	ldd	r24, Y+3	; 0x03
    292a:	9c 81       	ldd	r25, Y+4	; 0x04
    292c:	84 30       	cpi	r24, 0x04	; 4
    292e:	91 05       	cpc	r25, r1
    2930:	09 f4       	brne	.+2      	; 0x2934 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    2932:	59 c0       	rjmp	.+178    	; 0x29e6 <KEYPAD_4x4_adjustKeyNumber+0xee>
    2934:	2b 81       	ldd	r18, Y+3	; 0x03
    2936:	3c 81       	ldd	r19, Y+4	; 0x04
    2938:	25 30       	cpi	r18, 0x05	; 5
    293a:	31 05       	cpc	r19, r1
    293c:	9c f4       	brge	.+38     	; 0x2964 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    293e:	8b 81       	ldd	r24, Y+3	; 0x03
    2940:	9c 81       	ldd	r25, Y+4	; 0x04
    2942:	82 30       	cpi	r24, 0x02	; 2
    2944:	91 05       	cpc	r25, r1
    2946:	09 f4       	brne	.+2      	; 0x294a <KEYPAD_4x4_adjustKeyNumber+0x52>
    2948:	48 c0       	rjmp	.+144    	; 0x29da <KEYPAD_4x4_adjustKeyNumber+0xe2>
    294a:	2b 81       	ldd	r18, Y+3	; 0x03
    294c:	3c 81       	ldd	r19, Y+4	; 0x04
    294e:	23 30       	cpi	r18, 0x03	; 3
    2950:	31 05       	cpc	r19, r1
    2952:	0c f0       	brlt	.+2      	; 0x2956 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    2954:	45 c0       	rjmp	.+138    	; 0x29e0 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    2956:	8b 81       	ldd	r24, Y+3	; 0x03
    2958:	9c 81       	ldd	r25, Y+4	; 0x04
    295a:	81 30       	cpi	r24, 0x01	; 1
    295c:	91 05       	cpc	r25, r1
    295e:	09 f4       	brne	.+2      	; 0x2962 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    2960:	39 c0       	rjmp	.+114    	; 0x29d4 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    2962:	67 c0       	rjmp	.+206    	; 0x2a32 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    2964:	2b 81       	ldd	r18, Y+3	; 0x03
    2966:	3c 81       	ldd	r19, Y+4	; 0x04
    2968:	26 30       	cpi	r18, 0x06	; 6
    296a:	31 05       	cpc	r19, r1
    296c:	09 f4       	brne	.+2      	; 0x2970 <KEYPAD_4x4_adjustKeyNumber+0x78>
    296e:	41 c0       	rjmp	.+130    	; 0x29f2 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    2970:	8b 81       	ldd	r24, Y+3	; 0x03
    2972:	9c 81       	ldd	r25, Y+4	; 0x04
    2974:	87 30       	cpi	r24, 0x07	; 7
    2976:	91 05       	cpc	r25, r1
    2978:	0c f0       	brlt	.+2      	; 0x297c <KEYPAD_4x4_adjustKeyNumber+0x84>
    297a:	3e c0       	rjmp	.+124    	; 0x29f8 <KEYPAD_4x4_adjustKeyNumber+0x100>
    297c:	37 c0       	rjmp	.+110    	; 0x29ec <KEYPAD_4x4_adjustKeyNumber+0xf4>
    297e:	2b 81       	ldd	r18, Y+3	; 0x03
    2980:	3c 81       	ldd	r19, Y+4	; 0x04
    2982:	2c 30       	cpi	r18, 0x0C	; 12
    2984:	31 05       	cpc	r19, r1
    2986:	09 f4       	brne	.+2      	; 0x298a <KEYPAD_4x4_adjustKeyNumber+0x92>
    2988:	46 c0       	rjmp	.+140    	; 0x2a16 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    298a:	8b 81       	ldd	r24, Y+3	; 0x03
    298c:	9c 81       	ldd	r25, Y+4	; 0x04
    298e:	8d 30       	cpi	r24, 0x0D	; 13
    2990:	91 05       	cpc	r25, r1
    2992:	5c f4       	brge	.+22     	; 0x29aa <KEYPAD_4x4_adjustKeyNumber+0xb2>
    2994:	2b 81       	ldd	r18, Y+3	; 0x03
    2996:	3c 81       	ldd	r19, Y+4	; 0x04
    2998:	2a 30       	cpi	r18, 0x0A	; 10
    299a:	31 05       	cpc	r19, r1
    299c:	b1 f1       	breq	.+108    	; 0x2a0a <KEYPAD_4x4_adjustKeyNumber+0x112>
    299e:	8b 81       	ldd	r24, Y+3	; 0x03
    29a0:	9c 81       	ldd	r25, Y+4	; 0x04
    29a2:	8b 30       	cpi	r24, 0x0B	; 11
    29a4:	91 05       	cpc	r25, r1
    29a6:	a4 f5       	brge	.+104    	; 0x2a10 <KEYPAD_4x4_adjustKeyNumber+0x118>
    29a8:	2d c0       	rjmp	.+90     	; 0x2a04 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    29aa:	2b 81       	ldd	r18, Y+3	; 0x03
    29ac:	3c 81       	ldd	r19, Y+4	; 0x04
    29ae:	2e 30       	cpi	r18, 0x0E	; 14
    29b0:	31 05       	cpc	r19, r1
    29b2:	b9 f1       	breq	.+110    	; 0x2a22 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    29b4:	8b 81       	ldd	r24, Y+3	; 0x03
    29b6:	9c 81       	ldd	r25, Y+4	; 0x04
    29b8:	8e 30       	cpi	r24, 0x0E	; 14
    29ba:	91 05       	cpc	r25, r1
    29bc:	7c f1       	brlt	.+94     	; 0x2a1c <KEYPAD_4x4_adjustKeyNumber+0x124>
    29be:	2b 81       	ldd	r18, Y+3	; 0x03
    29c0:	3c 81       	ldd	r19, Y+4	; 0x04
    29c2:	2f 30       	cpi	r18, 0x0F	; 15
    29c4:	31 05       	cpc	r19, r1
    29c6:	79 f1       	breq	.+94     	; 0x2a26 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    29c8:	8b 81       	ldd	r24, Y+3	; 0x03
    29ca:	9c 81       	ldd	r25, Y+4	; 0x04
    29cc:	80 31       	cpi	r24, 0x10	; 16
    29ce:	91 05       	cpc	r25, r1
    29d0:	69 f1       	breq	.+90     	; 0x2a2c <KEYPAD_4x4_adjustKeyNumber+0x134>
    29d2:	2f c0       	rjmp	.+94     	; 0x2a32 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
	case 1: keypad_button = 7;
    29d4:	87 e0       	ldi	r24, 0x07	; 7
    29d6:	89 83       	std	Y+1, r24	; 0x01
    29d8:	2e c0       	rjmp	.+92     	; 0x2a36 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 2: keypad_button = 8;
    29da:	88 e0       	ldi	r24, 0x08	; 8
    29dc:	89 83       	std	Y+1, r24	; 0x01
    29de:	2b c0       	rjmp	.+86     	; 0x2a36 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 3: keypad_button = 9;
    29e0:	89 e0       	ldi	r24, 0x09	; 9
    29e2:	89 83       	std	Y+1, r24	; 0x01
    29e4:	28 c0       	rjmp	.+80     	; 0x2a36 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 4: keypad_button = '%'; // ASCII Code of %
    29e6:	85 e2       	ldi	r24, 0x25	; 37
    29e8:	89 83       	std	Y+1, r24	; 0x01
    29ea:	25 c0       	rjmp	.+74     	; 0x2a36 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 5: keypad_button = 4;
    29ec:	84 e0       	ldi	r24, 0x04	; 4
    29ee:	89 83       	std	Y+1, r24	; 0x01
    29f0:	22 c0       	rjmp	.+68     	; 0x2a36 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 6: keypad_button = 5;
    29f2:	85 e0       	ldi	r24, 0x05	; 5
    29f4:	89 83       	std	Y+1, r24	; 0x01
    29f6:	1f c0       	rjmp	.+62     	; 0x2a36 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 7: keypad_button = 6;
    29f8:	86 e0       	ldi	r24, 0x06	; 6
    29fa:	89 83       	std	Y+1, r24	; 0x01
    29fc:	1c c0       	rjmp	.+56     	; 0x2a36 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 8: keypad_button = '*'; /* ASCII Code of '*' */
    29fe:	8a e2       	ldi	r24, 0x2A	; 42
    2a00:	89 83       	std	Y+1, r24	; 0x01
    2a02:	19 c0       	rjmp	.+50     	; 0x2a36 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 9: keypad_button = 1;
    2a04:	81 e0       	ldi	r24, 0x01	; 1
    2a06:	89 83       	std	Y+1, r24	; 0x01
    2a08:	16 c0       	rjmp	.+44     	; 0x2a36 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 10: keypad_button = 2;
    2a0a:	82 e0       	ldi	r24, 0x02	; 2
    2a0c:	89 83       	std	Y+1, r24	; 0x01
    2a0e:	13 c0       	rjmp	.+38     	; 0x2a36 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 11: keypad_button = 3;
    2a10:	83 e0       	ldi	r24, 0x03	; 3
    2a12:	89 83       	std	Y+1, r24	; 0x01
    2a14:	10 c0       	rjmp	.+32     	; 0x2a36 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 12: keypad_button = '-'; /* ASCII Code of '-' */
    2a16:	8d e2       	ldi	r24, 0x2D	; 45
    2a18:	89 83       	std	Y+1, r24	; 0x01
    2a1a:	0d c0       	rjmp	.+26     	; 0x2a36 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 13: keypad_button = 13;  /* ASCII of Enter */
    2a1c:	8d e0       	ldi	r24, 0x0D	; 13
    2a1e:	89 83       	std	Y+1, r24	; 0x01
    2a20:	0a c0       	rjmp	.+20     	; 0x2a36 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 14: keypad_button = 0;
    2a22:	19 82       	std	Y+1, r1	; 0x01
    2a24:	08 c0       	rjmp	.+16     	; 0x2a36 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 15: keypad_button = '='; /* ASCII Code of '=' */
    2a26:	8d e3       	ldi	r24, 0x3D	; 61
    2a28:	89 83       	std	Y+1, r24	; 0x01
    2a2a:	05 c0       	rjmp	.+10     	; 0x2a36 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 16: keypad_button = '+'; /* ASCII Code of '+' */
    2a2c:	8b e2       	ldi	r24, 0x2B	; 43
    2a2e:	89 83       	std	Y+1, r24	; 0x01
    2a30:	02 c0       	rjmp	.+4      	; 0x2a36 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	default: keypad_button = button_number;
    2a32:	8a 81       	ldd	r24, Y+2	; 0x02
    2a34:	89 83       	std	Y+1, r24	; 0x01
	break;
	}
	return keypad_button;
    2a36:	89 81       	ldd	r24, Y+1	; 0x01
} 
    2a38:	0f 90       	pop	r0
    2a3a:	0f 90       	pop	r0
    2a3c:	0f 90       	pop	r0
    2a3e:	0f 90       	pop	r0
    2a40:	cf 91       	pop	r28
    2a42:	df 91       	pop	r29
    2a44:	08 95       	ret

00002a46 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    2a46:	df 93       	push	r29
    2a48:	cf 93       	push	r28
    2a4a:	cd b7       	in	r28, 0x3d	; 61
    2a4c:	de b7       	in	r29, 0x3e	; 62
    2a4e:	2e 97       	sbiw	r28, 0x0e	; 14
    2a50:	0f b6       	in	r0, 0x3f	; 63
    2a52:	f8 94       	cli
    2a54:	de bf       	out	0x3e, r29	; 62
    2a56:	0f be       	out	0x3f, r0	; 63
    2a58:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    2a5a:	80 e0       	ldi	r24, 0x00	; 0
    2a5c:	61 e0       	ldi	r22, 0x01	; 1
    2a5e:	41 e0       	ldi	r20, 0x01	; 1
    2a60:	0e 94 48 10 	call	0x2090	; 0x2090 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    2a64:	80 e0       	ldi	r24, 0x00	; 0
    2a66:	62 e0       	ldi	r22, 0x02	; 2
    2a68:	41 e0       	ldi	r20, 0x01	; 1
    2a6a:	0e 94 48 10 	call	0x2090	; 0x2090 <GPIO_setupPinDirection>
    2a6e:	80 e0       	ldi	r24, 0x00	; 0
    2a70:	90 e0       	ldi	r25, 0x00	; 0
    2a72:	a0 ea       	ldi	r26, 0xA0	; 160
    2a74:	b1 e4       	ldi	r27, 0x41	; 65
    2a76:	8b 87       	std	Y+11, r24	; 0x0b
    2a78:	9c 87       	std	Y+12, r25	; 0x0c
    2a7a:	ad 87       	std	Y+13, r26	; 0x0d
    2a7c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a80:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a82:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a84:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a86:	20 e0       	ldi	r18, 0x00	; 0
    2a88:	30 e0       	ldi	r19, 0x00	; 0
    2a8a:	4a ef       	ldi	r20, 0xFA	; 250
    2a8c:	54 e4       	ldi	r21, 0x44	; 68
    2a8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a92:	dc 01       	movw	r26, r24
    2a94:	cb 01       	movw	r24, r22
    2a96:	8f 83       	std	Y+7, r24	; 0x07
    2a98:	98 87       	std	Y+8, r25	; 0x08
    2a9a:	a9 87       	std	Y+9, r26	; 0x09
    2a9c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a9e:	6f 81       	ldd	r22, Y+7	; 0x07
    2aa0:	78 85       	ldd	r23, Y+8	; 0x08
    2aa2:	89 85       	ldd	r24, Y+9	; 0x09
    2aa4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2aa6:	20 e0       	ldi	r18, 0x00	; 0
    2aa8:	30 e0       	ldi	r19, 0x00	; 0
    2aaa:	40 e8       	ldi	r20, 0x80	; 128
    2aac:	5f e3       	ldi	r21, 0x3F	; 63
    2aae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ab2:	88 23       	and	r24, r24
    2ab4:	2c f4       	brge	.+10     	; 0x2ac0 <LCD_init+0x7a>
		__ticks = 1;
    2ab6:	81 e0       	ldi	r24, 0x01	; 1
    2ab8:	90 e0       	ldi	r25, 0x00	; 0
    2aba:	9e 83       	std	Y+6, r25	; 0x06
    2abc:	8d 83       	std	Y+5, r24	; 0x05
    2abe:	3f c0       	rjmp	.+126    	; 0x2b3e <LCD_init+0xf8>
	else if (__tmp > 65535)
    2ac0:	6f 81       	ldd	r22, Y+7	; 0x07
    2ac2:	78 85       	ldd	r23, Y+8	; 0x08
    2ac4:	89 85       	ldd	r24, Y+9	; 0x09
    2ac6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ac8:	20 e0       	ldi	r18, 0x00	; 0
    2aca:	3f ef       	ldi	r19, 0xFF	; 255
    2acc:	4f e7       	ldi	r20, 0x7F	; 127
    2ace:	57 e4       	ldi	r21, 0x47	; 71
    2ad0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ad4:	18 16       	cp	r1, r24
    2ad6:	4c f5       	brge	.+82     	; 0x2b2a <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ad8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ada:	7c 85       	ldd	r23, Y+12	; 0x0c
    2adc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ade:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ae0:	20 e0       	ldi	r18, 0x00	; 0
    2ae2:	30 e0       	ldi	r19, 0x00	; 0
    2ae4:	40 e2       	ldi	r20, 0x20	; 32
    2ae6:	51 e4       	ldi	r21, 0x41	; 65
    2ae8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aec:	dc 01       	movw	r26, r24
    2aee:	cb 01       	movw	r24, r22
    2af0:	bc 01       	movw	r22, r24
    2af2:	cd 01       	movw	r24, r26
    2af4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2af8:	dc 01       	movw	r26, r24
    2afa:	cb 01       	movw	r24, r22
    2afc:	9e 83       	std	Y+6, r25	; 0x06
    2afe:	8d 83       	std	Y+5, r24	; 0x05
    2b00:	0f c0       	rjmp	.+30     	; 0x2b20 <LCD_init+0xda>
    2b02:	88 ec       	ldi	r24, 0xC8	; 200
    2b04:	90 e0       	ldi	r25, 0x00	; 0
    2b06:	9c 83       	std	Y+4, r25	; 0x04
    2b08:	8b 83       	std	Y+3, r24	; 0x03
    2b0a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b0c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b0e:	01 97       	sbiw	r24, 0x01	; 1
    2b10:	f1 f7       	brne	.-4      	; 0x2b0e <LCD_init+0xc8>
    2b12:	9c 83       	std	Y+4, r25	; 0x04
    2b14:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b16:	8d 81       	ldd	r24, Y+5	; 0x05
    2b18:	9e 81       	ldd	r25, Y+6	; 0x06
    2b1a:	01 97       	sbiw	r24, 0x01	; 1
    2b1c:	9e 83       	std	Y+6, r25	; 0x06
    2b1e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b20:	8d 81       	ldd	r24, Y+5	; 0x05
    2b22:	9e 81       	ldd	r25, Y+6	; 0x06
    2b24:	00 97       	sbiw	r24, 0x00	; 0
    2b26:	69 f7       	brne	.-38     	; 0x2b02 <LCD_init+0xbc>
    2b28:	14 c0       	rjmp	.+40     	; 0x2b52 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b2a:	6f 81       	ldd	r22, Y+7	; 0x07
    2b2c:	78 85       	ldd	r23, Y+8	; 0x08
    2b2e:	89 85       	ldd	r24, Y+9	; 0x09
    2b30:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b36:	dc 01       	movw	r26, r24
    2b38:	cb 01       	movw	r24, r22
    2b3a:	9e 83       	std	Y+6, r25	; 0x06
    2b3c:	8d 83       	std	Y+5, r24	; 0x05
    2b3e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b40:	9e 81       	ldd	r25, Y+6	; 0x06
    2b42:	9a 83       	std	Y+2, r25	; 0x02
    2b44:	89 83       	std	Y+1, r24	; 0x01
    2b46:	89 81       	ldd	r24, Y+1	; 0x01
    2b48:	9a 81       	ldd	r25, Y+2	; 0x02
    2b4a:	01 97       	sbiw	r24, 0x01	; 1
    2b4c:	f1 f7       	brne	.-4      	; 0x2b4a <LCD_init+0x104>
    2b4e:	9a 83       	std	Y+2, r25	; 0x02
    2b50:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    2b52:	80 e0       	ldi	r24, 0x00	; 0
    2b54:	63 e0       	ldi	r22, 0x03	; 3
    2b56:	41 e0       	ldi	r20, 0x01	; 1
    2b58:	0e 94 48 10 	call	0x2090	; 0x2090 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    2b5c:	80 e0       	ldi	r24, 0x00	; 0
    2b5e:	64 e0       	ldi	r22, 0x04	; 4
    2b60:	41 e0       	ldi	r20, 0x01	; 1
    2b62:	0e 94 48 10 	call	0x2090	; 0x2090 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    2b66:	80 e0       	ldi	r24, 0x00	; 0
    2b68:	65 e0       	ldi	r22, 0x05	; 5
    2b6a:	41 e0       	ldi	r20, 0x01	; 1
    2b6c:	0e 94 48 10 	call	0x2090	; 0x2090 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    2b70:	80 e0       	ldi	r24, 0x00	; 0
    2b72:	66 e0       	ldi	r22, 0x06	; 6
    2b74:	41 e0       	ldi	r20, 0x01	; 1
    2b76:	0e 94 48 10 	call	0x2090	; 0x2090 <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    2b7a:	83 e3       	ldi	r24, 0x33	; 51
    2b7c:	0e 94 d5 15 	call	0x2baa	; 0x2baa <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    2b80:	82 e3       	ldi	r24, 0x32	; 50
    2b82:	0e 94 d5 15 	call	0x2baa	; 0x2baa <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    2b86:	88 e2       	ldi	r24, 0x28	; 40
    2b88:	0e 94 d5 15 	call	0x2baa	; 0x2baa <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    2b8c:	8c e0       	ldi	r24, 0x0C	; 12
    2b8e:	0e 94 d5 15 	call	0x2baa	; 0x2baa <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    2b92:	81 e0       	ldi	r24, 0x01	; 1
    2b94:	0e 94 d5 15 	call	0x2baa	; 0x2baa <LCD_sendCommand>
}
    2b98:	2e 96       	adiw	r28, 0x0e	; 14
    2b9a:	0f b6       	in	r0, 0x3f	; 63
    2b9c:	f8 94       	cli
    2b9e:	de bf       	out	0x3e, r29	; 62
    2ba0:	0f be       	out	0x3f, r0	; 63
    2ba2:	cd bf       	out	0x3d, r28	; 61
    2ba4:	cf 91       	pop	r28
    2ba6:	df 91       	pop	r29
    2ba8:	08 95       	ret

00002baa <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    2baa:	0f 93       	push	r16
    2bac:	1f 93       	push	r17
    2bae:	df 93       	push	r29
    2bb0:	cf 93       	push	r28
    2bb2:	cd b7       	in	r28, 0x3d	; 61
    2bb4:	de b7       	in	r29, 0x3e	; 62
    2bb6:	c3 56       	subi	r28, 0x63	; 99
    2bb8:	d0 40       	sbci	r29, 0x00	; 0
    2bba:	0f b6       	in	r0, 0x3f	; 63
    2bbc:	f8 94       	cli
    2bbe:	de bf       	out	0x3e, r29	; 62
    2bc0:	0f be       	out	0x3f, r0	; 63
    2bc2:	cd bf       	out	0x3d, r28	; 61
    2bc4:	fe 01       	movw	r30, r28
    2bc6:	ed 59       	subi	r30, 0x9D	; 157
    2bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bca:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    2bcc:	80 e0       	ldi	r24, 0x00	; 0
    2bce:	61 e0       	ldi	r22, 0x01	; 1
    2bd0:	40 e0       	ldi	r20, 0x00	; 0
    2bd2:	0e 94 33 11 	call	0x2266	; 0x2266 <GPIO_writePin>
    2bd6:	fe 01       	movw	r30, r28
    2bd8:	e1 5a       	subi	r30, 0xA1	; 161
    2bda:	ff 4f       	sbci	r31, 0xFF	; 255
    2bdc:	80 e0       	ldi	r24, 0x00	; 0
    2bde:	90 e0       	ldi	r25, 0x00	; 0
    2be0:	a0 e8       	ldi	r26, 0x80	; 128
    2be2:	bf e3       	ldi	r27, 0x3F	; 63
    2be4:	80 83       	st	Z, r24
    2be6:	91 83       	std	Z+1, r25	; 0x01
    2be8:	a2 83       	std	Z+2, r26	; 0x02
    2bea:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bec:	8e 01       	movw	r16, r28
    2bee:	05 5a       	subi	r16, 0xA5	; 165
    2bf0:	1f 4f       	sbci	r17, 0xFF	; 255
    2bf2:	fe 01       	movw	r30, r28
    2bf4:	e1 5a       	subi	r30, 0xA1	; 161
    2bf6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf8:	60 81       	ld	r22, Z
    2bfa:	71 81       	ldd	r23, Z+1	; 0x01
    2bfc:	82 81       	ldd	r24, Z+2	; 0x02
    2bfe:	93 81       	ldd	r25, Z+3	; 0x03
    2c00:	20 e0       	ldi	r18, 0x00	; 0
    2c02:	30 e0       	ldi	r19, 0x00	; 0
    2c04:	4a ef       	ldi	r20, 0xFA	; 250
    2c06:	54 e4       	ldi	r21, 0x44	; 68
    2c08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c0c:	dc 01       	movw	r26, r24
    2c0e:	cb 01       	movw	r24, r22
    2c10:	f8 01       	movw	r30, r16
    2c12:	80 83       	st	Z, r24
    2c14:	91 83       	std	Z+1, r25	; 0x01
    2c16:	a2 83       	std	Z+2, r26	; 0x02
    2c18:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c1a:	fe 01       	movw	r30, r28
    2c1c:	e5 5a       	subi	r30, 0xA5	; 165
    2c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c20:	60 81       	ld	r22, Z
    2c22:	71 81       	ldd	r23, Z+1	; 0x01
    2c24:	82 81       	ldd	r24, Z+2	; 0x02
    2c26:	93 81       	ldd	r25, Z+3	; 0x03
    2c28:	20 e0       	ldi	r18, 0x00	; 0
    2c2a:	30 e0       	ldi	r19, 0x00	; 0
    2c2c:	40 e8       	ldi	r20, 0x80	; 128
    2c2e:	5f e3       	ldi	r21, 0x3F	; 63
    2c30:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c34:	88 23       	and	r24, r24
    2c36:	44 f4       	brge	.+16     	; 0x2c48 <LCD_sendCommand+0x9e>
		__ticks = 1;
    2c38:	fe 01       	movw	r30, r28
    2c3a:	e7 5a       	subi	r30, 0xA7	; 167
    2c3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c3e:	81 e0       	ldi	r24, 0x01	; 1
    2c40:	90 e0       	ldi	r25, 0x00	; 0
    2c42:	91 83       	std	Z+1, r25	; 0x01
    2c44:	80 83       	st	Z, r24
    2c46:	64 c0       	rjmp	.+200    	; 0x2d10 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    2c48:	fe 01       	movw	r30, r28
    2c4a:	e5 5a       	subi	r30, 0xA5	; 165
    2c4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c4e:	60 81       	ld	r22, Z
    2c50:	71 81       	ldd	r23, Z+1	; 0x01
    2c52:	82 81       	ldd	r24, Z+2	; 0x02
    2c54:	93 81       	ldd	r25, Z+3	; 0x03
    2c56:	20 e0       	ldi	r18, 0x00	; 0
    2c58:	3f ef       	ldi	r19, 0xFF	; 255
    2c5a:	4f e7       	ldi	r20, 0x7F	; 127
    2c5c:	57 e4       	ldi	r21, 0x47	; 71
    2c5e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c62:	18 16       	cp	r1, r24
    2c64:	0c f0       	brlt	.+2      	; 0x2c68 <LCD_sendCommand+0xbe>
    2c66:	43 c0       	rjmp	.+134    	; 0x2cee <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c68:	fe 01       	movw	r30, r28
    2c6a:	e1 5a       	subi	r30, 0xA1	; 161
    2c6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c6e:	60 81       	ld	r22, Z
    2c70:	71 81       	ldd	r23, Z+1	; 0x01
    2c72:	82 81       	ldd	r24, Z+2	; 0x02
    2c74:	93 81       	ldd	r25, Z+3	; 0x03
    2c76:	20 e0       	ldi	r18, 0x00	; 0
    2c78:	30 e0       	ldi	r19, 0x00	; 0
    2c7a:	40 e2       	ldi	r20, 0x20	; 32
    2c7c:	51 e4       	ldi	r21, 0x41	; 65
    2c7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c82:	dc 01       	movw	r26, r24
    2c84:	cb 01       	movw	r24, r22
    2c86:	8e 01       	movw	r16, r28
    2c88:	07 5a       	subi	r16, 0xA7	; 167
    2c8a:	1f 4f       	sbci	r17, 0xFF	; 255
    2c8c:	bc 01       	movw	r22, r24
    2c8e:	cd 01       	movw	r24, r26
    2c90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c94:	dc 01       	movw	r26, r24
    2c96:	cb 01       	movw	r24, r22
    2c98:	f8 01       	movw	r30, r16
    2c9a:	91 83       	std	Z+1, r25	; 0x01
    2c9c:	80 83       	st	Z, r24
    2c9e:	1f c0       	rjmp	.+62     	; 0x2cde <LCD_sendCommand+0x134>
    2ca0:	fe 01       	movw	r30, r28
    2ca2:	e9 5a       	subi	r30, 0xA9	; 169
    2ca4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca6:	88 ec       	ldi	r24, 0xC8	; 200
    2ca8:	90 e0       	ldi	r25, 0x00	; 0
    2caa:	91 83       	std	Z+1, r25	; 0x01
    2cac:	80 83       	st	Z, r24
    2cae:	fe 01       	movw	r30, r28
    2cb0:	e9 5a       	subi	r30, 0xA9	; 169
    2cb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb4:	80 81       	ld	r24, Z
    2cb6:	91 81       	ldd	r25, Z+1	; 0x01
    2cb8:	01 97       	sbiw	r24, 0x01	; 1
    2cba:	f1 f7       	brne	.-4      	; 0x2cb8 <LCD_sendCommand+0x10e>
    2cbc:	fe 01       	movw	r30, r28
    2cbe:	e9 5a       	subi	r30, 0xA9	; 169
    2cc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc2:	91 83       	std	Z+1, r25	; 0x01
    2cc4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cc6:	de 01       	movw	r26, r28
    2cc8:	a7 5a       	subi	r26, 0xA7	; 167
    2cca:	bf 4f       	sbci	r27, 0xFF	; 255
    2ccc:	fe 01       	movw	r30, r28
    2cce:	e7 5a       	subi	r30, 0xA7	; 167
    2cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd2:	80 81       	ld	r24, Z
    2cd4:	91 81       	ldd	r25, Z+1	; 0x01
    2cd6:	01 97       	sbiw	r24, 0x01	; 1
    2cd8:	11 96       	adiw	r26, 0x01	; 1
    2cda:	9c 93       	st	X, r25
    2cdc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cde:	fe 01       	movw	r30, r28
    2ce0:	e7 5a       	subi	r30, 0xA7	; 167
    2ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce4:	80 81       	ld	r24, Z
    2ce6:	91 81       	ldd	r25, Z+1	; 0x01
    2ce8:	00 97       	sbiw	r24, 0x00	; 0
    2cea:	d1 f6       	brne	.-76     	; 0x2ca0 <LCD_sendCommand+0xf6>
    2cec:	27 c0       	rjmp	.+78     	; 0x2d3c <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cee:	8e 01       	movw	r16, r28
    2cf0:	07 5a       	subi	r16, 0xA7	; 167
    2cf2:	1f 4f       	sbci	r17, 0xFF	; 255
    2cf4:	fe 01       	movw	r30, r28
    2cf6:	e5 5a       	subi	r30, 0xA5	; 165
    2cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cfa:	60 81       	ld	r22, Z
    2cfc:	71 81       	ldd	r23, Z+1	; 0x01
    2cfe:	82 81       	ldd	r24, Z+2	; 0x02
    2d00:	93 81       	ldd	r25, Z+3	; 0x03
    2d02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d06:	dc 01       	movw	r26, r24
    2d08:	cb 01       	movw	r24, r22
    2d0a:	f8 01       	movw	r30, r16
    2d0c:	91 83       	std	Z+1, r25	; 0x01
    2d0e:	80 83       	st	Z, r24
    2d10:	de 01       	movw	r26, r28
    2d12:	ab 5a       	subi	r26, 0xAB	; 171
    2d14:	bf 4f       	sbci	r27, 0xFF	; 255
    2d16:	fe 01       	movw	r30, r28
    2d18:	e7 5a       	subi	r30, 0xA7	; 167
    2d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d1c:	80 81       	ld	r24, Z
    2d1e:	91 81       	ldd	r25, Z+1	; 0x01
    2d20:	8d 93       	st	X+, r24
    2d22:	9c 93       	st	X, r25
    2d24:	fe 01       	movw	r30, r28
    2d26:	eb 5a       	subi	r30, 0xAB	; 171
    2d28:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2a:	80 81       	ld	r24, Z
    2d2c:	91 81       	ldd	r25, Z+1	; 0x01
    2d2e:	01 97       	sbiw	r24, 0x01	; 1
    2d30:	f1 f7       	brne	.-4      	; 0x2d2e <LCD_sendCommand+0x184>
    2d32:	fe 01       	movw	r30, r28
    2d34:	eb 5a       	subi	r30, 0xAB	; 171
    2d36:	ff 4f       	sbci	r31, 0xFF	; 255
    2d38:	91 83       	std	Z+1, r25	; 0x01
    2d3a:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2d3c:	80 e0       	ldi	r24, 0x00	; 0
    2d3e:	62 e0       	ldi	r22, 0x02	; 2
    2d40:	41 e0       	ldi	r20, 0x01	; 1
    2d42:	0e 94 33 11 	call	0x2266	; 0x2266 <GPIO_writePin>
    2d46:	fe 01       	movw	r30, r28
    2d48:	ef 5a       	subi	r30, 0xAF	; 175
    2d4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4c:	80 e0       	ldi	r24, 0x00	; 0
    2d4e:	90 e0       	ldi	r25, 0x00	; 0
    2d50:	a0 e8       	ldi	r26, 0x80	; 128
    2d52:	bf e3       	ldi	r27, 0x3F	; 63
    2d54:	80 83       	st	Z, r24
    2d56:	91 83       	std	Z+1, r25	; 0x01
    2d58:	a2 83       	std	Z+2, r26	; 0x02
    2d5a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d5c:	8e 01       	movw	r16, r28
    2d5e:	03 5b       	subi	r16, 0xB3	; 179
    2d60:	1f 4f       	sbci	r17, 0xFF	; 255
    2d62:	fe 01       	movw	r30, r28
    2d64:	ef 5a       	subi	r30, 0xAF	; 175
    2d66:	ff 4f       	sbci	r31, 0xFF	; 255
    2d68:	60 81       	ld	r22, Z
    2d6a:	71 81       	ldd	r23, Z+1	; 0x01
    2d6c:	82 81       	ldd	r24, Z+2	; 0x02
    2d6e:	93 81       	ldd	r25, Z+3	; 0x03
    2d70:	20 e0       	ldi	r18, 0x00	; 0
    2d72:	30 e0       	ldi	r19, 0x00	; 0
    2d74:	4a ef       	ldi	r20, 0xFA	; 250
    2d76:	54 e4       	ldi	r21, 0x44	; 68
    2d78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d7c:	dc 01       	movw	r26, r24
    2d7e:	cb 01       	movw	r24, r22
    2d80:	f8 01       	movw	r30, r16
    2d82:	80 83       	st	Z, r24
    2d84:	91 83       	std	Z+1, r25	; 0x01
    2d86:	a2 83       	std	Z+2, r26	; 0x02
    2d88:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d8a:	fe 01       	movw	r30, r28
    2d8c:	e3 5b       	subi	r30, 0xB3	; 179
    2d8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d90:	60 81       	ld	r22, Z
    2d92:	71 81       	ldd	r23, Z+1	; 0x01
    2d94:	82 81       	ldd	r24, Z+2	; 0x02
    2d96:	93 81       	ldd	r25, Z+3	; 0x03
    2d98:	20 e0       	ldi	r18, 0x00	; 0
    2d9a:	30 e0       	ldi	r19, 0x00	; 0
    2d9c:	40 e8       	ldi	r20, 0x80	; 128
    2d9e:	5f e3       	ldi	r21, 0x3F	; 63
    2da0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2da4:	88 23       	and	r24, r24
    2da6:	44 f4       	brge	.+16     	; 0x2db8 <LCD_sendCommand+0x20e>
		__ticks = 1;
    2da8:	fe 01       	movw	r30, r28
    2daa:	e5 5b       	subi	r30, 0xB5	; 181
    2dac:	ff 4f       	sbci	r31, 0xFF	; 255
    2dae:	81 e0       	ldi	r24, 0x01	; 1
    2db0:	90 e0       	ldi	r25, 0x00	; 0
    2db2:	91 83       	std	Z+1, r25	; 0x01
    2db4:	80 83       	st	Z, r24
    2db6:	64 c0       	rjmp	.+200    	; 0x2e80 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    2db8:	fe 01       	movw	r30, r28
    2dba:	e3 5b       	subi	r30, 0xB3	; 179
    2dbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dbe:	60 81       	ld	r22, Z
    2dc0:	71 81       	ldd	r23, Z+1	; 0x01
    2dc2:	82 81       	ldd	r24, Z+2	; 0x02
    2dc4:	93 81       	ldd	r25, Z+3	; 0x03
    2dc6:	20 e0       	ldi	r18, 0x00	; 0
    2dc8:	3f ef       	ldi	r19, 0xFF	; 255
    2dca:	4f e7       	ldi	r20, 0x7F	; 127
    2dcc:	57 e4       	ldi	r21, 0x47	; 71
    2dce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2dd2:	18 16       	cp	r1, r24
    2dd4:	0c f0       	brlt	.+2      	; 0x2dd8 <LCD_sendCommand+0x22e>
    2dd6:	43 c0       	rjmp	.+134    	; 0x2e5e <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dd8:	fe 01       	movw	r30, r28
    2dda:	ef 5a       	subi	r30, 0xAF	; 175
    2ddc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dde:	60 81       	ld	r22, Z
    2de0:	71 81       	ldd	r23, Z+1	; 0x01
    2de2:	82 81       	ldd	r24, Z+2	; 0x02
    2de4:	93 81       	ldd	r25, Z+3	; 0x03
    2de6:	20 e0       	ldi	r18, 0x00	; 0
    2de8:	30 e0       	ldi	r19, 0x00	; 0
    2dea:	40 e2       	ldi	r20, 0x20	; 32
    2dec:	51 e4       	ldi	r21, 0x41	; 65
    2dee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2df2:	dc 01       	movw	r26, r24
    2df4:	cb 01       	movw	r24, r22
    2df6:	8e 01       	movw	r16, r28
    2df8:	05 5b       	subi	r16, 0xB5	; 181
    2dfa:	1f 4f       	sbci	r17, 0xFF	; 255
    2dfc:	bc 01       	movw	r22, r24
    2dfe:	cd 01       	movw	r24, r26
    2e00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e04:	dc 01       	movw	r26, r24
    2e06:	cb 01       	movw	r24, r22
    2e08:	f8 01       	movw	r30, r16
    2e0a:	91 83       	std	Z+1, r25	; 0x01
    2e0c:	80 83       	st	Z, r24
    2e0e:	1f c0       	rjmp	.+62     	; 0x2e4e <LCD_sendCommand+0x2a4>
    2e10:	fe 01       	movw	r30, r28
    2e12:	e7 5b       	subi	r30, 0xB7	; 183
    2e14:	ff 4f       	sbci	r31, 0xFF	; 255
    2e16:	88 ec       	ldi	r24, 0xC8	; 200
    2e18:	90 e0       	ldi	r25, 0x00	; 0
    2e1a:	91 83       	std	Z+1, r25	; 0x01
    2e1c:	80 83       	st	Z, r24
    2e1e:	fe 01       	movw	r30, r28
    2e20:	e7 5b       	subi	r30, 0xB7	; 183
    2e22:	ff 4f       	sbci	r31, 0xFF	; 255
    2e24:	80 81       	ld	r24, Z
    2e26:	91 81       	ldd	r25, Z+1	; 0x01
    2e28:	01 97       	sbiw	r24, 0x01	; 1
    2e2a:	f1 f7       	brne	.-4      	; 0x2e28 <LCD_sendCommand+0x27e>
    2e2c:	fe 01       	movw	r30, r28
    2e2e:	e7 5b       	subi	r30, 0xB7	; 183
    2e30:	ff 4f       	sbci	r31, 0xFF	; 255
    2e32:	91 83       	std	Z+1, r25	; 0x01
    2e34:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e36:	de 01       	movw	r26, r28
    2e38:	a5 5b       	subi	r26, 0xB5	; 181
    2e3a:	bf 4f       	sbci	r27, 0xFF	; 255
    2e3c:	fe 01       	movw	r30, r28
    2e3e:	e5 5b       	subi	r30, 0xB5	; 181
    2e40:	ff 4f       	sbci	r31, 0xFF	; 255
    2e42:	80 81       	ld	r24, Z
    2e44:	91 81       	ldd	r25, Z+1	; 0x01
    2e46:	01 97       	sbiw	r24, 0x01	; 1
    2e48:	11 96       	adiw	r26, 0x01	; 1
    2e4a:	9c 93       	st	X, r25
    2e4c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e4e:	fe 01       	movw	r30, r28
    2e50:	e5 5b       	subi	r30, 0xB5	; 181
    2e52:	ff 4f       	sbci	r31, 0xFF	; 255
    2e54:	80 81       	ld	r24, Z
    2e56:	91 81       	ldd	r25, Z+1	; 0x01
    2e58:	00 97       	sbiw	r24, 0x00	; 0
    2e5a:	d1 f6       	brne	.-76     	; 0x2e10 <LCD_sendCommand+0x266>
    2e5c:	27 c0       	rjmp	.+78     	; 0x2eac <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e5e:	8e 01       	movw	r16, r28
    2e60:	05 5b       	subi	r16, 0xB5	; 181
    2e62:	1f 4f       	sbci	r17, 0xFF	; 255
    2e64:	fe 01       	movw	r30, r28
    2e66:	e3 5b       	subi	r30, 0xB3	; 179
    2e68:	ff 4f       	sbci	r31, 0xFF	; 255
    2e6a:	60 81       	ld	r22, Z
    2e6c:	71 81       	ldd	r23, Z+1	; 0x01
    2e6e:	82 81       	ldd	r24, Z+2	; 0x02
    2e70:	93 81       	ldd	r25, Z+3	; 0x03
    2e72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e76:	dc 01       	movw	r26, r24
    2e78:	cb 01       	movw	r24, r22
    2e7a:	f8 01       	movw	r30, r16
    2e7c:	91 83       	std	Z+1, r25	; 0x01
    2e7e:	80 83       	st	Z, r24
    2e80:	de 01       	movw	r26, r28
    2e82:	a9 5b       	subi	r26, 0xB9	; 185
    2e84:	bf 4f       	sbci	r27, 0xFF	; 255
    2e86:	fe 01       	movw	r30, r28
    2e88:	e5 5b       	subi	r30, 0xB5	; 181
    2e8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e8c:	80 81       	ld	r24, Z
    2e8e:	91 81       	ldd	r25, Z+1	; 0x01
    2e90:	8d 93       	st	X+, r24
    2e92:	9c 93       	st	X, r25
    2e94:	fe 01       	movw	r30, r28
    2e96:	e9 5b       	subi	r30, 0xB9	; 185
    2e98:	ff 4f       	sbci	r31, 0xFF	; 255
    2e9a:	80 81       	ld	r24, Z
    2e9c:	91 81       	ldd	r25, Z+1	; 0x01
    2e9e:	01 97       	sbiw	r24, 0x01	; 1
    2ea0:	f1 f7       	brne	.-4      	; 0x2e9e <LCD_sendCommand+0x2f4>
    2ea2:	fe 01       	movw	r30, r28
    2ea4:	e9 5b       	subi	r30, 0xB9	; 185
    2ea6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea8:	91 83       	std	Z+1, r25	; 0x01
    2eaa:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    2eac:	fe 01       	movw	r30, r28
    2eae:	ed 59       	subi	r30, 0x9D	; 157
    2eb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb2:	80 81       	ld	r24, Z
    2eb4:	88 2f       	mov	r24, r24
    2eb6:	90 e0       	ldi	r25, 0x00	; 0
    2eb8:	80 71       	andi	r24, 0x10	; 16
    2eba:	90 70       	andi	r25, 0x00	; 0
    2ebc:	95 95       	asr	r25
    2ebe:	87 95       	ror	r24
    2ec0:	95 95       	asr	r25
    2ec2:	87 95       	ror	r24
    2ec4:	95 95       	asr	r25
    2ec6:	87 95       	ror	r24
    2ec8:	95 95       	asr	r25
    2eca:	87 95       	ror	r24
    2ecc:	98 2f       	mov	r25, r24
    2ece:	80 e0       	ldi	r24, 0x00	; 0
    2ed0:	63 e0       	ldi	r22, 0x03	; 3
    2ed2:	49 2f       	mov	r20, r25
    2ed4:	0e 94 33 11 	call	0x2266	; 0x2266 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    2ed8:	fe 01       	movw	r30, r28
    2eda:	ed 59       	subi	r30, 0x9D	; 157
    2edc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ede:	80 81       	ld	r24, Z
    2ee0:	88 2f       	mov	r24, r24
    2ee2:	90 e0       	ldi	r25, 0x00	; 0
    2ee4:	80 72       	andi	r24, 0x20	; 32
    2ee6:	90 70       	andi	r25, 0x00	; 0
    2ee8:	95 95       	asr	r25
    2eea:	87 95       	ror	r24
    2eec:	95 95       	asr	r25
    2eee:	87 95       	ror	r24
    2ef0:	95 95       	asr	r25
    2ef2:	87 95       	ror	r24
    2ef4:	95 95       	asr	r25
    2ef6:	87 95       	ror	r24
    2ef8:	95 95       	asr	r25
    2efa:	87 95       	ror	r24
    2efc:	98 2f       	mov	r25, r24
    2efe:	80 e0       	ldi	r24, 0x00	; 0
    2f00:	64 e0       	ldi	r22, 0x04	; 4
    2f02:	49 2f       	mov	r20, r25
    2f04:	0e 94 33 11 	call	0x2266	; 0x2266 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    2f08:	fe 01       	movw	r30, r28
    2f0a:	ed 59       	subi	r30, 0x9D	; 157
    2f0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f0e:	80 81       	ld	r24, Z
    2f10:	88 2f       	mov	r24, r24
    2f12:	90 e0       	ldi	r25, 0x00	; 0
    2f14:	80 74       	andi	r24, 0x40	; 64
    2f16:	90 70       	andi	r25, 0x00	; 0
    2f18:	08 2e       	mov	r0, r24
    2f1a:	89 2f       	mov	r24, r25
    2f1c:	00 0c       	add	r0, r0
    2f1e:	88 1f       	adc	r24, r24
    2f20:	99 0b       	sbc	r25, r25
    2f22:	00 0c       	add	r0, r0
    2f24:	88 1f       	adc	r24, r24
    2f26:	99 1f       	adc	r25, r25
    2f28:	98 2f       	mov	r25, r24
    2f2a:	80 e0       	ldi	r24, 0x00	; 0
    2f2c:	65 e0       	ldi	r22, 0x05	; 5
    2f2e:	49 2f       	mov	r20, r25
    2f30:	0e 94 33 11 	call	0x2266	; 0x2266 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    2f34:	fe 01       	movw	r30, r28
    2f36:	ed 59       	subi	r30, 0x9D	; 157
    2f38:	ff 4f       	sbci	r31, 0xFF	; 255
    2f3a:	80 81       	ld	r24, Z
    2f3c:	98 2f       	mov	r25, r24
    2f3e:	99 1f       	adc	r25, r25
    2f40:	99 27       	eor	r25, r25
    2f42:	99 1f       	adc	r25, r25
    2f44:	80 e0       	ldi	r24, 0x00	; 0
    2f46:	66 e0       	ldi	r22, 0x06	; 6
    2f48:	49 2f       	mov	r20, r25
    2f4a:	0e 94 33 11 	call	0x2266	; 0x2266 <GPIO_writePin>
    2f4e:	fe 01       	movw	r30, r28
    2f50:	ed 5b       	subi	r30, 0xBD	; 189
    2f52:	ff 4f       	sbci	r31, 0xFF	; 255
    2f54:	80 e0       	ldi	r24, 0x00	; 0
    2f56:	90 e0       	ldi	r25, 0x00	; 0
    2f58:	a0 e8       	ldi	r26, 0x80	; 128
    2f5a:	bf e3       	ldi	r27, 0x3F	; 63
    2f5c:	80 83       	st	Z, r24
    2f5e:	91 83       	std	Z+1, r25	; 0x01
    2f60:	a2 83       	std	Z+2, r26	; 0x02
    2f62:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f64:	8e 01       	movw	r16, r28
    2f66:	01 5c       	subi	r16, 0xC1	; 193
    2f68:	1f 4f       	sbci	r17, 0xFF	; 255
    2f6a:	fe 01       	movw	r30, r28
    2f6c:	ed 5b       	subi	r30, 0xBD	; 189
    2f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f70:	60 81       	ld	r22, Z
    2f72:	71 81       	ldd	r23, Z+1	; 0x01
    2f74:	82 81       	ldd	r24, Z+2	; 0x02
    2f76:	93 81       	ldd	r25, Z+3	; 0x03
    2f78:	20 e0       	ldi	r18, 0x00	; 0
    2f7a:	30 e0       	ldi	r19, 0x00	; 0
    2f7c:	4a ef       	ldi	r20, 0xFA	; 250
    2f7e:	54 e4       	ldi	r21, 0x44	; 68
    2f80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f84:	dc 01       	movw	r26, r24
    2f86:	cb 01       	movw	r24, r22
    2f88:	f8 01       	movw	r30, r16
    2f8a:	80 83       	st	Z, r24
    2f8c:	91 83       	std	Z+1, r25	; 0x01
    2f8e:	a2 83       	std	Z+2, r26	; 0x02
    2f90:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f92:	fe 01       	movw	r30, r28
    2f94:	ff 96       	adiw	r30, 0x3f	; 63
    2f96:	60 81       	ld	r22, Z
    2f98:	71 81       	ldd	r23, Z+1	; 0x01
    2f9a:	82 81       	ldd	r24, Z+2	; 0x02
    2f9c:	93 81       	ldd	r25, Z+3	; 0x03
    2f9e:	20 e0       	ldi	r18, 0x00	; 0
    2fa0:	30 e0       	ldi	r19, 0x00	; 0
    2fa2:	40 e8       	ldi	r20, 0x80	; 128
    2fa4:	5f e3       	ldi	r21, 0x3F	; 63
    2fa6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2faa:	88 23       	and	r24, r24
    2fac:	2c f4       	brge	.+10     	; 0x2fb8 <LCD_sendCommand+0x40e>
		__ticks = 1;
    2fae:	81 e0       	ldi	r24, 0x01	; 1
    2fb0:	90 e0       	ldi	r25, 0x00	; 0
    2fb2:	9e af       	std	Y+62, r25	; 0x3e
    2fb4:	8d af       	std	Y+61, r24	; 0x3d
    2fb6:	46 c0       	rjmp	.+140    	; 0x3044 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    2fb8:	fe 01       	movw	r30, r28
    2fba:	ff 96       	adiw	r30, 0x3f	; 63
    2fbc:	60 81       	ld	r22, Z
    2fbe:	71 81       	ldd	r23, Z+1	; 0x01
    2fc0:	82 81       	ldd	r24, Z+2	; 0x02
    2fc2:	93 81       	ldd	r25, Z+3	; 0x03
    2fc4:	20 e0       	ldi	r18, 0x00	; 0
    2fc6:	3f ef       	ldi	r19, 0xFF	; 255
    2fc8:	4f e7       	ldi	r20, 0x7F	; 127
    2fca:	57 e4       	ldi	r21, 0x47	; 71
    2fcc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fd0:	18 16       	cp	r1, r24
    2fd2:	64 f5       	brge	.+88     	; 0x302c <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fd4:	fe 01       	movw	r30, r28
    2fd6:	ed 5b       	subi	r30, 0xBD	; 189
    2fd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fda:	60 81       	ld	r22, Z
    2fdc:	71 81       	ldd	r23, Z+1	; 0x01
    2fde:	82 81       	ldd	r24, Z+2	; 0x02
    2fe0:	93 81       	ldd	r25, Z+3	; 0x03
    2fe2:	20 e0       	ldi	r18, 0x00	; 0
    2fe4:	30 e0       	ldi	r19, 0x00	; 0
    2fe6:	40 e2       	ldi	r20, 0x20	; 32
    2fe8:	51 e4       	ldi	r21, 0x41	; 65
    2fea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fee:	dc 01       	movw	r26, r24
    2ff0:	cb 01       	movw	r24, r22
    2ff2:	bc 01       	movw	r22, r24
    2ff4:	cd 01       	movw	r24, r26
    2ff6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ffa:	dc 01       	movw	r26, r24
    2ffc:	cb 01       	movw	r24, r22
    2ffe:	9e af       	std	Y+62, r25	; 0x3e
    3000:	8d af       	std	Y+61, r24	; 0x3d
    3002:	0f c0       	rjmp	.+30     	; 0x3022 <LCD_sendCommand+0x478>
    3004:	88 ec       	ldi	r24, 0xC8	; 200
    3006:	90 e0       	ldi	r25, 0x00	; 0
    3008:	9c af       	std	Y+60, r25	; 0x3c
    300a:	8b af       	std	Y+59, r24	; 0x3b
    300c:	8b ad       	ldd	r24, Y+59	; 0x3b
    300e:	9c ad       	ldd	r25, Y+60	; 0x3c
    3010:	01 97       	sbiw	r24, 0x01	; 1
    3012:	f1 f7       	brne	.-4      	; 0x3010 <LCD_sendCommand+0x466>
    3014:	9c af       	std	Y+60, r25	; 0x3c
    3016:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3018:	8d ad       	ldd	r24, Y+61	; 0x3d
    301a:	9e ad       	ldd	r25, Y+62	; 0x3e
    301c:	01 97       	sbiw	r24, 0x01	; 1
    301e:	9e af       	std	Y+62, r25	; 0x3e
    3020:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3022:	8d ad       	ldd	r24, Y+61	; 0x3d
    3024:	9e ad       	ldd	r25, Y+62	; 0x3e
    3026:	00 97       	sbiw	r24, 0x00	; 0
    3028:	69 f7       	brne	.-38     	; 0x3004 <LCD_sendCommand+0x45a>
    302a:	16 c0       	rjmp	.+44     	; 0x3058 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    302c:	fe 01       	movw	r30, r28
    302e:	ff 96       	adiw	r30, 0x3f	; 63
    3030:	60 81       	ld	r22, Z
    3032:	71 81       	ldd	r23, Z+1	; 0x01
    3034:	82 81       	ldd	r24, Z+2	; 0x02
    3036:	93 81       	ldd	r25, Z+3	; 0x03
    3038:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    303c:	dc 01       	movw	r26, r24
    303e:	cb 01       	movw	r24, r22
    3040:	9e af       	std	Y+62, r25	; 0x3e
    3042:	8d af       	std	Y+61, r24	; 0x3d
    3044:	8d ad       	ldd	r24, Y+61	; 0x3d
    3046:	9e ad       	ldd	r25, Y+62	; 0x3e
    3048:	9a af       	std	Y+58, r25	; 0x3a
    304a:	89 af       	std	Y+57, r24	; 0x39
    304c:	89 ad       	ldd	r24, Y+57	; 0x39
    304e:	9a ad       	ldd	r25, Y+58	; 0x3a
    3050:	01 97       	sbiw	r24, 0x01	; 1
    3052:	f1 f7       	brne	.-4      	; 0x3050 <LCD_sendCommand+0x4a6>
    3054:	9a af       	std	Y+58, r25	; 0x3a
    3056:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    3058:	80 e0       	ldi	r24, 0x00	; 0
    305a:	62 e0       	ldi	r22, 0x02	; 2
    305c:	40 e0       	ldi	r20, 0x00	; 0
    305e:	0e 94 33 11 	call	0x2266	; 0x2266 <GPIO_writePin>
    3062:	80 e0       	ldi	r24, 0x00	; 0
    3064:	90 e0       	ldi	r25, 0x00	; 0
    3066:	a0 e8       	ldi	r26, 0x80	; 128
    3068:	bf e3       	ldi	r27, 0x3F	; 63
    306a:	8d ab       	std	Y+53, r24	; 0x35
    306c:	9e ab       	std	Y+54, r25	; 0x36
    306e:	af ab       	std	Y+55, r26	; 0x37
    3070:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3072:	6d a9       	ldd	r22, Y+53	; 0x35
    3074:	7e a9       	ldd	r23, Y+54	; 0x36
    3076:	8f a9       	ldd	r24, Y+55	; 0x37
    3078:	98 ad       	ldd	r25, Y+56	; 0x38
    307a:	20 e0       	ldi	r18, 0x00	; 0
    307c:	30 e0       	ldi	r19, 0x00	; 0
    307e:	4a ef       	ldi	r20, 0xFA	; 250
    3080:	54 e4       	ldi	r21, 0x44	; 68
    3082:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3086:	dc 01       	movw	r26, r24
    3088:	cb 01       	movw	r24, r22
    308a:	89 ab       	std	Y+49, r24	; 0x31
    308c:	9a ab       	std	Y+50, r25	; 0x32
    308e:	ab ab       	std	Y+51, r26	; 0x33
    3090:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3092:	69 a9       	ldd	r22, Y+49	; 0x31
    3094:	7a a9       	ldd	r23, Y+50	; 0x32
    3096:	8b a9       	ldd	r24, Y+51	; 0x33
    3098:	9c a9       	ldd	r25, Y+52	; 0x34
    309a:	20 e0       	ldi	r18, 0x00	; 0
    309c:	30 e0       	ldi	r19, 0x00	; 0
    309e:	40 e8       	ldi	r20, 0x80	; 128
    30a0:	5f e3       	ldi	r21, 0x3F	; 63
    30a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30a6:	88 23       	and	r24, r24
    30a8:	2c f4       	brge	.+10     	; 0x30b4 <LCD_sendCommand+0x50a>
		__ticks = 1;
    30aa:	81 e0       	ldi	r24, 0x01	; 1
    30ac:	90 e0       	ldi	r25, 0x00	; 0
    30ae:	98 ab       	std	Y+48, r25	; 0x30
    30b0:	8f a7       	std	Y+47, r24	; 0x2f
    30b2:	3f c0       	rjmp	.+126    	; 0x3132 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    30b4:	69 a9       	ldd	r22, Y+49	; 0x31
    30b6:	7a a9       	ldd	r23, Y+50	; 0x32
    30b8:	8b a9       	ldd	r24, Y+51	; 0x33
    30ba:	9c a9       	ldd	r25, Y+52	; 0x34
    30bc:	20 e0       	ldi	r18, 0x00	; 0
    30be:	3f ef       	ldi	r19, 0xFF	; 255
    30c0:	4f e7       	ldi	r20, 0x7F	; 127
    30c2:	57 e4       	ldi	r21, 0x47	; 71
    30c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30c8:	18 16       	cp	r1, r24
    30ca:	4c f5       	brge	.+82     	; 0x311e <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30cc:	6d a9       	ldd	r22, Y+53	; 0x35
    30ce:	7e a9       	ldd	r23, Y+54	; 0x36
    30d0:	8f a9       	ldd	r24, Y+55	; 0x37
    30d2:	98 ad       	ldd	r25, Y+56	; 0x38
    30d4:	20 e0       	ldi	r18, 0x00	; 0
    30d6:	30 e0       	ldi	r19, 0x00	; 0
    30d8:	40 e2       	ldi	r20, 0x20	; 32
    30da:	51 e4       	ldi	r21, 0x41	; 65
    30dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30e0:	dc 01       	movw	r26, r24
    30e2:	cb 01       	movw	r24, r22
    30e4:	bc 01       	movw	r22, r24
    30e6:	cd 01       	movw	r24, r26
    30e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30ec:	dc 01       	movw	r26, r24
    30ee:	cb 01       	movw	r24, r22
    30f0:	98 ab       	std	Y+48, r25	; 0x30
    30f2:	8f a7       	std	Y+47, r24	; 0x2f
    30f4:	0f c0       	rjmp	.+30     	; 0x3114 <LCD_sendCommand+0x56a>
    30f6:	88 ec       	ldi	r24, 0xC8	; 200
    30f8:	90 e0       	ldi	r25, 0x00	; 0
    30fa:	9e a7       	std	Y+46, r25	; 0x2e
    30fc:	8d a7       	std	Y+45, r24	; 0x2d
    30fe:	8d a5       	ldd	r24, Y+45	; 0x2d
    3100:	9e a5       	ldd	r25, Y+46	; 0x2e
    3102:	01 97       	sbiw	r24, 0x01	; 1
    3104:	f1 f7       	brne	.-4      	; 0x3102 <LCD_sendCommand+0x558>
    3106:	9e a7       	std	Y+46, r25	; 0x2e
    3108:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    310a:	8f a5       	ldd	r24, Y+47	; 0x2f
    310c:	98 a9       	ldd	r25, Y+48	; 0x30
    310e:	01 97       	sbiw	r24, 0x01	; 1
    3110:	98 ab       	std	Y+48, r25	; 0x30
    3112:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3114:	8f a5       	ldd	r24, Y+47	; 0x2f
    3116:	98 a9       	ldd	r25, Y+48	; 0x30
    3118:	00 97       	sbiw	r24, 0x00	; 0
    311a:	69 f7       	brne	.-38     	; 0x30f6 <LCD_sendCommand+0x54c>
    311c:	14 c0       	rjmp	.+40     	; 0x3146 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    311e:	69 a9       	ldd	r22, Y+49	; 0x31
    3120:	7a a9       	ldd	r23, Y+50	; 0x32
    3122:	8b a9       	ldd	r24, Y+51	; 0x33
    3124:	9c a9       	ldd	r25, Y+52	; 0x34
    3126:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    312a:	dc 01       	movw	r26, r24
    312c:	cb 01       	movw	r24, r22
    312e:	98 ab       	std	Y+48, r25	; 0x30
    3130:	8f a7       	std	Y+47, r24	; 0x2f
    3132:	8f a5       	ldd	r24, Y+47	; 0x2f
    3134:	98 a9       	ldd	r25, Y+48	; 0x30
    3136:	9c a7       	std	Y+44, r25	; 0x2c
    3138:	8b a7       	std	Y+43, r24	; 0x2b
    313a:	8b a5       	ldd	r24, Y+43	; 0x2b
    313c:	9c a5       	ldd	r25, Y+44	; 0x2c
    313e:	01 97       	sbiw	r24, 0x01	; 1
    3140:	f1 f7       	brne	.-4      	; 0x313e <LCD_sendCommand+0x594>
    3142:	9c a7       	std	Y+44, r25	; 0x2c
    3144:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    3146:	80 e0       	ldi	r24, 0x00	; 0
    3148:	62 e0       	ldi	r22, 0x02	; 2
    314a:	41 e0       	ldi	r20, 0x01	; 1
    314c:	0e 94 33 11 	call	0x2266	; 0x2266 <GPIO_writePin>
    3150:	80 e0       	ldi	r24, 0x00	; 0
    3152:	90 e0       	ldi	r25, 0x00	; 0
    3154:	a0 e8       	ldi	r26, 0x80	; 128
    3156:	bf e3       	ldi	r27, 0x3F	; 63
    3158:	8f a3       	std	Y+39, r24	; 0x27
    315a:	98 a7       	std	Y+40, r25	; 0x28
    315c:	a9 a7       	std	Y+41, r26	; 0x29
    315e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3160:	6f a1       	ldd	r22, Y+39	; 0x27
    3162:	78 a5       	ldd	r23, Y+40	; 0x28
    3164:	89 a5       	ldd	r24, Y+41	; 0x29
    3166:	9a a5       	ldd	r25, Y+42	; 0x2a
    3168:	20 e0       	ldi	r18, 0x00	; 0
    316a:	30 e0       	ldi	r19, 0x00	; 0
    316c:	4a ef       	ldi	r20, 0xFA	; 250
    316e:	54 e4       	ldi	r21, 0x44	; 68
    3170:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3174:	dc 01       	movw	r26, r24
    3176:	cb 01       	movw	r24, r22
    3178:	8b a3       	std	Y+35, r24	; 0x23
    317a:	9c a3       	std	Y+36, r25	; 0x24
    317c:	ad a3       	std	Y+37, r26	; 0x25
    317e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3180:	6b a1       	ldd	r22, Y+35	; 0x23
    3182:	7c a1       	ldd	r23, Y+36	; 0x24
    3184:	8d a1       	ldd	r24, Y+37	; 0x25
    3186:	9e a1       	ldd	r25, Y+38	; 0x26
    3188:	20 e0       	ldi	r18, 0x00	; 0
    318a:	30 e0       	ldi	r19, 0x00	; 0
    318c:	40 e8       	ldi	r20, 0x80	; 128
    318e:	5f e3       	ldi	r21, 0x3F	; 63
    3190:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3194:	88 23       	and	r24, r24
    3196:	2c f4       	brge	.+10     	; 0x31a2 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    3198:	81 e0       	ldi	r24, 0x01	; 1
    319a:	90 e0       	ldi	r25, 0x00	; 0
    319c:	9a a3       	std	Y+34, r25	; 0x22
    319e:	89 a3       	std	Y+33, r24	; 0x21
    31a0:	3f c0       	rjmp	.+126    	; 0x3220 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    31a2:	6b a1       	ldd	r22, Y+35	; 0x23
    31a4:	7c a1       	ldd	r23, Y+36	; 0x24
    31a6:	8d a1       	ldd	r24, Y+37	; 0x25
    31a8:	9e a1       	ldd	r25, Y+38	; 0x26
    31aa:	20 e0       	ldi	r18, 0x00	; 0
    31ac:	3f ef       	ldi	r19, 0xFF	; 255
    31ae:	4f e7       	ldi	r20, 0x7F	; 127
    31b0:	57 e4       	ldi	r21, 0x47	; 71
    31b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31b6:	18 16       	cp	r1, r24
    31b8:	4c f5       	brge	.+82     	; 0x320c <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31ba:	6f a1       	ldd	r22, Y+39	; 0x27
    31bc:	78 a5       	ldd	r23, Y+40	; 0x28
    31be:	89 a5       	ldd	r24, Y+41	; 0x29
    31c0:	9a a5       	ldd	r25, Y+42	; 0x2a
    31c2:	20 e0       	ldi	r18, 0x00	; 0
    31c4:	30 e0       	ldi	r19, 0x00	; 0
    31c6:	40 e2       	ldi	r20, 0x20	; 32
    31c8:	51 e4       	ldi	r21, 0x41	; 65
    31ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31ce:	dc 01       	movw	r26, r24
    31d0:	cb 01       	movw	r24, r22
    31d2:	bc 01       	movw	r22, r24
    31d4:	cd 01       	movw	r24, r26
    31d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31da:	dc 01       	movw	r26, r24
    31dc:	cb 01       	movw	r24, r22
    31de:	9a a3       	std	Y+34, r25	; 0x22
    31e0:	89 a3       	std	Y+33, r24	; 0x21
    31e2:	0f c0       	rjmp	.+30     	; 0x3202 <LCD_sendCommand+0x658>
    31e4:	88 ec       	ldi	r24, 0xC8	; 200
    31e6:	90 e0       	ldi	r25, 0x00	; 0
    31e8:	98 a3       	std	Y+32, r25	; 0x20
    31ea:	8f 8f       	std	Y+31, r24	; 0x1f
    31ec:	8f 8d       	ldd	r24, Y+31	; 0x1f
    31ee:	98 a1       	ldd	r25, Y+32	; 0x20
    31f0:	01 97       	sbiw	r24, 0x01	; 1
    31f2:	f1 f7       	brne	.-4      	; 0x31f0 <LCD_sendCommand+0x646>
    31f4:	98 a3       	std	Y+32, r25	; 0x20
    31f6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31f8:	89 a1       	ldd	r24, Y+33	; 0x21
    31fa:	9a a1       	ldd	r25, Y+34	; 0x22
    31fc:	01 97       	sbiw	r24, 0x01	; 1
    31fe:	9a a3       	std	Y+34, r25	; 0x22
    3200:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3202:	89 a1       	ldd	r24, Y+33	; 0x21
    3204:	9a a1       	ldd	r25, Y+34	; 0x22
    3206:	00 97       	sbiw	r24, 0x00	; 0
    3208:	69 f7       	brne	.-38     	; 0x31e4 <LCD_sendCommand+0x63a>
    320a:	14 c0       	rjmp	.+40     	; 0x3234 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    320c:	6b a1       	ldd	r22, Y+35	; 0x23
    320e:	7c a1       	ldd	r23, Y+36	; 0x24
    3210:	8d a1       	ldd	r24, Y+37	; 0x25
    3212:	9e a1       	ldd	r25, Y+38	; 0x26
    3214:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3218:	dc 01       	movw	r26, r24
    321a:	cb 01       	movw	r24, r22
    321c:	9a a3       	std	Y+34, r25	; 0x22
    321e:	89 a3       	std	Y+33, r24	; 0x21
    3220:	89 a1       	ldd	r24, Y+33	; 0x21
    3222:	9a a1       	ldd	r25, Y+34	; 0x22
    3224:	9e 8f       	std	Y+30, r25	; 0x1e
    3226:	8d 8f       	std	Y+29, r24	; 0x1d
    3228:	8d 8d       	ldd	r24, Y+29	; 0x1d
    322a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    322c:	01 97       	sbiw	r24, 0x01	; 1
    322e:	f1 f7       	brne	.-4      	; 0x322c <LCD_sendCommand+0x682>
    3230:	9e 8f       	std	Y+30, r25	; 0x1e
    3232:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    3234:	fe 01       	movw	r30, r28
    3236:	ed 59       	subi	r30, 0x9D	; 157
    3238:	ff 4f       	sbci	r31, 0xFF	; 255
    323a:	80 81       	ld	r24, Z
    323c:	98 2f       	mov	r25, r24
    323e:	91 70       	andi	r25, 0x01	; 1
    3240:	80 e0       	ldi	r24, 0x00	; 0
    3242:	63 e0       	ldi	r22, 0x03	; 3
    3244:	49 2f       	mov	r20, r25
    3246:	0e 94 33 11 	call	0x2266	; 0x2266 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    324a:	fe 01       	movw	r30, r28
    324c:	ed 59       	subi	r30, 0x9D	; 157
    324e:	ff 4f       	sbci	r31, 0xFF	; 255
    3250:	80 81       	ld	r24, Z
    3252:	88 2f       	mov	r24, r24
    3254:	90 e0       	ldi	r25, 0x00	; 0
    3256:	82 70       	andi	r24, 0x02	; 2
    3258:	90 70       	andi	r25, 0x00	; 0
    325a:	95 95       	asr	r25
    325c:	87 95       	ror	r24
    325e:	98 2f       	mov	r25, r24
    3260:	80 e0       	ldi	r24, 0x00	; 0
    3262:	64 e0       	ldi	r22, 0x04	; 4
    3264:	49 2f       	mov	r20, r25
    3266:	0e 94 33 11 	call	0x2266	; 0x2266 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    326a:	fe 01       	movw	r30, r28
    326c:	ed 59       	subi	r30, 0x9D	; 157
    326e:	ff 4f       	sbci	r31, 0xFF	; 255
    3270:	80 81       	ld	r24, Z
    3272:	88 2f       	mov	r24, r24
    3274:	90 e0       	ldi	r25, 0x00	; 0
    3276:	84 70       	andi	r24, 0x04	; 4
    3278:	90 70       	andi	r25, 0x00	; 0
    327a:	95 95       	asr	r25
    327c:	87 95       	ror	r24
    327e:	95 95       	asr	r25
    3280:	87 95       	ror	r24
    3282:	98 2f       	mov	r25, r24
    3284:	80 e0       	ldi	r24, 0x00	; 0
    3286:	65 e0       	ldi	r22, 0x05	; 5
    3288:	49 2f       	mov	r20, r25
    328a:	0e 94 33 11 	call	0x2266	; 0x2266 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    328e:	fe 01       	movw	r30, r28
    3290:	ed 59       	subi	r30, 0x9D	; 157
    3292:	ff 4f       	sbci	r31, 0xFF	; 255
    3294:	80 81       	ld	r24, Z
    3296:	88 2f       	mov	r24, r24
    3298:	90 e0       	ldi	r25, 0x00	; 0
    329a:	88 70       	andi	r24, 0x08	; 8
    329c:	90 70       	andi	r25, 0x00	; 0
    329e:	95 95       	asr	r25
    32a0:	87 95       	ror	r24
    32a2:	95 95       	asr	r25
    32a4:	87 95       	ror	r24
    32a6:	95 95       	asr	r25
    32a8:	87 95       	ror	r24
    32aa:	98 2f       	mov	r25, r24
    32ac:	80 e0       	ldi	r24, 0x00	; 0
    32ae:	66 e0       	ldi	r22, 0x06	; 6
    32b0:	49 2f       	mov	r20, r25
    32b2:	0e 94 33 11 	call	0x2266	; 0x2266 <GPIO_writePin>
    32b6:	80 e0       	ldi	r24, 0x00	; 0
    32b8:	90 e0       	ldi	r25, 0x00	; 0
    32ba:	a0 e8       	ldi	r26, 0x80	; 128
    32bc:	bf e3       	ldi	r27, 0x3F	; 63
    32be:	89 8f       	std	Y+25, r24	; 0x19
    32c0:	9a 8f       	std	Y+26, r25	; 0x1a
    32c2:	ab 8f       	std	Y+27, r26	; 0x1b
    32c4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32c6:	69 8d       	ldd	r22, Y+25	; 0x19
    32c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32ce:	20 e0       	ldi	r18, 0x00	; 0
    32d0:	30 e0       	ldi	r19, 0x00	; 0
    32d2:	4a ef       	ldi	r20, 0xFA	; 250
    32d4:	54 e4       	ldi	r21, 0x44	; 68
    32d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32da:	dc 01       	movw	r26, r24
    32dc:	cb 01       	movw	r24, r22
    32de:	8d 8b       	std	Y+21, r24	; 0x15
    32e0:	9e 8b       	std	Y+22, r25	; 0x16
    32e2:	af 8b       	std	Y+23, r26	; 0x17
    32e4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    32e6:	6d 89       	ldd	r22, Y+21	; 0x15
    32e8:	7e 89       	ldd	r23, Y+22	; 0x16
    32ea:	8f 89       	ldd	r24, Y+23	; 0x17
    32ec:	98 8d       	ldd	r25, Y+24	; 0x18
    32ee:	20 e0       	ldi	r18, 0x00	; 0
    32f0:	30 e0       	ldi	r19, 0x00	; 0
    32f2:	40 e8       	ldi	r20, 0x80	; 128
    32f4:	5f e3       	ldi	r21, 0x3F	; 63
    32f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32fa:	88 23       	and	r24, r24
    32fc:	2c f4       	brge	.+10     	; 0x3308 <LCD_sendCommand+0x75e>
		__ticks = 1;
    32fe:	81 e0       	ldi	r24, 0x01	; 1
    3300:	90 e0       	ldi	r25, 0x00	; 0
    3302:	9c 8b       	std	Y+20, r25	; 0x14
    3304:	8b 8b       	std	Y+19, r24	; 0x13
    3306:	3f c0       	rjmp	.+126    	; 0x3386 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    3308:	6d 89       	ldd	r22, Y+21	; 0x15
    330a:	7e 89       	ldd	r23, Y+22	; 0x16
    330c:	8f 89       	ldd	r24, Y+23	; 0x17
    330e:	98 8d       	ldd	r25, Y+24	; 0x18
    3310:	20 e0       	ldi	r18, 0x00	; 0
    3312:	3f ef       	ldi	r19, 0xFF	; 255
    3314:	4f e7       	ldi	r20, 0x7F	; 127
    3316:	57 e4       	ldi	r21, 0x47	; 71
    3318:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    331c:	18 16       	cp	r1, r24
    331e:	4c f5       	brge	.+82     	; 0x3372 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3320:	69 8d       	ldd	r22, Y+25	; 0x19
    3322:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3324:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3326:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3328:	20 e0       	ldi	r18, 0x00	; 0
    332a:	30 e0       	ldi	r19, 0x00	; 0
    332c:	40 e2       	ldi	r20, 0x20	; 32
    332e:	51 e4       	ldi	r21, 0x41	; 65
    3330:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3334:	dc 01       	movw	r26, r24
    3336:	cb 01       	movw	r24, r22
    3338:	bc 01       	movw	r22, r24
    333a:	cd 01       	movw	r24, r26
    333c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3340:	dc 01       	movw	r26, r24
    3342:	cb 01       	movw	r24, r22
    3344:	9c 8b       	std	Y+20, r25	; 0x14
    3346:	8b 8b       	std	Y+19, r24	; 0x13
    3348:	0f c0       	rjmp	.+30     	; 0x3368 <LCD_sendCommand+0x7be>
    334a:	88 ec       	ldi	r24, 0xC8	; 200
    334c:	90 e0       	ldi	r25, 0x00	; 0
    334e:	9a 8b       	std	Y+18, r25	; 0x12
    3350:	89 8b       	std	Y+17, r24	; 0x11
    3352:	89 89       	ldd	r24, Y+17	; 0x11
    3354:	9a 89       	ldd	r25, Y+18	; 0x12
    3356:	01 97       	sbiw	r24, 0x01	; 1
    3358:	f1 f7       	brne	.-4      	; 0x3356 <LCD_sendCommand+0x7ac>
    335a:	9a 8b       	std	Y+18, r25	; 0x12
    335c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    335e:	8b 89       	ldd	r24, Y+19	; 0x13
    3360:	9c 89       	ldd	r25, Y+20	; 0x14
    3362:	01 97       	sbiw	r24, 0x01	; 1
    3364:	9c 8b       	std	Y+20, r25	; 0x14
    3366:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3368:	8b 89       	ldd	r24, Y+19	; 0x13
    336a:	9c 89       	ldd	r25, Y+20	; 0x14
    336c:	00 97       	sbiw	r24, 0x00	; 0
    336e:	69 f7       	brne	.-38     	; 0x334a <LCD_sendCommand+0x7a0>
    3370:	14 c0       	rjmp	.+40     	; 0x339a <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3372:	6d 89       	ldd	r22, Y+21	; 0x15
    3374:	7e 89       	ldd	r23, Y+22	; 0x16
    3376:	8f 89       	ldd	r24, Y+23	; 0x17
    3378:	98 8d       	ldd	r25, Y+24	; 0x18
    337a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    337e:	dc 01       	movw	r26, r24
    3380:	cb 01       	movw	r24, r22
    3382:	9c 8b       	std	Y+20, r25	; 0x14
    3384:	8b 8b       	std	Y+19, r24	; 0x13
    3386:	8b 89       	ldd	r24, Y+19	; 0x13
    3388:	9c 89       	ldd	r25, Y+20	; 0x14
    338a:	98 8b       	std	Y+16, r25	; 0x10
    338c:	8f 87       	std	Y+15, r24	; 0x0f
    338e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3390:	98 89       	ldd	r25, Y+16	; 0x10
    3392:	01 97       	sbiw	r24, 0x01	; 1
    3394:	f1 f7       	brne	.-4      	; 0x3392 <LCD_sendCommand+0x7e8>
    3396:	98 8b       	std	Y+16, r25	; 0x10
    3398:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    339a:	80 e0       	ldi	r24, 0x00	; 0
    339c:	62 e0       	ldi	r22, 0x02	; 2
    339e:	40 e0       	ldi	r20, 0x00	; 0
    33a0:	0e 94 33 11 	call	0x2266	; 0x2266 <GPIO_writePin>
    33a4:	80 e0       	ldi	r24, 0x00	; 0
    33a6:	90 e0       	ldi	r25, 0x00	; 0
    33a8:	a0 e8       	ldi	r26, 0x80	; 128
    33aa:	bf e3       	ldi	r27, 0x3F	; 63
    33ac:	8b 87       	std	Y+11, r24	; 0x0b
    33ae:	9c 87       	std	Y+12, r25	; 0x0c
    33b0:	ad 87       	std	Y+13, r26	; 0x0d
    33b2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    33b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    33b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    33ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    33bc:	20 e0       	ldi	r18, 0x00	; 0
    33be:	30 e0       	ldi	r19, 0x00	; 0
    33c0:	4a ef       	ldi	r20, 0xFA	; 250
    33c2:	54 e4       	ldi	r21, 0x44	; 68
    33c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33c8:	dc 01       	movw	r26, r24
    33ca:	cb 01       	movw	r24, r22
    33cc:	8f 83       	std	Y+7, r24	; 0x07
    33ce:	98 87       	std	Y+8, r25	; 0x08
    33d0:	a9 87       	std	Y+9, r26	; 0x09
    33d2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33d4:	6f 81       	ldd	r22, Y+7	; 0x07
    33d6:	78 85       	ldd	r23, Y+8	; 0x08
    33d8:	89 85       	ldd	r24, Y+9	; 0x09
    33da:	9a 85       	ldd	r25, Y+10	; 0x0a
    33dc:	20 e0       	ldi	r18, 0x00	; 0
    33de:	30 e0       	ldi	r19, 0x00	; 0
    33e0:	40 e8       	ldi	r20, 0x80	; 128
    33e2:	5f e3       	ldi	r21, 0x3F	; 63
    33e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33e8:	88 23       	and	r24, r24
    33ea:	2c f4       	brge	.+10     	; 0x33f6 <LCD_sendCommand+0x84c>
		__ticks = 1;
    33ec:	81 e0       	ldi	r24, 0x01	; 1
    33ee:	90 e0       	ldi	r25, 0x00	; 0
    33f0:	9e 83       	std	Y+6, r25	; 0x06
    33f2:	8d 83       	std	Y+5, r24	; 0x05
    33f4:	3f c0       	rjmp	.+126    	; 0x3474 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    33f6:	6f 81       	ldd	r22, Y+7	; 0x07
    33f8:	78 85       	ldd	r23, Y+8	; 0x08
    33fa:	89 85       	ldd	r24, Y+9	; 0x09
    33fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    33fe:	20 e0       	ldi	r18, 0x00	; 0
    3400:	3f ef       	ldi	r19, 0xFF	; 255
    3402:	4f e7       	ldi	r20, 0x7F	; 127
    3404:	57 e4       	ldi	r21, 0x47	; 71
    3406:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    340a:	18 16       	cp	r1, r24
    340c:	4c f5       	brge	.+82     	; 0x3460 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    340e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3410:	7c 85       	ldd	r23, Y+12	; 0x0c
    3412:	8d 85       	ldd	r24, Y+13	; 0x0d
    3414:	9e 85       	ldd	r25, Y+14	; 0x0e
    3416:	20 e0       	ldi	r18, 0x00	; 0
    3418:	30 e0       	ldi	r19, 0x00	; 0
    341a:	40 e2       	ldi	r20, 0x20	; 32
    341c:	51 e4       	ldi	r21, 0x41	; 65
    341e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3422:	dc 01       	movw	r26, r24
    3424:	cb 01       	movw	r24, r22
    3426:	bc 01       	movw	r22, r24
    3428:	cd 01       	movw	r24, r26
    342a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    342e:	dc 01       	movw	r26, r24
    3430:	cb 01       	movw	r24, r22
    3432:	9e 83       	std	Y+6, r25	; 0x06
    3434:	8d 83       	std	Y+5, r24	; 0x05
    3436:	0f c0       	rjmp	.+30     	; 0x3456 <LCD_sendCommand+0x8ac>
    3438:	88 ec       	ldi	r24, 0xC8	; 200
    343a:	90 e0       	ldi	r25, 0x00	; 0
    343c:	9c 83       	std	Y+4, r25	; 0x04
    343e:	8b 83       	std	Y+3, r24	; 0x03
    3440:	8b 81       	ldd	r24, Y+3	; 0x03
    3442:	9c 81       	ldd	r25, Y+4	; 0x04
    3444:	01 97       	sbiw	r24, 0x01	; 1
    3446:	f1 f7       	brne	.-4      	; 0x3444 <LCD_sendCommand+0x89a>
    3448:	9c 83       	std	Y+4, r25	; 0x04
    344a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    344c:	8d 81       	ldd	r24, Y+5	; 0x05
    344e:	9e 81       	ldd	r25, Y+6	; 0x06
    3450:	01 97       	sbiw	r24, 0x01	; 1
    3452:	9e 83       	std	Y+6, r25	; 0x06
    3454:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3456:	8d 81       	ldd	r24, Y+5	; 0x05
    3458:	9e 81       	ldd	r25, Y+6	; 0x06
    345a:	00 97       	sbiw	r24, 0x00	; 0
    345c:	69 f7       	brne	.-38     	; 0x3438 <LCD_sendCommand+0x88e>
    345e:	14 c0       	rjmp	.+40     	; 0x3488 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3460:	6f 81       	ldd	r22, Y+7	; 0x07
    3462:	78 85       	ldd	r23, Y+8	; 0x08
    3464:	89 85       	ldd	r24, Y+9	; 0x09
    3466:	9a 85       	ldd	r25, Y+10	; 0x0a
    3468:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    346c:	dc 01       	movw	r26, r24
    346e:	cb 01       	movw	r24, r22
    3470:	9e 83       	std	Y+6, r25	; 0x06
    3472:	8d 83       	std	Y+5, r24	; 0x05
    3474:	8d 81       	ldd	r24, Y+5	; 0x05
    3476:	9e 81       	ldd	r25, Y+6	; 0x06
    3478:	9a 83       	std	Y+2, r25	; 0x02
    347a:	89 83       	std	Y+1, r24	; 0x01
    347c:	89 81       	ldd	r24, Y+1	; 0x01
    347e:	9a 81       	ldd	r25, Y+2	; 0x02
    3480:	01 97       	sbiw	r24, 0x01	; 1
    3482:	f1 f7       	brne	.-4      	; 0x3480 <LCD_sendCommand+0x8d6>
    3484:	9a 83       	std	Y+2, r25	; 0x02
    3486:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    3488:	cd 59       	subi	r28, 0x9D	; 157
    348a:	df 4f       	sbci	r29, 0xFF	; 255
    348c:	0f b6       	in	r0, 0x3f	; 63
    348e:	f8 94       	cli
    3490:	de bf       	out	0x3e, r29	; 62
    3492:	0f be       	out	0x3f, r0	; 63
    3494:	cd bf       	out	0x3d, r28	; 61
    3496:	cf 91       	pop	r28
    3498:	df 91       	pop	r29
    349a:	1f 91       	pop	r17
    349c:	0f 91       	pop	r16
    349e:	08 95       	ret

000034a0 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    34a0:	0f 93       	push	r16
    34a2:	1f 93       	push	r17
    34a4:	df 93       	push	r29
    34a6:	cf 93       	push	r28
    34a8:	cd b7       	in	r28, 0x3d	; 61
    34aa:	de b7       	in	r29, 0x3e	; 62
    34ac:	c3 56       	subi	r28, 0x63	; 99
    34ae:	d0 40       	sbci	r29, 0x00	; 0
    34b0:	0f b6       	in	r0, 0x3f	; 63
    34b2:	f8 94       	cli
    34b4:	de bf       	out	0x3e, r29	; 62
    34b6:	0f be       	out	0x3f, r0	; 63
    34b8:	cd bf       	out	0x3d, r28	; 61
    34ba:	fe 01       	movw	r30, r28
    34bc:	ed 59       	subi	r30, 0x9D	; 157
    34be:	ff 4f       	sbci	r31, 0xFF	; 255
    34c0:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    34c2:	80 e0       	ldi	r24, 0x00	; 0
    34c4:	61 e0       	ldi	r22, 0x01	; 1
    34c6:	41 e0       	ldi	r20, 0x01	; 1
    34c8:	0e 94 33 11 	call	0x2266	; 0x2266 <GPIO_writePin>
    34cc:	fe 01       	movw	r30, r28
    34ce:	e1 5a       	subi	r30, 0xA1	; 161
    34d0:	ff 4f       	sbci	r31, 0xFF	; 255
    34d2:	80 e0       	ldi	r24, 0x00	; 0
    34d4:	90 e0       	ldi	r25, 0x00	; 0
    34d6:	a0 e8       	ldi	r26, 0x80	; 128
    34d8:	bf e3       	ldi	r27, 0x3F	; 63
    34da:	80 83       	st	Z, r24
    34dc:	91 83       	std	Z+1, r25	; 0x01
    34de:	a2 83       	std	Z+2, r26	; 0x02
    34e0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34e2:	8e 01       	movw	r16, r28
    34e4:	05 5a       	subi	r16, 0xA5	; 165
    34e6:	1f 4f       	sbci	r17, 0xFF	; 255
    34e8:	fe 01       	movw	r30, r28
    34ea:	e1 5a       	subi	r30, 0xA1	; 161
    34ec:	ff 4f       	sbci	r31, 0xFF	; 255
    34ee:	60 81       	ld	r22, Z
    34f0:	71 81       	ldd	r23, Z+1	; 0x01
    34f2:	82 81       	ldd	r24, Z+2	; 0x02
    34f4:	93 81       	ldd	r25, Z+3	; 0x03
    34f6:	20 e0       	ldi	r18, 0x00	; 0
    34f8:	30 e0       	ldi	r19, 0x00	; 0
    34fa:	4a ef       	ldi	r20, 0xFA	; 250
    34fc:	54 e4       	ldi	r21, 0x44	; 68
    34fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3502:	dc 01       	movw	r26, r24
    3504:	cb 01       	movw	r24, r22
    3506:	f8 01       	movw	r30, r16
    3508:	80 83       	st	Z, r24
    350a:	91 83       	std	Z+1, r25	; 0x01
    350c:	a2 83       	std	Z+2, r26	; 0x02
    350e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3510:	fe 01       	movw	r30, r28
    3512:	e5 5a       	subi	r30, 0xA5	; 165
    3514:	ff 4f       	sbci	r31, 0xFF	; 255
    3516:	60 81       	ld	r22, Z
    3518:	71 81       	ldd	r23, Z+1	; 0x01
    351a:	82 81       	ldd	r24, Z+2	; 0x02
    351c:	93 81       	ldd	r25, Z+3	; 0x03
    351e:	20 e0       	ldi	r18, 0x00	; 0
    3520:	30 e0       	ldi	r19, 0x00	; 0
    3522:	40 e8       	ldi	r20, 0x80	; 128
    3524:	5f e3       	ldi	r21, 0x3F	; 63
    3526:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    352a:	88 23       	and	r24, r24
    352c:	44 f4       	brge	.+16     	; 0x353e <LCD_displayCharacter+0x9e>
		__ticks = 1;
    352e:	fe 01       	movw	r30, r28
    3530:	e7 5a       	subi	r30, 0xA7	; 167
    3532:	ff 4f       	sbci	r31, 0xFF	; 255
    3534:	81 e0       	ldi	r24, 0x01	; 1
    3536:	90 e0       	ldi	r25, 0x00	; 0
    3538:	91 83       	std	Z+1, r25	; 0x01
    353a:	80 83       	st	Z, r24
    353c:	64 c0       	rjmp	.+200    	; 0x3606 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    353e:	fe 01       	movw	r30, r28
    3540:	e5 5a       	subi	r30, 0xA5	; 165
    3542:	ff 4f       	sbci	r31, 0xFF	; 255
    3544:	60 81       	ld	r22, Z
    3546:	71 81       	ldd	r23, Z+1	; 0x01
    3548:	82 81       	ldd	r24, Z+2	; 0x02
    354a:	93 81       	ldd	r25, Z+3	; 0x03
    354c:	20 e0       	ldi	r18, 0x00	; 0
    354e:	3f ef       	ldi	r19, 0xFF	; 255
    3550:	4f e7       	ldi	r20, 0x7F	; 127
    3552:	57 e4       	ldi	r21, 0x47	; 71
    3554:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3558:	18 16       	cp	r1, r24
    355a:	0c f0       	brlt	.+2      	; 0x355e <LCD_displayCharacter+0xbe>
    355c:	43 c0       	rjmp	.+134    	; 0x35e4 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    355e:	fe 01       	movw	r30, r28
    3560:	e1 5a       	subi	r30, 0xA1	; 161
    3562:	ff 4f       	sbci	r31, 0xFF	; 255
    3564:	60 81       	ld	r22, Z
    3566:	71 81       	ldd	r23, Z+1	; 0x01
    3568:	82 81       	ldd	r24, Z+2	; 0x02
    356a:	93 81       	ldd	r25, Z+3	; 0x03
    356c:	20 e0       	ldi	r18, 0x00	; 0
    356e:	30 e0       	ldi	r19, 0x00	; 0
    3570:	40 e2       	ldi	r20, 0x20	; 32
    3572:	51 e4       	ldi	r21, 0x41	; 65
    3574:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3578:	dc 01       	movw	r26, r24
    357a:	cb 01       	movw	r24, r22
    357c:	8e 01       	movw	r16, r28
    357e:	07 5a       	subi	r16, 0xA7	; 167
    3580:	1f 4f       	sbci	r17, 0xFF	; 255
    3582:	bc 01       	movw	r22, r24
    3584:	cd 01       	movw	r24, r26
    3586:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    358a:	dc 01       	movw	r26, r24
    358c:	cb 01       	movw	r24, r22
    358e:	f8 01       	movw	r30, r16
    3590:	91 83       	std	Z+1, r25	; 0x01
    3592:	80 83       	st	Z, r24
    3594:	1f c0       	rjmp	.+62     	; 0x35d4 <LCD_displayCharacter+0x134>
    3596:	fe 01       	movw	r30, r28
    3598:	e9 5a       	subi	r30, 0xA9	; 169
    359a:	ff 4f       	sbci	r31, 0xFF	; 255
    359c:	88 ec       	ldi	r24, 0xC8	; 200
    359e:	90 e0       	ldi	r25, 0x00	; 0
    35a0:	91 83       	std	Z+1, r25	; 0x01
    35a2:	80 83       	st	Z, r24
    35a4:	fe 01       	movw	r30, r28
    35a6:	e9 5a       	subi	r30, 0xA9	; 169
    35a8:	ff 4f       	sbci	r31, 0xFF	; 255
    35aa:	80 81       	ld	r24, Z
    35ac:	91 81       	ldd	r25, Z+1	; 0x01
    35ae:	01 97       	sbiw	r24, 0x01	; 1
    35b0:	f1 f7       	brne	.-4      	; 0x35ae <LCD_displayCharacter+0x10e>
    35b2:	fe 01       	movw	r30, r28
    35b4:	e9 5a       	subi	r30, 0xA9	; 169
    35b6:	ff 4f       	sbci	r31, 0xFF	; 255
    35b8:	91 83       	std	Z+1, r25	; 0x01
    35ba:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35bc:	de 01       	movw	r26, r28
    35be:	a7 5a       	subi	r26, 0xA7	; 167
    35c0:	bf 4f       	sbci	r27, 0xFF	; 255
    35c2:	fe 01       	movw	r30, r28
    35c4:	e7 5a       	subi	r30, 0xA7	; 167
    35c6:	ff 4f       	sbci	r31, 0xFF	; 255
    35c8:	80 81       	ld	r24, Z
    35ca:	91 81       	ldd	r25, Z+1	; 0x01
    35cc:	01 97       	sbiw	r24, 0x01	; 1
    35ce:	11 96       	adiw	r26, 0x01	; 1
    35d0:	9c 93       	st	X, r25
    35d2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35d4:	fe 01       	movw	r30, r28
    35d6:	e7 5a       	subi	r30, 0xA7	; 167
    35d8:	ff 4f       	sbci	r31, 0xFF	; 255
    35da:	80 81       	ld	r24, Z
    35dc:	91 81       	ldd	r25, Z+1	; 0x01
    35de:	00 97       	sbiw	r24, 0x00	; 0
    35e0:	d1 f6       	brne	.-76     	; 0x3596 <LCD_displayCharacter+0xf6>
    35e2:	27 c0       	rjmp	.+78     	; 0x3632 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35e4:	8e 01       	movw	r16, r28
    35e6:	07 5a       	subi	r16, 0xA7	; 167
    35e8:	1f 4f       	sbci	r17, 0xFF	; 255
    35ea:	fe 01       	movw	r30, r28
    35ec:	e5 5a       	subi	r30, 0xA5	; 165
    35ee:	ff 4f       	sbci	r31, 0xFF	; 255
    35f0:	60 81       	ld	r22, Z
    35f2:	71 81       	ldd	r23, Z+1	; 0x01
    35f4:	82 81       	ldd	r24, Z+2	; 0x02
    35f6:	93 81       	ldd	r25, Z+3	; 0x03
    35f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35fc:	dc 01       	movw	r26, r24
    35fe:	cb 01       	movw	r24, r22
    3600:	f8 01       	movw	r30, r16
    3602:	91 83       	std	Z+1, r25	; 0x01
    3604:	80 83       	st	Z, r24
    3606:	de 01       	movw	r26, r28
    3608:	ab 5a       	subi	r26, 0xAB	; 171
    360a:	bf 4f       	sbci	r27, 0xFF	; 255
    360c:	fe 01       	movw	r30, r28
    360e:	e7 5a       	subi	r30, 0xA7	; 167
    3610:	ff 4f       	sbci	r31, 0xFF	; 255
    3612:	80 81       	ld	r24, Z
    3614:	91 81       	ldd	r25, Z+1	; 0x01
    3616:	8d 93       	st	X+, r24
    3618:	9c 93       	st	X, r25
    361a:	fe 01       	movw	r30, r28
    361c:	eb 5a       	subi	r30, 0xAB	; 171
    361e:	ff 4f       	sbci	r31, 0xFF	; 255
    3620:	80 81       	ld	r24, Z
    3622:	91 81       	ldd	r25, Z+1	; 0x01
    3624:	01 97       	sbiw	r24, 0x01	; 1
    3626:	f1 f7       	brne	.-4      	; 0x3624 <LCD_displayCharacter+0x184>
    3628:	fe 01       	movw	r30, r28
    362a:	eb 5a       	subi	r30, 0xAB	; 171
    362c:	ff 4f       	sbci	r31, 0xFF	; 255
    362e:	91 83       	std	Z+1, r25	; 0x01
    3630:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    3632:	80 e0       	ldi	r24, 0x00	; 0
    3634:	62 e0       	ldi	r22, 0x02	; 2
    3636:	41 e0       	ldi	r20, 0x01	; 1
    3638:	0e 94 33 11 	call	0x2266	; 0x2266 <GPIO_writePin>
    363c:	fe 01       	movw	r30, r28
    363e:	ef 5a       	subi	r30, 0xAF	; 175
    3640:	ff 4f       	sbci	r31, 0xFF	; 255
    3642:	80 e0       	ldi	r24, 0x00	; 0
    3644:	90 e0       	ldi	r25, 0x00	; 0
    3646:	a0 e8       	ldi	r26, 0x80	; 128
    3648:	bf e3       	ldi	r27, 0x3F	; 63
    364a:	80 83       	st	Z, r24
    364c:	91 83       	std	Z+1, r25	; 0x01
    364e:	a2 83       	std	Z+2, r26	; 0x02
    3650:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3652:	8e 01       	movw	r16, r28
    3654:	03 5b       	subi	r16, 0xB3	; 179
    3656:	1f 4f       	sbci	r17, 0xFF	; 255
    3658:	fe 01       	movw	r30, r28
    365a:	ef 5a       	subi	r30, 0xAF	; 175
    365c:	ff 4f       	sbci	r31, 0xFF	; 255
    365e:	60 81       	ld	r22, Z
    3660:	71 81       	ldd	r23, Z+1	; 0x01
    3662:	82 81       	ldd	r24, Z+2	; 0x02
    3664:	93 81       	ldd	r25, Z+3	; 0x03
    3666:	20 e0       	ldi	r18, 0x00	; 0
    3668:	30 e0       	ldi	r19, 0x00	; 0
    366a:	4a ef       	ldi	r20, 0xFA	; 250
    366c:	54 e4       	ldi	r21, 0x44	; 68
    366e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3672:	dc 01       	movw	r26, r24
    3674:	cb 01       	movw	r24, r22
    3676:	f8 01       	movw	r30, r16
    3678:	80 83       	st	Z, r24
    367a:	91 83       	std	Z+1, r25	; 0x01
    367c:	a2 83       	std	Z+2, r26	; 0x02
    367e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3680:	fe 01       	movw	r30, r28
    3682:	e3 5b       	subi	r30, 0xB3	; 179
    3684:	ff 4f       	sbci	r31, 0xFF	; 255
    3686:	60 81       	ld	r22, Z
    3688:	71 81       	ldd	r23, Z+1	; 0x01
    368a:	82 81       	ldd	r24, Z+2	; 0x02
    368c:	93 81       	ldd	r25, Z+3	; 0x03
    368e:	20 e0       	ldi	r18, 0x00	; 0
    3690:	30 e0       	ldi	r19, 0x00	; 0
    3692:	40 e8       	ldi	r20, 0x80	; 128
    3694:	5f e3       	ldi	r21, 0x3F	; 63
    3696:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    369a:	88 23       	and	r24, r24
    369c:	44 f4       	brge	.+16     	; 0x36ae <LCD_displayCharacter+0x20e>
		__ticks = 1;
    369e:	fe 01       	movw	r30, r28
    36a0:	e5 5b       	subi	r30, 0xB5	; 181
    36a2:	ff 4f       	sbci	r31, 0xFF	; 255
    36a4:	81 e0       	ldi	r24, 0x01	; 1
    36a6:	90 e0       	ldi	r25, 0x00	; 0
    36a8:	91 83       	std	Z+1, r25	; 0x01
    36aa:	80 83       	st	Z, r24
    36ac:	64 c0       	rjmp	.+200    	; 0x3776 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    36ae:	fe 01       	movw	r30, r28
    36b0:	e3 5b       	subi	r30, 0xB3	; 179
    36b2:	ff 4f       	sbci	r31, 0xFF	; 255
    36b4:	60 81       	ld	r22, Z
    36b6:	71 81       	ldd	r23, Z+1	; 0x01
    36b8:	82 81       	ldd	r24, Z+2	; 0x02
    36ba:	93 81       	ldd	r25, Z+3	; 0x03
    36bc:	20 e0       	ldi	r18, 0x00	; 0
    36be:	3f ef       	ldi	r19, 0xFF	; 255
    36c0:	4f e7       	ldi	r20, 0x7F	; 127
    36c2:	57 e4       	ldi	r21, 0x47	; 71
    36c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    36c8:	18 16       	cp	r1, r24
    36ca:	0c f0       	brlt	.+2      	; 0x36ce <LCD_displayCharacter+0x22e>
    36cc:	43 c0       	rjmp	.+134    	; 0x3754 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36ce:	fe 01       	movw	r30, r28
    36d0:	ef 5a       	subi	r30, 0xAF	; 175
    36d2:	ff 4f       	sbci	r31, 0xFF	; 255
    36d4:	60 81       	ld	r22, Z
    36d6:	71 81       	ldd	r23, Z+1	; 0x01
    36d8:	82 81       	ldd	r24, Z+2	; 0x02
    36da:	93 81       	ldd	r25, Z+3	; 0x03
    36dc:	20 e0       	ldi	r18, 0x00	; 0
    36de:	30 e0       	ldi	r19, 0x00	; 0
    36e0:	40 e2       	ldi	r20, 0x20	; 32
    36e2:	51 e4       	ldi	r21, 0x41	; 65
    36e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36e8:	dc 01       	movw	r26, r24
    36ea:	cb 01       	movw	r24, r22
    36ec:	8e 01       	movw	r16, r28
    36ee:	05 5b       	subi	r16, 0xB5	; 181
    36f0:	1f 4f       	sbci	r17, 0xFF	; 255
    36f2:	bc 01       	movw	r22, r24
    36f4:	cd 01       	movw	r24, r26
    36f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36fa:	dc 01       	movw	r26, r24
    36fc:	cb 01       	movw	r24, r22
    36fe:	f8 01       	movw	r30, r16
    3700:	91 83       	std	Z+1, r25	; 0x01
    3702:	80 83       	st	Z, r24
    3704:	1f c0       	rjmp	.+62     	; 0x3744 <LCD_displayCharacter+0x2a4>
    3706:	fe 01       	movw	r30, r28
    3708:	e7 5b       	subi	r30, 0xB7	; 183
    370a:	ff 4f       	sbci	r31, 0xFF	; 255
    370c:	88 ec       	ldi	r24, 0xC8	; 200
    370e:	90 e0       	ldi	r25, 0x00	; 0
    3710:	91 83       	std	Z+1, r25	; 0x01
    3712:	80 83       	st	Z, r24
    3714:	fe 01       	movw	r30, r28
    3716:	e7 5b       	subi	r30, 0xB7	; 183
    3718:	ff 4f       	sbci	r31, 0xFF	; 255
    371a:	80 81       	ld	r24, Z
    371c:	91 81       	ldd	r25, Z+1	; 0x01
    371e:	01 97       	sbiw	r24, 0x01	; 1
    3720:	f1 f7       	brne	.-4      	; 0x371e <LCD_displayCharacter+0x27e>
    3722:	fe 01       	movw	r30, r28
    3724:	e7 5b       	subi	r30, 0xB7	; 183
    3726:	ff 4f       	sbci	r31, 0xFF	; 255
    3728:	91 83       	std	Z+1, r25	; 0x01
    372a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    372c:	de 01       	movw	r26, r28
    372e:	a5 5b       	subi	r26, 0xB5	; 181
    3730:	bf 4f       	sbci	r27, 0xFF	; 255
    3732:	fe 01       	movw	r30, r28
    3734:	e5 5b       	subi	r30, 0xB5	; 181
    3736:	ff 4f       	sbci	r31, 0xFF	; 255
    3738:	80 81       	ld	r24, Z
    373a:	91 81       	ldd	r25, Z+1	; 0x01
    373c:	01 97       	sbiw	r24, 0x01	; 1
    373e:	11 96       	adiw	r26, 0x01	; 1
    3740:	9c 93       	st	X, r25
    3742:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3744:	fe 01       	movw	r30, r28
    3746:	e5 5b       	subi	r30, 0xB5	; 181
    3748:	ff 4f       	sbci	r31, 0xFF	; 255
    374a:	80 81       	ld	r24, Z
    374c:	91 81       	ldd	r25, Z+1	; 0x01
    374e:	00 97       	sbiw	r24, 0x00	; 0
    3750:	d1 f6       	brne	.-76     	; 0x3706 <LCD_displayCharacter+0x266>
    3752:	27 c0       	rjmp	.+78     	; 0x37a2 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3754:	8e 01       	movw	r16, r28
    3756:	05 5b       	subi	r16, 0xB5	; 181
    3758:	1f 4f       	sbci	r17, 0xFF	; 255
    375a:	fe 01       	movw	r30, r28
    375c:	e3 5b       	subi	r30, 0xB3	; 179
    375e:	ff 4f       	sbci	r31, 0xFF	; 255
    3760:	60 81       	ld	r22, Z
    3762:	71 81       	ldd	r23, Z+1	; 0x01
    3764:	82 81       	ldd	r24, Z+2	; 0x02
    3766:	93 81       	ldd	r25, Z+3	; 0x03
    3768:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    376c:	dc 01       	movw	r26, r24
    376e:	cb 01       	movw	r24, r22
    3770:	f8 01       	movw	r30, r16
    3772:	91 83       	std	Z+1, r25	; 0x01
    3774:	80 83       	st	Z, r24
    3776:	de 01       	movw	r26, r28
    3778:	a9 5b       	subi	r26, 0xB9	; 185
    377a:	bf 4f       	sbci	r27, 0xFF	; 255
    377c:	fe 01       	movw	r30, r28
    377e:	e5 5b       	subi	r30, 0xB5	; 181
    3780:	ff 4f       	sbci	r31, 0xFF	; 255
    3782:	80 81       	ld	r24, Z
    3784:	91 81       	ldd	r25, Z+1	; 0x01
    3786:	8d 93       	st	X+, r24
    3788:	9c 93       	st	X, r25
    378a:	fe 01       	movw	r30, r28
    378c:	e9 5b       	subi	r30, 0xB9	; 185
    378e:	ff 4f       	sbci	r31, 0xFF	; 255
    3790:	80 81       	ld	r24, Z
    3792:	91 81       	ldd	r25, Z+1	; 0x01
    3794:	01 97       	sbiw	r24, 0x01	; 1
    3796:	f1 f7       	brne	.-4      	; 0x3794 <LCD_displayCharacter+0x2f4>
    3798:	fe 01       	movw	r30, r28
    379a:	e9 5b       	subi	r30, 0xB9	; 185
    379c:	ff 4f       	sbci	r31, 0xFF	; 255
    379e:	91 83       	std	Z+1, r25	; 0x01
    37a0:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    37a2:	fe 01       	movw	r30, r28
    37a4:	ed 59       	subi	r30, 0x9D	; 157
    37a6:	ff 4f       	sbci	r31, 0xFF	; 255
    37a8:	80 81       	ld	r24, Z
    37aa:	88 2f       	mov	r24, r24
    37ac:	90 e0       	ldi	r25, 0x00	; 0
    37ae:	80 71       	andi	r24, 0x10	; 16
    37b0:	90 70       	andi	r25, 0x00	; 0
    37b2:	95 95       	asr	r25
    37b4:	87 95       	ror	r24
    37b6:	95 95       	asr	r25
    37b8:	87 95       	ror	r24
    37ba:	95 95       	asr	r25
    37bc:	87 95       	ror	r24
    37be:	95 95       	asr	r25
    37c0:	87 95       	ror	r24
    37c2:	98 2f       	mov	r25, r24
    37c4:	80 e0       	ldi	r24, 0x00	; 0
    37c6:	63 e0       	ldi	r22, 0x03	; 3
    37c8:	49 2f       	mov	r20, r25
    37ca:	0e 94 33 11 	call	0x2266	; 0x2266 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    37ce:	fe 01       	movw	r30, r28
    37d0:	ed 59       	subi	r30, 0x9D	; 157
    37d2:	ff 4f       	sbci	r31, 0xFF	; 255
    37d4:	80 81       	ld	r24, Z
    37d6:	88 2f       	mov	r24, r24
    37d8:	90 e0       	ldi	r25, 0x00	; 0
    37da:	80 72       	andi	r24, 0x20	; 32
    37dc:	90 70       	andi	r25, 0x00	; 0
    37de:	95 95       	asr	r25
    37e0:	87 95       	ror	r24
    37e2:	95 95       	asr	r25
    37e4:	87 95       	ror	r24
    37e6:	95 95       	asr	r25
    37e8:	87 95       	ror	r24
    37ea:	95 95       	asr	r25
    37ec:	87 95       	ror	r24
    37ee:	95 95       	asr	r25
    37f0:	87 95       	ror	r24
    37f2:	98 2f       	mov	r25, r24
    37f4:	80 e0       	ldi	r24, 0x00	; 0
    37f6:	64 e0       	ldi	r22, 0x04	; 4
    37f8:	49 2f       	mov	r20, r25
    37fa:	0e 94 33 11 	call	0x2266	; 0x2266 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    37fe:	fe 01       	movw	r30, r28
    3800:	ed 59       	subi	r30, 0x9D	; 157
    3802:	ff 4f       	sbci	r31, 0xFF	; 255
    3804:	80 81       	ld	r24, Z
    3806:	88 2f       	mov	r24, r24
    3808:	90 e0       	ldi	r25, 0x00	; 0
    380a:	80 74       	andi	r24, 0x40	; 64
    380c:	90 70       	andi	r25, 0x00	; 0
    380e:	08 2e       	mov	r0, r24
    3810:	89 2f       	mov	r24, r25
    3812:	00 0c       	add	r0, r0
    3814:	88 1f       	adc	r24, r24
    3816:	99 0b       	sbc	r25, r25
    3818:	00 0c       	add	r0, r0
    381a:	88 1f       	adc	r24, r24
    381c:	99 1f       	adc	r25, r25
    381e:	98 2f       	mov	r25, r24
    3820:	80 e0       	ldi	r24, 0x00	; 0
    3822:	65 e0       	ldi	r22, 0x05	; 5
    3824:	49 2f       	mov	r20, r25
    3826:	0e 94 33 11 	call	0x2266	; 0x2266 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    382a:	fe 01       	movw	r30, r28
    382c:	ed 59       	subi	r30, 0x9D	; 157
    382e:	ff 4f       	sbci	r31, 0xFF	; 255
    3830:	80 81       	ld	r24, Z
    3832:	98 2f       	mov	r25, r24
    3834:	99 1f       	adc	r25, r25
    3836:	99 27       	eor	r25, r25
    3838:	99 1f       	adc	r25, r25
    383a:	80 e0       	ldi	r24, 0x00	; 0
    383c:	66 e0       	ldi	r22, 0x06	; 6
    383e:	49 2f       	mov	r20, r25
    3840:	0e 94 33 11 	call	0x2266	; 0x2266 <GPIO_writePin>
    3844:	fe 01       	movw	r30, r28
    3846:	ed 5b       	subi	r30, 0xBD	; 189
    3848:	ff 4f       	sbci	r31, 0xFF	; 255
    384a:	80 e0       	ldi	r24, 0x00	; 0
    384c:	90 e0       	ldi	r25, 0x00	; 0
    384e:	a0 e8       	ldi	r26, 0x80	; 128
    3850:	bf e3       	ldi	r27, 0x3F	; 63
    3852:	80 83       	st	Z, r24
    3854:	91 83       	std	Z+1, r25	; 0x01
    3856:	a2 83       	std	Z+2, r26	; 0x02
    3858:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    385a:	8e 01       	movw	r16, r28
    385c:	01 5c       	subi	r16, 0xC1	; 193
    385e:	1f 4f       	sbci	r17, 0xFF	; 255
    3860:	fe 01       	movw	r30, r28
    3862:	ed 5b       	subi	r30, 0xBD	; 189
    3864:	ff 4f       	sbci	r31, 0xFF	; 255
    3866:	60 81       	ld	r22, Z
    3868:	71 81       	ldd	r23, Z+1	; 0x01
    386a:	82 81       	ldd	r24, Z+2	; 0x02
    386c:	93 81       	ldd	r25, Z+3	; 0x03
    386e:	20 e0       	ldi	r18, 0x00	; 0
    3870:	30 e0       	ldi	r19, 0x00	; 0
    3872:	4a ef       	ldi	r20, 0xFA	; 250
    3874:	54 e4       	ldi	r21, 0x44	; 68
    3876:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    387a:	dc 01       	movw	r26, r24
    387c:	cb 01       	movw	r24, r22
    387e:	f8 01       	movw	r30, r16
    3880:	80 83       	st	Z, r24
    3882:	91 83       	std	Z+1, r25	; 0x01
    3884:	a2 83       	std	Z+2, r26	; 0x02
    3886:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3888:	fe 01       	movw	r30, r28
    388a:	ff 96       	adiw	r30, 0x3f	; 63
    388c:	60 81       	ld	r22, Z
    388e:	71 81       	ldd	r23, Z+1	; 0x01
    3890:	82 81       	ldd	r24, Z+2	; 0x02
    3892:	93 81       	ldd	r25, Z+3	; 0x03
    3894:	20 e0       	ldi	r18, 0x00	; 0
    3896:	30 e0       	ldi	r19, 0x00	; 0
    3898:	40 e8       	ldi	r20, 0x80	; 128
    389a:	5f e3       	ldi	r21, 0x3F	; 63
    389c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    38a0:	88 23       	and	r24, r24
    38a2:	2c f4       	brge	.+10     	; 0x38ae <LCD_displayCharacter+0x40e>
		__ticks = 1;
    38a4:	81 e0       	ldi	r24, 0x01	; 1
    38a6:	90 e0       	ldi	r25, 0x00	; 0
    38a8:	9e af       	std	Y+62, r25	; 0x3e
    38aa:	8d af       	std	Y+61, r24	; 0x3d
    38ac:	46 c0       	rjmp	.+140    	; 0x393a <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    38ae:	fe 01       	movw	r30, r28
    38b0:	ff 96       	adiw	r30, 0x3f	; 63
    38b2:	60 81       	ld	r22, Z
    38b4:	71 81       	ldd	r23, Z+1	; 0x01
    38b6:	82 81       	ldd	r24, Z+2	; 0x02
    38b8:	93 81       	ldd	r25, Z+3	; 0x03
    38ba:	20 e0       	ldi	r18, 0x00	; 0
    38bc:	3f ef       	ldi	r19, 0xFF	; 255
    38be:	4f e7       	ldi	r20, 0x7F	; 127
    38c0:	57 e4       	ldi	r21, 0x47	; 71
    38c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    38c6:	18 16       	cp	r1, r24
    38c8:	64 f5       	brge	.+88     	; 0x3922 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38ca:	fe 01       	movw	r30, r28
    38cc:	ed 5b       	subi	r30, 0xBD	; 189
    38ce:	ff 4f       	sbci	r31, 0xFF	; 255
    38d0:	60 81       	ld	r22, Z
    38d2:	71 81       	ldd	r23, Z+1	; 0x01
    38d4:	82 81       	ldd	r24, Z+2	; 0x02
    38d6:	93 81       	ldd	r25, Z+3	; 0x03
    38d8:	20 e0       	ldi	r18, 0x00	; 0
    38da:	30 e0       	ldi	r19, 0x00	; 0
    38dc:	40 e2       	ldi	r20, 0x20	; 32
    38de:	51 e4       	ldi	r21, 0x41	; 65
    38e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38e4:	dc 01       	movw	r26, r24
    38e6:	cb 01       	movw	r24, r22
    38e8:	bc 01       	movw	r22, r24
    38ea:	cd 01       	movw	r24, r26
    38ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38f0:	dc 01       	movw	r26, r24
    38f2:	cb 01       	movw	r24, r22
    38f4:	9e af       	std	Y+62, r25	; 0x3e
    38f6:	8d af       	std	Y+61, r24	; 0x3d
    38f8:	0f c0       	rjmp	.+30     	; 0x3918 <LCD_displayCharacter+0x478>
    38fa:	88 ec       	ldi	r24, 0xC8	; 200
    38fc:	90 e0       	ldi	r25, 0x00	; 0
    38fe:	9c af       	std	Y+60, r25	; 0x3c
    3900:	8b af       	std	Y+59, r24	; 0x3b
    3902:	8b ad       	ldd	r24, Y+59	; 0x3b
    3904:	9c ad       	ldd	r25, Y+60	; 0x3c
    3906:	01 97       	sbiw	r24, 0x01	; 1
    3908:	f1 f7       	brne	.-4      	; 0x3906 <LCD_displayCharacter+0x466>
    390a:	9c af       	std	Y+60, r25	; 0x3c
    390c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    390e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3910:	9e ad       	ldd	r25, Y+62	; 0x3e
    3912:	01 97       	sbiw	r24, 0x01	; 1
    3914:	9e af       	std	Y+62, r25	; 0x3e
    3916:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3918:	8d ad       	ldd	r24, Y+61	; 0x3d
    391a:	9e ad       	ldd	r25, Y+62	; 0x3e
    391c:	00 97       	sbiw	r24, 0x00	; 0
    391e:	69 f7       	brne	.-38     	; 0x38fa <LCD_displayCharacter+0x45a>
    3920:	16 c0       	rjmp	.+44     	; 0x394e <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3922:	fe 01       	movw	r30, r28
    3924:	ff 96       	adiw	r30, 0x3f	; 63
    3926:	60 81       	ld	r22, Z
    3928:	71 81       	ldd	r23, Z+1	; 0x01
    392a:	82 81       	ldd	r24, Z+2	; 0x02
    392c:	93 81       	ldd	r25, Z+3	; 0x03
    392e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3932:	dc 01       	movw	r26, r24
    3934:	cb 01       	movw	r24, r22
    3936:	9e af       	std	Y+62, r25	; 0x3e
    3938:	8d af       	std	Y+61, r24	; 0x3d
    393a:	8d ad       	ldd	r24, Y+61	; 0x3d
    393c:	9e ad       	ldd	r25, Y+62	; 0x3e
    393e:	9a af       	std	Y+58, r25	; 0x3a
    3940:	89 af       	std	Y+57, r24	; 0x39
    3942:	89 ad       	ldd	r24, Y+57	; 0x39
    3944:	9a ad       	ldd	r25, Y+58	; 0x3a
    3946:	01 97       	sbiw	r24, 0x01	; 1
    3948:	f1 f7       	brne	.-4      	; 0x3946 <LCD_displayCharacter+0x4a6>
    394a:	9a af       	std	Y+58, r25	; 0x3a
    394c:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    394e:	80 e0       	ldi	r24, 0x00	; 0
    3950:	62 e0       	ldi	r22, 0x02	; 2
    3952:	40 e0       	ldi	r20, 0x00	; 0
    3954:	0e 94 33 11 	call	0x2266	; 0x2266 <GPIO_writePin>
    3958:	80 e0       	ldi	r24, 0x00	; 0
    395a:	90 e0       	ldi	r25, 0x00	; 0
    395c:	a0 e8       	ldi	r26, 0x80	; 128
    395e:	bf e3       	ldi	r27, 0x3F	; 63
    3960:	8d ab       	std	Y+53, r24	; 0x35
    3962:	9e ab       	std	Y+54, r25	; 0x36
    3964:	af ab       	std	Y+55, r26	; 0x37
    3966:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3968:	6d a9       	ldd	r22, Y+53	; 0x35
    396a:	7e a9       	ldd	r23, Y+54	; 0x36
    396c:	8f a9       	ldd	r24, Y+55	; 0x37
    396e:	98 ad       	ldd	r25, Y+56	; 0x38
    3970:	20 e0       	ldi	r18, 0x00	; 0
    3972:	30 e0       	ldi	r19, 0x00	; 0
    3974:	4a ef       	ldi	r20, 0xFA	; 250
    3976:	54 e4       	ldi	r21, 0x44	; 68
    3978:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    397c:	dc 01       	movw	r26, r24
    397e:	cb 01       	movw	r24, r22
    3980:	89 ab       	std	Y+49, r24	; 0x31
    3982:	9a ab       	std	Y+50, r25	; 0x32
    3984:	ab ab       	std	Y+51, r26	; 0x33
    3986:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3988:	69 a9       	ldd	r22, Y+49	; 0x31
    398a:	7a a9       	ldd	r23, Y+50	; 0x32
    398c:	8b a9       	ldd	r24, Y+51	; 0x33
    398e:	9c a9       	ldd	r25, Y+52	; 0x34
    3990:	20 e0       	ldi	r18, 0x00	; 0
    3992:	30 e0       	ldi	r19, 0x00	; 0
    3994:	40 e8       	ldi	r20, 0x80	; 128
    3996:	5f e3       	ldi	r21, 0x3F	; 63
    3998:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    399c:	88 23       	and	r24, r24
    399e:	2c f4       	brge	.+10     	; 0x39aa <LCD_displayCharacter+0x50a>
		__ticks = 1;
    39a0:	81 e0       	ldi	r24, 0x01	; 1
    39a2:	90 e0       	ldi	r25, 0x00	; 0
    39a4:	98 ab       	std	Y+48, r25	; 0x30
    39a6:	8f a7       	std	Y+47, r24	; 0x2f
    39a8:	3f c0       	rjmp	.+126    	; 0x3a28 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    39aa:	69 a9       	ldd	r22, Y+49	; 0x31
    39ac:	7a a9       	ldd	r23, Y+50	; 0x32
    39ae:	8b a9       	ldd	r24, Y+51	; 0x33
    39b0:	9c a9       	ldd	r25, Y+52	; 0x34
    39b2:	20 e0       	ldi	r18, 0x00	; 0
    39b4:	3f ef       	ldi	r19, 0xFF	; 255
    39b6:	4f e7       	ldi	r20, 0x7F	; 127
    39b8:	57 e4       	ldi	r21, 0x47	; 71
    39ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    39be:	18 16       	cp	r1, r24
    39c0:	4c f5       	brge	.+82     	; 0x3a14 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39c2:	6d a9       	ldd	r22, Y+53	; 0x35
    39c4:	7e a9       	ldd	r23, Y+54	; 0x36
    39c6:	8f a9       	ldd	r24, Y+55	; 0x37
    39c8:	98 ad       	ldd	r25, Y+56	; 0x38
    39ca:	20 e0       	ldi	r18, 0x00	; 0
    39cc:	30 e0       	ldi	r19, 0x00	; 0
    39ce:	40 e2       	ldi	r20, 0x20	; 32
    39d0:	51 e4       	ldi	r21, 0x41	; 65
    39d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39d6:	dc 01       	movw	r26, r24
    39d8:	cb 01       	movw	r24, r22
    39da:	bc 01       	movw	r22, r24
    39dc:	cd 01       	movw	r24, r26
    39de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39e2:	dc 01       	movw	r26, r24
    39e4:	cb 01       	movw	r24, r22
    39e6:	98 ab       	std	Y+48, r25	; 0x30
    39e8:	8f a7       	std	Y+47, r24	; 0x2f
    39ea:	0f c0       	rjmp	.+30     	; 0x3a0a <LCD_displayCharacter+0x56a>
    39ec:	88 ec       	ldi	r24, 0xC8	; 200
    39ee:	90 e0       	ldi	r25, 0x00	; 0
    39f0:	9e a7       	std	Y+46, r25	; 0x2e
    39f2:	8d a7       	std	Y+45, r24	; 0x2d
    39f4:	8d a5       	ldd	r24, Y+45	; 0x2d
    39f6:	9e a5       	ldd	r25, Y+46	; 0x2e
    39f8:	01 97       	sbiw	r24, 0x01	; 1
    39fa:	f1 f7       	brne	.-4      	; 0x39f8 <LCD_displayCharacter+0x558>
    39fc:	9e a7       	std	Y+46, r25	; 0x2e
    39fe:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a00:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a02:	98 a9       	ldd	r25, Y+48	; 0x30
    3a04:	01 97       	sbiw	r24, 0x01	; 1
    3a06:	98 ab       	std	Y+48, r25	; 0x30
    3a08:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a0a:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a0c:	98 a9       	ldd	r25, Y+48	; 0x30
    3a0e:	00 97       	sbiw	r24, 0x00	; 0
    3a10:	69 f7       	brne	.-38     	; 0x39ec <LCD_displayCharacter+0x54c>
    3a12:	14 c0       	rjmp	.+40     	; 0x3a3c <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a14:	69 a9       	ldd	r22, Y+49	; 0x31
    3a16:	7a a9       	ldd	r23, Y+50	; 0x32
    3a18:	8b a9       	ldd	r24, Y+51	; 0x33
    3a1a:	9c a9       	ldd	r25, Y+52	; 0x34
    3a1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a20:	dc 01       	movw	r26, r24
    3a22:	cb 01       	movw	r24, r22
    3a24:	98 ab       	std	Y+48, r25	; 0x30
    3a26:	8f a7       	std	Y+47, r24	; 0x2f
    3a28:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a2a:	98 a9       	ldd	r25, Y+48	; 0x30
    3a2c:	9c a7       	std	Y+44, r25	; 0x2c
    3a2e:	8b a7       	std	Y+43, r24	; 0x2b
    3a30:	8b a5       	ldd	r24, Y+43	; 0x2b
    3a32:	9c a5       	ldd	r25, Y+44	; 0x2c
    3a34:	01 97       	sbiw	r24, 0x01	; 1
    3a36:	f1 f7       	brne	.-4      	; 0x3a34 <LCD_displayCharacter+0x594>
    3a38:	9c a7       	std	Y+44, r25	; 0x2c
    3a3a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    3a3c:	80 e0       	ldi	r24, 0x00	; 0
    3a3e:	62 e0       	ldi	r22, 0x02	; 2
    3a40:	41 e0       	ldi	r20, 0x01	; 1
    3a42:	0e 94 33 11 	call	0x2266	; 0x2266 <GPIO_writePin>
    3a46:	80 e0       	ldi	r24, 0x00	; 0
    3a48:	90 e0       	ldi	r25, 0x00	; 0
    3a4a:	a0 e8       	ldi	r26, 0x80	; 128
    3a4c:	bf e3       	ldi	r27, 0x3F	; 63
    3a4e:	8f a3       	std	Y+39, r24	; 0x27
    3a50:	98 a7       	std	Y+40, r25	; 0x28
    3a52:	a9 a7       	std	Y+41, r26	; 0x29
    3a54:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a56:	6f a1       	ldd	r22, Y+39	; 0x27
    3a58:	78 a5       	ldd	r23, Y+40	; 0x28
    3a5a:	89 a5       	ldd	r24, Y+41	; 0x29
    3a5c:	9a a5       	ldd	r25, Y+42	; 0x2a
    3a5e:	20 e0       	ldi	r18, 0x00	; 0
    3a60:	30 e0       	ldi	r19, 0x00	; 0
    3a62:	4a ef       	ldi	r20, 0xFA	; 250
    3a64:	54 e4       	ldi	r21, 0x44	; 68
    3a66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a6a:	dc 01       	movw	r26, r24
    3a6c:	cb 01       	movw	r24, r22
    3a6e:	8b a3       	std	Y+35, r24	; 0x23
    3a70:	9c a3       	std	Y+36, r25	; 0x24
    3a72:	ad a3       	std	Y+37, r26	; 0x25
    3a74:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3a76:	6b a1       	ldd	r22, Y+35	; 0x23
    3a78:	7c a1       	ldd	r23, Y+36	; 0x24
    3a7a:	8d a1       	ldd	r24, Y+37	; 0x25
    3a7c:	9e a1       	ldd	r25, Y+38	; 0x26
    3a7e:	20 e0       	ldi	r18, 0x00	; 0
    3a80:	30 e0       	ldi	r19, 0x00	; 0
    3a82:	40 e8       	ldi	r20, 0x80	; 128
    3a84:	5f e3       	ldi	r21, 0x3F	; 63
    3a86:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a8a:	88 23       	and	r24, r24
    3a8c:	2c f4       	brge	.+10     	; 0x3a98 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    3a8e:	81 e0       	ldi	r24, 0x01	; 1
    3a90:	90 e0       	ldi	r25, 0x00	; 0
    3a92:	9a a3       	std	Y+34, r25	; 0x22
    3a94:	89 a3       	std	Y+33, r24	; 0x21
    3a96:	3f c0       	rjmp	.+126    	; 0x3b16 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    3a98:	6b a1       	ldd	r22, Y+35	; 0x23
    3a9a:	7c a1       	ldd	r23, Y+36	; 0x24
    3a9c:	8d a1       	ldd	r24, Y+37	; 0x25
    3a9e:	9e a1       	ldd	r25, Y+38	; 0x26
    3aa0:	20 e0       	ldi	r18, 0x00	; 0
    3aa2:	3f ef       	ldi	r19, 0xFF	; 255
    3aa4:	4f e7       	ldi	r20, 0x7F	; 127
    3aa6:	57 e4       	ldi	r21, 0x47	; 71
    3aa8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3aac:	18 16       	cp	r1, r24
    3aae:	4c f5       	brge	.+82     	; 0x3b02 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ab0:	6f a1       	ldd	r22, Y+39	; 0x27
    3ab2:	78 a5       	ldd	r23, Y+40	; 0x28
    3ab4:	89 a5       	ldd	r24, Y+41	; 0x29
    3ab6:	9a a5       	ldd	r25, Y+42	; 0x2a
    3ab8:	20 e0       	ldi	r18, 0x00	; 0
    3aba:	30 e0       	ldi	r19, 0x00	; 0
    3abc:	40 e2       	ldi	r20, 0x20	; 32
    3abe:	51 e4       	ldi	r21, 0x41	; 65
    3ac0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ac4:	dc 01       	movw	r26, r24
    3ac6:	cb 01       	movw	r24, r22
    3ac8:	bc 01       	movw	r22, r24
    3aca:	cd 01       	movw	r24, r26
    3acc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ad0:	dc 01       	movw	r26, r24
    3ad2:	cb 01       	movw	r24, r22
    3ad4:	9a a3       	std	Y+34, r25	; 0x22
    3ad6:	89 a3       	std	Y+33, r24	; 0x21
    3ad8:	0f c0       	rjmp	.+30     	; 0x3af8 <LCD_displayCharacter+0x658>
    3ada:	88 ec       	ldi	r24, 0xC8	; 200
    3adc:	90 e0       	ldi	r25, 0x00	; 0
    3ade:	98 a3       	std	Y+32, r25	; 0x20
    3ae0:	8f 8f       	std	Y+31, r24	; 0x1f
    3ae2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3ae4:	98 a1       	ldd	r25, Y+32	; 0x20
    3ae6:	01 97       	sbiw	r24, 0x01	; 1
    3ae8:	f1 f7       	brne	.-4      	; 0x3ae6 <LCD_displayCharacter+0x646>
    3aea:	98 a3       	std	Y+32, r25	; 0x20
    3aec:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3aee:	89 a1       	ldd	r24, Y+33	; 0x21
    3af0:	9a a1       	ldd	r25, Y+34	; 0x22
    3af2:	01 97       	sbiw	r24, 0x01	; 1
    3af4:	9a a3       	std	Y+34, r25	; 0x22
    3af6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3af8:	89 a1       	ldd	r24, Y+33	; 0x21
    3afa:	9a a1       	ldd	r25, Y+34	; 0x22
    3afc:	00 97       	sbiw	r24, 0x00	; 0
    3afe:	69 f7       	brne	.-38     	; 0x3ada <LCD_displayCharacter+0x63a>
    3b00:	14 c0       	rjmp	.+40     	; 0x3b2a <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b02:	6b a1       	ldd	r22, Y+35	; 0x23
    3b04:	7c a1       	ldd	r23, Y+36	; 0x24
    3b06:	8d a1       	ldd	r24, Y+37	; 0x25
    3b08:	9e a1       	ldd	r25, Y+38	; 0x26
    3b0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b0e:	dc 01       	movw	r26, r24
    3b10:	cb 01       	movw	r24, r22
    3b12:	9a a3       	std	Y+34, r25	; 0x22
    3b14:	89 a3       	std	Y+33, r24	; 0x21
    3b16:	89 a1       	ldd	r24, Y+33	; 0x21
    3b18:	9a a1       	ldd	r25, Y+34	; 0x22
    3b1a:	9e 8f       	std	Y+30, r25	; 0x1e
    3b1c:	8d 8f       	std	Y+29, r24	; 0x1d
    3b1e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3b20:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3b22:	01 97       	sbiw	r24, 0x01	; 1
    3b24:	f1 f7       	brne	.-4      	; 0x3b22 <LCD_displayCharacter+0x682>
    3b26:	9e 8f       	std	Y+30, r25	; 0x1e
    3b28:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    3b2a:	fe 01       	movw	r30, r28
    3b2c:	ed 59       	subi	r30, 0x9D	; 157
    3b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b30:	80 81       	ld	r24, Z
    3b32:	98 2f       	mov	r25, r24
    3b34:	91 70       	andi	r25, 0x01	; 1
    3b36:	80 e0       	ldi	r24, 0x00	; 0
    3b38:	63 e0       	ldi	r22, 0x03	; 3
    3b3a:	49 2f       	mov	r20, r25
    3b3c:	0e 94 33 11 	call	0x2266	; 0x2266 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    3b40:	fe 01       	movw	r30, r28
    3b42:	ed 59       	subi	r30, 0x9D	; 157
    3b44:	ff 4f       	sbci	r31, 0xFF	; 255
    3b46:	80 81       	ld	r24, Z
    3b48:	88 2f       	mov	r24, r24
    3b4a:	90 e0       	ldi	r25, 0x00	; 0
    3b4c:	82 70       	andi	r24, 0x02	; 2
    3b4e:	90 70       	andi	r25, 0x00	; 0
    3b50:	95 95       	asr	r25
    3b52:	87 95       	ror	r24
    3b54:	98 2f       	mov	r25, r24
    3b56:	80 e0       	ldi	r24, 0x00	; 0
    3b58:	64 e0       	ldi	r22, 0x04	; 4
    3b5a:	49 2f       	mov	r20, r25
    3b5c:	0e 94 33 11 	call	0x2266	; 0x2266 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    3b60:	fe 01       	movw	r30, r28
    3b62:	ed 59       	subi	r30, 0x9D	; 157
    3b64:	ff 4f       	sbci	r31, 0xFF	; 255
    3b66:	80 81       	ld	r24, Z
    3b68:	88 2f       	mov	r24, r24
    3b6a:	90 e0       	ldi	r25, 0x00	; 0
    3b6c:	84 70       	andi	r24, 0x04	; 4
    3b6e:	90 70       	andi	r25, 0x00	; 0
    3b70:	95 95       	asr	r25
    3b72:	87 95       	ror	r24
    3b74:	95 95       	asr	r25
    3b76:	87 95       	ror	r24
    3b78:	98 2f       	mov	r25, r24
    3b7a:	80 e0       	ldi	r24, 0x00	; 0
    3b7c:	65 e0       	ldi	r22, 0x05	; 5
    3b7e:	49 2f       	mov	r20, r25
    3b80:	0e 94 33 11 	call	0x2266	; 0x2266 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    3b84:	fe 01       	movw	r30, r28
    3b86:	ed 59       	subi	r30, 0x9D	; 157
    3b88:	ff 4f       	sbci	r31, 0xFF	; 255
    3b8a:	80 81       	ld	r24, Z
    3b8c:	88 2f       	mov	r24, r24
    3b8e:	90 e0       	ldi	r25, 0x00	; 0
    3b90:	88 70       	andi	r24, 0x08	; 8
    3b92:	90 70       	andi	r25, 0x00	; 0
    3b94:	95 95       	asr	r25
    3b96:	87 95       	ror	r24
    3b98:	95 95       	asr	r25
    3b9a:	87 95       	ror	r24
    3b9c:	95 95       	asr	r25
    3b9e:	87 95       	ror	r24
    3ba0:	98 2f       	mov	r25, r24
    3ba2:	80 e0       	ldi	r24, 0x00	; 0
    3ba4:	66 e0       	ldi	r22, 0x06	; 6
    3ba6:	49 2f       	mov	r20, r25
    3ba8:	0e 94 33 11 	call	0x2266	; 0x2266 <GPIO_writePin>
    3bac:	80 e0       	ldi	r24, 0x00	; 0
    3bae:	90 e0       	ldi	r25, 0x00	; 0
    3bb0:	a0 e8       	ldi	r26, 0x80	; 128
    3bb2:	bf e3       	ldi	r27, 0x3F	; 63
    3bb4:	89 8f       	std	Y+25, r24	; 0x19
    3bb6:	9a 8f       	std	Y+26, r25	; 0x1a
    3bb8:	ab 8f       	std	Y+27, r26	; 0x1b
    3bba:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bbc:	69 8d       	ldd	r22, Y+25	; 0x19
    3bbe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3bc0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3bc2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3bc4:	20 e0       	ldi	r18, 0x00	; 0
    3bc6:	30 e0       	ldi	r19, 0x00	; 0
    3bc8:	4a ef       	ldi	r20, 0xFA	; 250
    3bca:	54 e4       	ldi	r21, 0x44	; 68
    3bcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bd0:	dc 01       	movw	r26, r24
    3bd2:	cb 01       	movw	r24, r22
    3bd4:	8d 8b       	std	Y+21, r24	; 0x15
    3bd6:	9e 8b       	std	Y+22, r25	; 0x16
    3bd8:	af 8b       	std	Y+23, r26	; 0x17
    3bda:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3bdc:	6d 89       	ldd	r22, Y+21	; 0x15
    3bde:	7e 89       	ldd	r23, Y+22	; 0x16
    3be0:	8f 89       	ldd	r24, Y+23	; 0x17
    3be2:	98 8d       	ldd	r25, Y+24	; 0x18
    3be4:	20 e0       	ldi	r18, 0x00	; 0
    3be6:	30 e0       	ldi	r19, 0x00	; 0
    3be8:	40 e8       	ldi	r20, 0x80	; 128
    3bea:	5f e3       	ldi	r21, 0x3F	; 63
    3bec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3bf0:	88 23       	and	r24, r24
    3bf2:	2c f4       	brge	.+10     	; 0x3bfe <LCD_displayCharacter+0x75e>
		__ticks = 1;
    3bf4:	81 e0       	ldi	r24, 0x01	; 1
    3bf6:	90 e0       	ldi	r25, 0x00	; 0
    3bf8:	9c 8b       	std	Y+20, r25	; 0x14
    3bfa:	8b 8b       	std	Y+19, r24	; 0x13
    3bfc:	3f c0       	rjmp	.+126    	; 0x3c7c <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    3bfe:	6d 89       	ldd	r22, Y+21	; 0x15
    3c00:	7e 89       	ldd	r23, Y+22	; 0x16
    3c02:	8f 89       	ldd	r24, Y+23	; 0x17
    3c04:	98 8d       	ldd	r25, Y+24	; 0x18
    3c06:	20 e0       	ldi	r18, 0x00	; 0
    3c08:	3f ef       	ldi	r19, 0xFF	; 255
    3c0a:	4f e7       	ldi	r20, 0x7F	; 127
    3c0c:	57 e4       	ldi	r21, 0x47	; 71
    3c0e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3c12:	18 16       	cp	r1, r24
    3c14:	4c f5       	brge	.+82     	; 0x3c68 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c16:	69 8d       	ldd	r22, Y+25	; 0x19
    3c18:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3c1a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c1c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3c1e:	20 e0       	ldi	r18, 0x00	; 0
    3c20:	30 e0       	ldi	r19, 0x00	; 0
    3c22:	40 e2       	ldi	r20, 0x20	; 32
    3c24:	51 e4       	ldi	r21, 0x41	; 65
    3c26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c2a:	dc 01       	movw	r26, r24
    3c2c:	cb 01       	movw	r24, r22
    3c2e:	bc 01       	movw	r22, r24
    3c30:	cd 01       	movw	r24, r26
    3c32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c36:	dc 01       	movw	r26, r24
    3c38:	cb 01       	movw	r24, r22
    3c3a:	9c 8b       	std	Y+20, r25	; 0x14
    3c3c:	8b 8b       	std	Y+19, r24	; 0x13
    3c3e:	0f c0       	rjmp	.+30     	; 0x3c5e <LCD_displayCharacter+0x7be>
    3c40:	88 ec       	ldi	r24, 0xC8	; 200
    3c42:	90 e0       	ldi	r25, 0x00	; 0
    3c44:	9a 8b       	std	Y+18, r25	; 0x12
    3c46:	89 8b       	std	Y+17, r24	; 0x11
    3c48:	89 89       	ldd	r24, Y+17	; 0x11
    3c4a:	9a 89       	ldd	r25, Y+18	; 0x12
    3c4c:	01 97       	sbiw	r24, 0x01	; 1
    3c4e:	f1 f7       	brne	.-4      	; 0x3c4c <LCD_displayCharacter+0x7ac>
    3c50:	9a 8b       	std	Y+18, r25	; 0x12
    3c52:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c54:	8b 89       	ldd	r24, Y+19	; 0x13
    3c56:	9c 89       	ldd	r25, Y+20	; 0x14
    3c58:	01 97       	sbiw	r24, 0x01	; 1
    3c5a:	9c 8b       	std	Y+20, r25	; 0x14
    3c5c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c5e:	8b 89       	ldd	r24, Y+19	; 0x13
    3c60:	9c 89       	ldd	r25, Y+20	; 0x14
    3c62:	00 97       	sbiw	r24, 0x00	; 0
    3c64:	69 f7       	brne	.-38     	; 0x3c40 <LCD_displayCharacter+0x7a0>
    3c66:	14 c0       	rjmp	.+40     	; 0x3c90 <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c68:	6d 89       	ldd	r22, Y+21	; 0x15
    3c6a:	7e 89       	ldd	r23, Y+22	; 0x16
    3c6c:	8f 89       	ldd	r24, Y+23	; 0x17
    3c6e:	98 8d       	ldd	r25, Y+24	; 0x18
    3c70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c74:	dc 01       	movw	r26, r24
    3c76:	cb 01       	movw	r24, r22
    3c78:	9c 8b       	std	Y+20, r25	; 0x14
    3c7a:	8b 8b       	std	Y+19, r24	; 0x13
    3c7c:	8b 89       	ldd	r24, Y+19	; 0x13
    3c7e:	9c 89       	ldd	r25, Y+20	; 0x14
    3c80:	98 8b       	std	Y+16, r25	; 0x10
    3c82:	8f 87       	std	Y+15, r24	; 0x0f
    3c84:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c86:	98 89       	ldd	r25, Y+16	; 0x10
    3c88:	01 97       	sbiw	r24, 0x01	; 1
    3c8a:	f1 f7       	brne	.-4      	; 0x3c88 <LCD_displayCharacter+0x7e8>
    3c8c:	98 8b       	std	Y+16, r25	; 0x10
    3c8e:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    3c90:	80 e0       	ldi	r24, 0x00	; 0
    3c92:	62 e0       	ldi	r22, 0x02	; 2
    3c94:	40 e0       	ldi	r20, 0x00	; 0
    3c96:	0e 94 33 11 	call	0x2266	; 0x2266 <GPIO_writePin>
    3c9a:	80 e0       	ldi	r24, 0x00	; 0
    3c9c:	90 e0       	ldi	r25, 0x00	; 0
    3c9e:	a0 e8       	ldi	r26, 0x80	; 128
    3ca0:	bf e3       	ldi	r27, 0x3F	; 63
    3ca2:	8b 87       	std	Y+11, r24	; 0x0b
    3ca4:	9c 87       	std	Y+12, r25	; 0x0c
    3ca6:	ad 87       	std	Y+13, r26	; 0x0d
    3ca8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3caa:	6b 85       	ldd	r22, Y+11	; 0x0b
    3cac:	7c 85       	ldd	r23, Y+12	; 0x0c
    3cae:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cb0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cb2:	20 e0       	ldi	r18, 0x00	; 0
    3cb4:	30 e0       	ldi	r19, 0x00	; 0
    3cb6:	4a ef       	ldi	r20, 0xFA	; 250
    3cb8:	54 e4       	ldi	r21, 0x44	; 68
    3cba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cbe:	dc 01       	movw	r26, r24
    3cc0:	cb 01       	movw	r24, r22
    3cc2:	8f 83       	std	Y+7, r24	; 0x07
    3cc4:	98 87       	std	Y+8, r25	; 0x08
    3cc6:	a9 87       	std	Y+9, r26	; 0x09
    3cc8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3cca:	6f 81       	ldd	r22, Y+7	; 0x07
    3ccc:	78 85       	ldd	r23, Y+8	; 0x08
    3cce:	89 85       	ldd	r24, Y+9	; 0x09
    3cd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cd2:	20 e0       	ldi	r18, 0x00	; 0
    3cd4:	30 e0       	ldi	r19, 0x00	; 0
    3cd6:	40 e8       	ldi	r20, 0x80	; 128
    3cd8:	5f e3       	ldi	r21, 0x3F	; 63
    3cda:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3cde:	88 23       	and	r24, r24
    3ce0:	2c f4       	brge	.+10     	; 0x3cec <LCD_displayCharacter+0x84c>
		__ticks = 1;
    3ce2:	81 e0       	ldi	r24, 0x01	; 1
    3ce4:	90 e0       	ldi	r25, 0x00	; 0
    3ce6:	9e 83       	std	Y+6, r25	; 0x06
    3ce8:	8d 83       	std	Y+5, r24	; 0x05
    3cea:	3f c0       	rjmp	.+126    	; 0x3d6a <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    3cec:	6f 81       	ldd	r22, Y+7	; 0x07
    3cee:	78 85       	ldd	r23, Y+8	; 0x08
    3cf0:	89 85       	ldd	r24, Y+9	; 0x09
    3cf2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cf4:	20 e0       	ldi	r18, 0x00	; 0
    3cf6:	3f ef       	ldi	r19, 0xFF	; 255
    3cf8:	4f e7       	ldi	r20, 0x7F	; 127
    3cfa:	57 e4       	ldi	r21, 0x47	; 71
    3cfc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3d00:	18 16       	cp	r1, r24
    3d02:	4c f5       	brge	.+82     	; 0x3d56 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d04:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d06:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d08:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d0c:	20 e0       	ldi	r18, 0x00	; 0
    3d0e:	30 e0       	ldi	r19, 0x00	; 0
    3d10:	40 e2       	ldi	r20, 0x20	; 32
    3d12:	51 e4       	ldi	r21, 0x41	; 65
    3d14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d18:	dc 01       	movw	r26, r24
    3d1a:	cb 01       	movw	r24, r22
    3d1c:	bc 01       	movw	r22, r24
    3d1e:	cd 01       	movw	r24, r26
    3d20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d24:	dc 01       	movw	r26, r24
    3d26:	cb 01       	movw	r24, r22
    3d28:	9e 83       	std	Y+6, r25	; 0x06
    3d2a:	8d 83       	std	Y+5, r24	; 0x05
    3d2c:	0f c0       	rjmp	.+30     	; 0x3d4c <LCD_displayCharacter+0x8ac>
    3d2e:	88 ec       	ldi	r24, 0xC8	; 200
    3d30:	90 e0       	ldi	r25, 0x00	; 0
    3d32:	9c 83       	std	Y+4, r25	; 0x04
    3d34:	8b 83       	std	Y+3, r24	; 0x03
    3d36:	8b 81       	ldd	r24, Y+3	; 0x03
    3d38:	9c 81       	ldd	r25, Y+4	; 0x04
    3d3a:	01 97       	sbiw	r24, 0x01	; 1
    3d3c:	f1 f7       	brne	.-4      	; 0x3d3a <LCD_displayCharacter+0x89a>
    3d3e:	9c 83       	std	Y+4, r25	; 0x04
    3d40:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d42:	8d 81       	ldd	r24, Y+5	; 0x05
    3d44:	9e 81       	ldd	r25, Y+6	; 0x06
    3d46:	01 97       	sbiw	r24, 0x01	; 1
    3d48:	9e 83       	std	Y+6, r25	; 0x06
    3d4a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d4c:	8d 81       	ldd	r24, Y+5	; 0x05
    3d4e:	9e 81       	ldd	r25, Y+6	; 0x06
    3d50:	00 97       	sbiw	r24, 0x00	; 0
    3d52:	69 f7       	brne	.-38     	; 0x3d2e <LCD_displayCharacter+0x88e>
    3d54:	14 c0       	rjmp	.+40     	; 0x3d7e <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d56:	6f 81       	ldd	r22, Y+7	; 0x07
    3d58:	78 85       	ldd	r23, Y+8	; 0x08
    3d5a:	89 85       	ldd	r24, Y+9	; 0x09
    3d5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d62:	dc 01       	movw	r26, r24
    3d64:	cb 01       	movw	r24, r22
    3d66:	9e 83       	std	Y+6, r25	; 0x06
    3d68:	8d 83       	std	Y+5, r24	; 0x05
    3d6a:	8d 81       	ldd	r24, Y+5	; 0x05
    3d6c:	9e 81       	ldd	r25, Y+6	; 0x06
    3d6e:	9a 83       	std	Y+2, r25	; 0x02
    3d70:	89 83       	std	Y+1, r24	; 0x01
    3d72:	89 81       	ldd	r24, Y+1	; 0x01
    3d74:	9a 81       	ldd	r25, Y+2	; 0x02
    3d76:	01 97       	sbiw	r24, 0x01	; 1
    3d78:	f1 f7       	brne	.-4      	; 0x3d76 <LCD_displayCharacter+0x8d6>
    3d7a:	9a 83       	std	Y+2, r25	; 0x02
    3d7c:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    3d7e:	cd 59       	subi	r28, 0x9D	; 157
    3d80:	df 4f       	sbci	r29, 0xFF	; 255
    3d82:	0f b6       	in	r0, 0x3f	; 63
    3d84:	f8 94       	cli
    3d86:	de bf       	out	0x3e, r29	; 62
    3d88:	0f be       	out	0x3f, r0	; 63
    3d8a:	cd bf       	out	0x3d, r28	; 61
    3d8c:	cf 91       	pop	r28
    3d8e:	df 91       	pop	r29
    3d90:	1f 91       	pop	r17
    3d92:	0f 91       	pop	r16
    3d94:	08 95       	ret

00003d96 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    3d96:	df 93       	push	r29
    3d98:	cf 93       	push	r28
    3d9a:	00 d0       	rcall	.+0      	; 0x3d9c <LCD_displayString+0x6>
    3d9c:	0f 92       	push	r0
    3d9e:	cd b7       	in	r28, 0x3d	; 61
    3da0:	de b7       	in	r29, 0x3e	; 62
    3da2:	9b 83       	std	Y+3, r25	; 0x03
    3da4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3da6:	19 82       	std	Y+1, r1	; 0x01
    3da8:	0e c0       	rjmp	.+28     	; 0x3dc6 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    3daa:	89 81       	ldd	r24, Y+1	; 0x01
    3dac:	28 2f       	mov	r18, r24
    3dae:	30 e0       	ldi	r19, 0x00	; 0
    3db0:	8a 81       	ldd	r24, Y+2	; 0x02
    3db2:	9b 81       	ldd	r25, Y+3	; 0x03
    3db4:	fc 01       	movw	r30, r24
    3db6:	e2 0f       	add	r30, r18
    3db8:	f3 1f       	adc	r31, r19
    3dba:	80 81       	ld	r24, Z
    3dbc:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <LCD_displayCharacter>
		i++;
    3dc0:	89 81       	ldd	r24, Y+1	; 0x01
    3dc2:	8f 5f       	subi	r24, 0xFF	; 255
    3dc4:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    3dc6:	89 81       	ldd	r24, Y+1	; 0x01
    3dc8:	28 2f       	mov	r18, r24
    3dca:	30 e0       	ldi	r19, 0x00	; 0
    3dcc:	8a 81       	ldd	r24, Y+2	; 0x02
    3dce:	9b 81       	ldd	r25, Y+3	; 0x03
    3dd0:	fc 01       	movw	r30, r24
    3dd2:	e2 0f       	add	r30, r18
    3dd4:	f3 1f       	adc	r31, r19
    3dd6:	80 81       	ld	r24, Z
    3dd8:	88 23       	and	r24, r24
    3dda:	39 f7       	brne	.-50     	; 0x3daa <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    3ddc:	0f 90       	pop	r0
    3dde:	0f 90       	pop	r0
    3de0:	0f 90       	pop	r0
    3de2:	cf 91       	pop	r28
    3de4:	df 91       	pop	r29
    3de6:	08 95       	ret

00003de8 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    3de8:	df 93       	push	r29
    3dea:	cf 93       	push	r28
    3dec:	00 d0       	rcall	.+0      	; 0x3dee <LCD_moveCursor+0x6>
    3dee:	00 d0       	rcall	.+0      	; 0x3df0 <LCD_moveCursor+0x8>
    3df0:	0f 92       	push	r0
    3df2:	cd b7       	in	r28, 0x3d	; 61
    3df4:	de b7       	in	r29, 0x3e	; 62
    3df6:	8a 83       	std	Y+2, r24	; 0x02
    3df8:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    3dfa:	8a 81       	ldd	r24, Y+2	; 0x02
    3dfc:	28 2f       	mov	r18, r24
    3dfe:	30 e0       	ldi	r19, 0x00	; 0
    3e00:	3d 83       	std	Y+5, r19	; 0x05
    3e02:	2c 83       	std	Y+4, r18	; 0x04
    3e04:	8c 81       	ldd	r24, Y+4	; 0x04
    3e06:	9d 81       	ldd	r25, Y+5	; 0x05
    3e08:	81 30       	cpi	r24, 0x01	; 1
    3e0a:	91 05       	cpc	r25, r1
    3e0c:	c1 f0       	breq	.+48     	; 0x3e3e <LCD_moveCursor+0x56>
    3e0e:	2c 81       	ldd	r18, Y+4	; 0x04
    3e10:	3d 81       	ldd	r19, Y+5	; 0x05
    3e12:	22 30       	cpi	r18, 0x02	; 2
    3e14:	31 05       	cpc	r19, r1
    3e16:	2c f4       	brge	.+10     	; 0x3e22 <LCD_moveCursor+0x3a>
    3e18:	8c 81       	ldd	r24, Y+4	; 0x04
    3e1a:	9d 81       	ldd	r25, Y+5	; 0x05
    3e1c:	00 97       	sbiw	r24, 0x00	; 0
    3e1e:	61 f0       	breq	.+24     	; 0x3e38 <LCD_moveCursor+0x50>
    3e20:	19 c0       	rjmp	.+50     	; 0x3e54 <LCD_moveCursor+0x6c>
    3e22:	2c 81       	ldd	r18, Y+4	; 0x04
    3e24:	3d 81       	ldd	r19, Y+5	; 0x05
    3e26:	22 30       	cpi	r18, 0x02	; 2
    3e28:	31 05       	cpc	r19, r1
    3e2a:	69 f0       	breq	.+26     	; 0x3e46 <LCD_moveCursor+0x5e>
    3e2c:	8c 81       	ldd	r24, Y+4	; 0x04
    3e2e:	9d 81       	ldd	r25, Y+5	; 0x05
    3e30:	83 30       	cpi	r24, 0x03	; 3
    3e32:	91 05       	cpc	r25, r1
    3e34:	61 f0       	breq	.+24     	; 0x3e4e <LCD_moveCursor+0x66>
    3e36:	0e c0       	rjmp	.+28     	; 0x3e54 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    3e38:	8b 81       	ldd	r24, Y+3	; 0x03
    3e3a:	89 83       	std	Y+1, r24	; 0x01
    3e3c:	0b c0       	rjmp	.+22     	; 0x3e54 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    3e3e:	8b 81       	ldd	r24, Y+3	; 0x03
    3e40:	80 5c       	subi	r24, 0xC0	; 192
    3e42:	89 83       	std	Y+1, r24	; 0x01
    3e44:	07 c0       	rjmp	.+14     	; 0x3e54 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    3e46:	8b 81       	ldd	r24, Y+3	; 0x03
    3e48:	80 5f       	subi	r24, 0xF0	; 240
    3e4a:	89 83       	std	Y+1, r24	; 0x01
    3e4c:	03 c0       	rjmp	.+6      	; 0x3e54 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    3e4e:	8b 81       	ldd	r24, Y+3	; 0x03
    3e50:	80 5b       	subi	r24, 0xB0	; 176
    3e52:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    3e54:	89 81       	ldd	r24, Y+1	; 0x01
    3e56:	80 68       	ori	r24, 0x80	; 128
    3e58:	0e 94 d5 15 	call	0x2baa	; 0x2baa <LCD_sendCommand>
}
    3e5c:	0f 90       	pop	r0
    3e5e:	0f 90       	pop	r0
    3e60:	0f 90       	pop	r0
    3e62:	0f 90       	pop	r0
    3e64:	0f 90       	pop	r0
    3e66:	cf 91       	pop	r28
    3e68:	df 91       	pop	r29
    3e6a:	08 95       	ret

00003e6c <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    3e6c:	df 93       	push	r29
    3e6e:	cf 93       	push	r28
    3e70:	00 d0       	rcall	.+0      	; 0x3e72 <LCD_displayStringRowColumn+0x6>
    3e72:	00 d0       	rcall	.+0      	; 0x3e74 <LCD_displayStringRowColumn+0x8>
    3e74:	cd b7       	in	r28, 0x3d	; 61
    3e76:	de b7       	in	r29, 0x3e	; 62
    3e78:	89 83       	std	Y+1, r24	; 0x01
    3e7a:	6a 83       	std	Y+2, r22	; 0x02
    3e7c:	5c 83       	std	Y+4, r21	; 0x04
    3e7e:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    3e80:	89 81       	ldd	r24, Y+1	; 0x01
    3e82:	6a 81       	ldd	r22, Y+2	; 0x02
    3e84:	0e 94 f4 1e 	call	0x3de8	; 0x3de8 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    3e88:	8b 81       	ldd	r24, Y+3	; 0x03
    3e8a:	9c 81       	ldd	r25, Y+4	; 0x04
    3e8c:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <LCD_displayString>
}
    3e90:	0f 90       	pop	r0
    3e92:	0f 90       	pop	r0
    3e94:	0f 90       	pop	r0
    3e96:	0f 90       	pop	r0
    3e98:	cf 91       	pop	r28
    3e9a:	df 91       	pop	r29
    3e9c:	08 95       	ret

00003e9e <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    3e9e:	df 93       	push	r29
    3ea0:	cf 93       	push	r28
    3ea2:	cd b7       	in	r28, 0x3d	; 61
    3ea4:	de b7       	in	r29, 0x3e	; 62
    3ea6:	62 97       	sbiw	r28, 0x12	; 18
    3ea8:	0f b6       	in	r0, 0x3f	; 63
    3eaa:	f8 94       	cli
    3eac:	de bf       	out	0x3e, r29	; 62
    3eae:	0f be       	out	0x3f, r0	; 63
    3eb0:	cd bf       	out	0x3d, r28	; 61
    3eb2:	9a 8b       	std	Y+18, r25	; 0x12
    3eb4:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    3eb6:	89 89       	ldd	r24, Y+17	; 0x11
    3eb8:	9a 89       	ldd	r25, Y+18	; 0x12
    3eba:	9e 01       	movw	r18, r28
    3ebc:	2f 5f       	subi	r18, 0xFF	; 255
    3ebe:	3f 4f       	sbci	r19, 0xFF	; 255
    3ec0:	b9 01       	movw	r22, r18
    3ec2:	4a e0       	ldi	r20, 0x0A	; 10
    3ec4:	50 e0       	ldi	r21, 0x00	; 0
    3ec6:	0e 94 93 21 	call	0x4326	; 0x4326 <itoa>
   LCD_displayString(buff); /* Display the string */
    3eca:	ce 01       	movw	r24, r28
    3ecc:	01 96       	adiw	r24, 0x01	; 1
    3ece:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <LCD_displayString>
}
    3ed2:	62 96       	adiw	r28, 0x12	; 18
    3ed4:	0f b6       	in	r0, 0x3f	; 63
    3ed6:	f8 94       	cli
    3ed8:	de bf       	out	0x3e, r29	; 62
    3eda:	0f be       	out	0x3f, r0	; 63
    3edc:	cd bf       	out	0x3d, r28	; 61
    3ede:	cf 91       	pop	r28
    3ee0:	df 91       	pop	r29
    3ee2:	08 95       	ret

00003ee4 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    3ee4:	df 93       	push	r29
    3ee6:	cf 93       	push	r28
    3ee8:	cd b7       	in	r28, 0x3d	; 61
    3eea:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    3eec:	81 e0       	ldi	r24, 0x01	; 1
    3eee:	0e 94 d5 15 	call	0x2baa	; 0x2baa <LCD_sendCommand>
}
    3ef2:	cf 91       	pop	r28
    3ef4:	df 91       	pop	r29
    3ef6:	08 95       	ret

00003ef8 <Timer1_init>:
#include <avr/interrupt.h>

void(*callBack)(void) ;

void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    3ef8:	df 93       	push	r29
    3efa:	cf 93       	push	r28
    3efc:	00 d0       	rcall	.+0      	; 0x3efe <Timer1_init+0x6>
    3efe:	cd b7       	in	r28, 0x3d	; 61
    3f00:	de b7       	in	r29, 0x3e	; 62
    3f02:	9a 83       	std	Y+2, r25	; 0x02
    3f04:	89 83       	std	Y+1, r24	; 0x01
	TCCR1A = (1<<FOC1A);
    3f06:	ef e4       	ldi	r30, 0x4F	; 79
    3f08:	f0 e0       	ldi	r31, 0x00	; 0
    3f0a:	88 e0       	ldi	r24, 0x08	; 8
    3f0c:	80 83       	st	Z, r24


	TCCR1B = (Config_Ptr->mode << WGM12);
    3f0e:	ae e4       	ldi	r26, 0x4E	; 78
    3f10:	b0 e0       	ldi	r27, 0x00	; 0
    3f12:	e9 81       	ldd	r30, Y+1	; 0x01
    3f14:	fa 81       	ldd	r31, Y+2	; 0x02
    3f16:	85 81       	ldd	r24, Z+5	; 0x05
    3f18:	88 0f       	add	r24, r24
    3f1a:	88 0f       	add	r24, r24
    3f1c:	88 0f       	add	r24, r24
    3f1e:	8c 93       	st	X, r24

	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->prescaler & 0x7) ;
    3f20:	ae e4       	ldi	r26, 0x4E	; 78
    3f22:	b0 e0       	ldi	r27, 0x00	; 0
    3f24:	ee e4       	ldi	r30, 0x4E	; 78
    3f26:	f0 e0       	ldi	r31, 0x00	; 0
    3f28:	80 81       	ld	r24, Z
    3f2a:	98 2f       	mov	r25, r24
    3f2c:	98 7f       	andi	r25, 0xF8	; 248
    3f2e:	e9 81       	ldd	r30, Y+1	; 0x01
    3f30:	fa 81       	ldd	r31, Y+2	; 0x02
    3f32:	84 81       	ldd	r24, Z+4	; 0x04
    3f34:	87 70       	andi	r24, 0x07	; 7
    3f36:	89 2b       	or	r24, r25
    3f38:	8c 93       	st	X, r24

	TCNT1 = Config_Ptr->initial_value ;
    3f3a:	ac e4       	ldi	r26, 0x4C	; 76
    3f3c:	b0 e0       	ldi	r27, 0x00	; 0
    3f3e:	e9 81       	ldd	r30, Y+1	; 0x01
    3f40:	fa 81       	ldd	r31, Y+2	; 0x02
    3f42:	80 81       	ld	r24, Z
    3f44:	91 81       	ldd	r25, Z+1	; 0x01
    3f46:	11 96       	adiw	r26, 0x01	; 1
    3f48:	9c 93       	st	X, r25
    3f4a:	8e 93       	st	-X, r24

	OCR1A =Config_Ptr->compare_value ;
    3f4c:	aa e4       	ldi	r26, 0x4A	; 74
    3f4e:	b0 e0       	ldi	r27, 0x00	; 0
    3f50:	e9 81       	ldd	r30, Y+1	; 0x01
    3f52:	fa 81       	ldd	r31, Y+2	; 0x02
    3f54:	82 81       	ldd	r24, Z+2	; 0x02
    3f56:	93 81       	ldd	r25, Z+3	; 0x03
    3f58:	11 96       	adiw	r26, 0x01	; 1
    3f5a:	9c 93       	st	X, r25
    3f5c:	8e 93       	st	-X, r24

	if (Config_Ptr->mode) 	TIMSK |= (1<<OCIE1A);
    3f5e:	e9 81       	ldd	r30, Y+1	; 0x01
    3f60:	fa 81       	ldd	r31, Y+2	; 0x02
    3f62:	85 81       	ldd	r24, Z+5	; 0x05
    3f64:	88 23       	and	r24, r24
    3f66:	41 f0       	breq	.+16     	; 0x3f78 <Timer1_init+0x80>
    3f68:	a9 e5       	ldi	r26, 0x59	; 89
    3f6a:	b0 e0       	ldi	r27, 0x00	; 0
    3f6c:	e9 e5       	ldi	r30, 0x59	; 89
    3f6e:	f0 e0       	ldi	r31, 0x00	; 0
    3f70:	80 81       	ld	r24, Z
    3f72:	80 61       	ori	r24, 0x10	; 16
    3f74:	8c 93       	st	X, r24
    3f76:	07 c0       	rjmp	.+14     	; 0x3f86 <Timer1_init+0x8e>
	else  					TIMSK |= (1<<TOIE1);
    3f78:	a9 e5       	ldi	r26, 0x59	; 89
    3f7a:	b0 e0       	ldi	r27, 0x00	; 0
    3f7c:	e9 e5       	ldi	r30, 0x59	; 89
    3f7e:	f0 e0       	ldi	r31, 0x00	; 0
    3f80:	80 81       	ld	r24, Z
    3f82:	84 60       	ori	r24, 0x04	; 4
    3f84:	8c 93       	st	X, r24
}
    3f86:	0f 90       	pop	r0
    3f88:	0f 90       	pop	r0
    3f8a:	cf 91       	pop	r28
    3f8c:	df 91       	pop	r29
    3f8e:	08 95       	ret

00003f90 <Timer1_deInit>:


void Timer1_deInit(void)
{
    3f90:	df 93       	push	r29
    3f92:	cf 93       	push	r28
    3f94:	cd b7       	in	r28, 0x3d	; 61
    3f96:	de b7       	in	r29, 0x3e	; 62
	TCCR1B = 0;
    3f98:	ee e4       	ldi	r30, 0x4E	; 78
    3f9a:	f0 e0       	ldi	r31, 0x00	; 0
    3f9c:	10 82       	st	Z, r1
}
    3f9e:	cf 91       	pop	r28
    3fa0:	df 91       	pop	r29
    3fa2:	08 95       	ret

00003fa4 <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void))
{
    3fa4:	df 93       	push	r29
    3fa6:	cf 93       	push	r28
    3fa8:	00 d0       	rcall	.+0      	; 0x3faa <Timer1_setCallBack+0x6>
    3faa:	cd b7       	in	r28, 0x3d	; 61
    3fac:	de b7       	in	r29, 0x3e	; 62
    3fae:	9a 83       	std	Y+2, r25	; 0x02
    3fb0:	89 83       	std	Y+1, r24	; 0x01
	callBack = a_ptr;
    3fb2:	89 81       	ldd	r24, Y+1	; 0x01
    3fb4:	9a 81       	ldd	r25, Y+2	; 0x02
    3fb6:	90 93 33 01 	sts	0x0133, r25
    3fba:	80 93 32 01 	sts	0x0132, r24
}
    3fbe:	0f 90       	pop	r0
    3fc0:	0f 90       	pop	r0
    3fc2:	cf 91       	pop	r28
    3fc4:	df 91       	pop	r29
    3fc6:	08 95       	ret

00003fc8 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    3fc8:	1f 92       	push	r1
    3fca:	0f 92       	push	r0
    3fcc:	0f b6       	in	r0, 0x3f	; 63
    3fce:	0f 92       	push	r0
    3fd0:	11 24       	eor	r1, r1
    3fd2:	2f 93       	push	r18
    3fd4:	3f 93       	push	r19
    3fd6:	4f 93       	push	r20
    3fd8:	5f 93       	push	r21
    3fda:	6f 93       	push	r22
    3fdc:	7f 93       	push	r23
    3fde:	8f 93       	push	r24
    3fe0:	9f 93       	push	r25
    3fe2:	af 93       	push	r26
    3fe4:	bf 93       	push	r27
    3fe6:	ef 93       	push	r30
    3fe8:	ff 93       	push	r31
    3fea:	df 93       	push	r29
    3fec:	cf 93       	push	r28
    3fee:	cd b7       	in	r28, 0x3d	; 61
    3ff0:	de b7       	in	r29, 0x3e	; 62
	callBack();
    3ff2:	e0 91 32 01 	lds	r30, 0x0132
    3ff6:	f0 91 33 01 	lds	r31, 0x0133
    3ffa:	09 95       	icall
}
    3ffc:	cf 91       	pop	r28
    3ffe:	df 91       	pop	r29
    4000:	ff 91       	pop	r31
    4002:	ef 91       	pop	r30
    4004:	bf 91       	pop	r27
    4006:	af 91       	pop	r26
    4008:	9f 91       	pop	r25
    400a:	8f 91       	pop	r24
    400c:	7f 91       	pop	r23
    400e:	6f 91       	pop	r22
    4010:	5f 91       	pop	r21
    4012:	4f 91       	pop	r20
    4014:	3f 91       	pop	r19
    4016:	2f 91       	pop	r18
    4018:	0f 90       	pop	r0
    401a:	0f be       	out	0x3f, r0	; 63
    401c:	0f 90       	pop	r0
    401e:	1f 90       	pop	r1
    4020:	18 95       	reti

00004022 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    4022:	1f 92       	push	r1
    4024:	0f 92       	push	r0
    4026:	0f b6       	in	r0, 0x3f	; 63
    4028:	0f 92       	push	r0
    402a:	11 24       	eor	r1, r1
    402c:	2f 93       	push	r18
    402e:	3f 93       	push	r19
    4030:	4f 93       	push	r20
    4032:	5f 93       	push	r21
    4034:	6f 93       	push	r22
    4036:	7f 93       	push	r23
    4038:	8f 93       	push	r24
    403a:	9f 93       	push	r25
    403c:	af 93       	push	r26
    403e:	bf 93       	push	r27
    4040:	ef 93       	push	r30
    4042:	ff 93       	push	r31
    4044:	df 93       	push	r29
    4046:	cf 93       	push	r28
    4048:	cd b7       	in	r28, 0x3d	; 61
    404a:	de b7       	in	r29, 0x3e	; 62
	callBack();
    404c:	e0 91 32 01 	lds	r30, 0x0132
    4050:	f0 91 33 01 	lds	r31, 0x0133
    4054:	09 95       	icall
}
    4056:	cf 91       	pop	r28
    4058:	df 91       	pop	r29
    405a:	ff 91       	pop	r31
    405c:	ef 91       	pop	r30
    405e:	bf 91       	pop	r27
    4060:	af 91       	pop	r26
    4062:	9f 91       	pop	r25
    4064:	8f 91       	pop	r24
    4066:	7f 91       	pop	r23
    4068:	6f 91       	pop	r22
    406a:	5f 91       	pop	r21
    406c:	4f 91       	pop	r20
    406e:	3f 91       	pop	r19
    4070:	2f 91       	pop	r18
    4072:	0f 90       	pop	r0
    4074:	0f be       	out	0x3f, r0	; 63
    4076:	0f 90       	pop	r0
    4078:	1f 90       	pop	r1
    407a:	18 95       	reti

0000407c <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(UART_ConfigType* info)
{
    407c:	df 93       	push	r29
    407e:	cf 93       	push	r28
    4080:	00 d0       	rcall	.+0      	; 0x4082 <UART_init+0x6>
    4082:	00 d0       	rcall	.+0      	; 0x4084 <UART_init+0x8>
    4084:	cd b7       	in	r28, 0x3d	; 61
    4086:	de b7       	in	r29, 0x3e	; 62
    4088:	9c 83       	std	Y+4, r25	; 0x04
    408a:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    408c:	1a 82       	std	Y+2, r1	; 0x02
    408e:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    4090:	eb e2       	ldi	r30, 0x2B	; 43
    4092:	f0 e0       	ldi	r31, 0x00	; 0
    4094:	82 e0       	ldi	r24, 0x02	; 2
    4096:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN) | (info->bit_data << UCSZ2);
    4098:	aa e2       	ldi	r26, 0x2A	; 42
    409a:	b0 e0       	ldi	r27, 0x00	; 0
    409c:	eb 81       	ldd	r30, Y+3	; 0x03
    409e:	fc 81       	ldd	r31, Y+4	; 0x04
    40a0:	80 81       	ld	r24, Z
    40a2:	88 2f       	mov	r24, r24
    40a4:	90 e0       	ldi	r25, 0x00	; 0
    40a6:	88 0f       	add	r24, r24
    40a8:	99 1f       	adc	r25, r25
    40aa:	88 0f       	add	r24, r24
    40ac:	99 1f       	adc	r25, r25
    40ae:	88 61       	ori	r24, 0x18	; 24
    40b0:	8c 93       	st	X, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1) | (info->stop_bit << USBS);
    40b2:	a0 e4       	ldi	r26, 0x40	; 64
    40b4:	b0 e0       	ldi	r27, 0x00	; 0
    40b6:	eb 81       	ldd	r30, Y+3	; 0x03
    40b8:	fc 81       	ldd	r31, Y+4	; 0x04
    40ba:	82 81       	ldd	r24, Z+2	; 0x02
    40bc:	88 2f       	mov	r24, r24
    40be:	90 e0       	ldi	r25, 0x00	; 0
    40c0:	88 0f       	add	r24, r24
    40c2:	99 1f       	adc	r25, r25
    40c4:	88 0f       	add	r24, r24
    40c6:	99 1f       	adc	r25, r25
    40c8:	88 0f       	add	r24, r24
    40ca:	99 1f       	adc	r25, r25
    40cc:	86 68       	ori	r24, 0x86	; 134
    40ce:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xCF) | (info->parity & 0x30);
    40d0:	a0 e4       	ldi	r26, 0x40	; 64
    40d2:	b0 e0       	ldi	r27, 0x00	; 0
    40d4:	e0 e4       	ldi	r30, 0x40	; 64
    40d6:	f0 e0       	ldi	r31, 0x00	; 0
    40d8:	80 81       	ld	r24, Z
    40da:	98 2f       	mov	r25, r24
    40dc:	9f 7c       	andi	r25, 0xCF	; 207
    40de:	eb 81       	ldd	r30, Y+3	; 0x03
    40e0:	fc 81       	ldd	r31, Y+4	; 0x04
    40e2:	81 81       	ldd	r24, Z+1	; 0x01
    40e4:	80 73       	andi	r24, 0x30	; 48
    40e6:	89 2b       	or	r24, r25
    40e8:	8c 93       	st	X, r24
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (info->baud_rate * 8UL))) - 1);
    40ea:	eb 81       	ldd	r30, Y+3	; 0x03
    40ec:	fc 81       	ldd	r31, Y+4	; 0x04
    40ee:	83 81       	ldd	r24, Z+3	; 0x03
    40f0:	94 81       	ldd	r25, Z+4	; 0x04
    40f2:	a5 81       	ldd	r26, Z+5	; 0x05
    40f4:	b6 81       	ldd	r27, Z+6	; 0x06
    40f6:	88 0f       	add	r24, r24
    40f8:	99 1f       	adc	r25, r25
    40fa:	aa 1f       	adc	r26, r26
    40fc:	bb 1f       	adc	r27, r27
    40fe:	88 0f       	add	r24, r24
    4100:	99 1f       	adc	r25, r25
    4102:	aa 1f       	adc	r26, r26
    4104:	bb 1f       	adc	r27, r27
    4106:	88 0f       	add	r24, r24
    4108:	99 1f       	adc	r25, r25
    410a:	aa 1f       	adc	r26, r26
    410c:	bb 1f       	adc	r27, r27
    410e:	9c 01       	movw	r18, r24
    4110:	ad 01       	movw	r20, r26
    4112:	80 e0       	ldi	r24, 0x00	; 0
    4114:	92 e1       	ldi	r25, 0x12	; 18
    4116:	aa e7       	ldi	r26, 0x7A	; 122
    4118:	b0 e0       	ldi	r27, 0x00	; 0
    411a:	bc 01       	movw	r22, r24
    411c:	cd 01       	movw	r24, r26
    411e:	0e 94 3a 21 	call	0x4274	; 0x4274 <__udivmodsi4>
    4122:	da 01       	movw	r26, r20
    4124:	c9 01       	movw	r24, r18
    4126:	01 97       	sbiw	r24, 0x01	; 1
    4128:	9a 83       	std	Y+2, r25	; 0x02
    412a:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    412c:	e0 e4       	ldi	r30, 0x40	; 64
    412e:	f0 e0       	ldi	r31, 0x00	; 0
    4130:	89 81       	ldd	r24, Y+1	; 0x01
    4132:	9a 81       	ldd	r25, Y+2	; 0x02
    4134:	89 2f       	mov	r24, r25
    4136:	99 27       	eor	r25, r25
    4138:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    413a:	e9 e2       	ldi	r30, 0x29	; 41
    413c:	f0 e0       	ldi	r31, 0x00	; 0
    413e:	89 81       	ldd	r24, Y+1	; 0x01
    4140:	80 83       	st	Z, r24
}
    4142:	0f 90       	pop	r0
    4144:	0f 90       	pop	r0
    4146:	0f 90       	pop	r0
    4148:	0f 90       	pop	r0
    414a:	cf 91       	pop	r28
    414c:	df 91       	pop	r29
    414e:	08 95       	ret

00004150 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    4150:	df 93       	push	r29
    4152:	cf 93       	push	r28
    4154:	0f 92       	push	r0
    4156:	cd b7       	in	r28, 0x3d	; 61
    4158:	de b7       	in	r29, 0x3e	; 62
    415a:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    415c:	eb e2       	ldi	r30, 0x2B	; 43
    415e:	f0 e0       	ldi	r31, 0x00	; 0
    4160:	80 81       	ld	r24, Z
    4162:	88 2f       	mov	r24, r24
    4164:	90 e0       	ldi	r25, 0x00	; 0
    4166:	80 72       	andi	r24, 0x20	; 32
    4168:	90 70       	andi	r25, 0x00	; 0
    416a:	00 97       	sbiw	r24, 0x00	; 0
    416c:	b9 f3       	breq	.-18     	; 0x415c <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    416e:	ec e2       	ldi	r30, 0x2C	; 44
    4170:	f0 e0       	ldi	r31, 0x00	; 0
    4172:	89 81       	ldd	r24, Y+1	; 0x01
    4174:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    4176:	0f 90       	pop	r0
    4178:	cf 91       	pop	r28
    417a:	df 91       	pop	r29
    417c:	08 95       	ret

0000417e <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    417e:	df 93       	push	r29
    4180:	cf 93       	push	r28
    4182:	cd b7       	in	r28, 0x3d	; 61
    4184:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    4186:	eb e2       	ldi	r30, 0x2B	; 43
    4188:	f0 e0       	ldi	r31, 0x00	; 0
    418a:	80 81       	ld	r24, Z
    418c:	88 23       	and	r24, r24
    418e:	dc f7       	brge	.-10     	; 0x4186 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    4190:	ec e2       	ldi	r30, 0x2C	; 44
    4192:	f0 e0       	ldi	r31, 0x00	; 0
    4194:	80 81       	ld	r24, Z
}
    4196:	cf 91       	pop	r28
    4198:	df 91       	pop	r29
    419a:	08 95       	ret

0000419c <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    419c:	df 93       	push	r29
    419e:	cf 93       	push	r28
    41a0:	00 d0       	rcall	.+0      	; 0x41a2 <UART_sendString+0x6>
    41a2:	0f 92       	push	r0
    41a4:	cd b7       	in	r28, 0x3d	; 61
    41a6:	de b7       	in	r29, 0x3e	; 62
    41a8:	9b 83       	std	Y+3, r25	; 0x03
    41aa:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    41ac:	19 82       	std	Y+1, r1	; 0x01
    41ae:	0e c0       	rjmp	.+28     	; 0x41cc <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    41b0:	89 81       	ldd	r24, Y+1	; 0x01
    41b2:	28 2f       	mov	r18, r24
    41b4:	30 e0       	ldi	r19, 0x00	; 0
    41b6:	8a 81       	ldd	r24, Y+2	; 0x02
    41b8:	9b 81       	ldd	r25, Y+3	; 0x03
    41ba:	fc 01       	movw	r30, r24
    41bc:	e2 0f       	add	r30, r18
    41be:	f3 1f       	adc	r31, r19
    41c0:	80 81       	ld	r24, Z
    41c2:	0e 94 a8 20 	call	0x4150	; 0x4150 <UART_sendByte>
		i++;
    41c6:	89 81       	ldd	r24, Y+1	; 0x01
    41c8:	8f 5f       	subi	r24, 0xFF	; 255
    41ca:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    41cc:	89 81       	ldd	r24, Y+1	; 0x01
    41ce:	28 2f       	mov	r18, r24
    41d0:	30 e0       	ldi	r19, 0x00	; 0
    41d2:	8a 81       	ldd	r24, Y+2	; 0x02
    41d4:	9b 81       	ldd	r25, Y+3	; 0x03
    41d6:	fc 01       	movw	r30, r24
    41d8:	e2 0f       	add	r30, r18
    41da:	f3 1f       	adc	r31, r19
    41dc:	80 81       	ld	r24, Z
    41de:	88 23       	and	r24, r24
    41e0:	39 f7       	brne	.-50     	; 0x41b0 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    41e2:	0f 90       	pop	r0
    41e4:	0f 90       	pop	r0
    41e6:	0f 90       	pop	r0
    41e8:	cf 91       	pop	r28
    41ea:	df 91       	pop	r29
    41ec:	08 95       	ret

000041ee <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    41ee:	0f 93       	push	r16
    41f0:	1f 93       	push	r17
    41f2:	df 93       	push	r29
    41f4:	cf 93       	push	r28
    41f6:	00 d0       	rcall	.+0      	; 0x41f8 <UART_receiveString+0xa>
    41f8:	0f 92       	push	r0
    41fa:	cd b7       	in	r28, 0x3d	; 61
    41fc:	de b7       	in	r29, 0x3e	; 62
    41fe:	9b 83       	std	Y+3, r25	; 0x03
    4200:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    4202:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    4204:	89 81       	ldd	r24, Y+1	; 0x01
    4206:	28 2f       	mov	r18, r24
    4208:	30 e0       	ldi	r19, 0x00	; 0
    420a:	8a 81       	ldd	r24, Y+2	; 0x02
    420c:	9b 81       	ldd	r25, Y+3	; 0x03
    420e:	8c 01       	movw	r16, r24
    4210:	02 0f       	add	r16, r18
    4212:	13 1f       	adc	r17, r19
    4214:	0e 94 bf 20 	call	0x417e	; 0x417e <UART_recieveByte>
    4218:	f8 01       	movw	r30, r16
    421a:	80 83       	st	Z, r24
    421c:	0f c0       	rjmp	.+30     	; 0x423c <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    421e:	89 81       	ldd	r24, Y+1	; 0x01
    4220:	8f 5f       	subi	r24, 0xFF	; 255
    4222:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    4224:	89 81       	ldd	r24, Y+1	; 0x01
    4226:	28 2f       	mov	r18, r24
    4228:	30 e0       	ldi	r19, 0x00	; 0
    422a:	8a 81       	ldd	r24, Y+2	; 0x02
    422c:	9b 81       	ldd	r25, Y+3	; 0x03
    422e:	8c 01       	movw	r16, r24
    4230:	02 0f       	add	r16, r18
    4232:	13 1f       	adc	r17, r19
    4234:	0e 94 bf 20 	call	0x417e	; 0x417e <UART_recieveByte>
    4238:	f8 01       	movw	r30, r16
    423a:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    423c:	89 81       	ldd	r24, Y+1	; 0x01
    423e:	28 2f       	mov	r18, r24
    4240:	30 e0       	ldi	r19, 0x00	; 0
    4242:	8a 81       	ldd	r24, Y+2	; 0x02
    4244:	9b 81       	ldd	r25, Y+3	; 0x03
    4246:	fc 01       	movw	r30, r24
    4248:	e2 0f       	add	r30, r18
    424a:	f3 1f       	adc	r31, r19
    424c:	80 81       	ld	r24, Z
    424e:	83 32       	cpi	r24, 0x23	; 35
    4250:	31 f7       	brne	.-52     	; 0x421e <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    4252:	89 81       	ldd	r24, Y+1	; 0x01
    4254:	28 2f       	mov	r18, r24
    4256:	30 e0       	ldi	r19, 0x00	; 0
    4258:	8a 81       	ldd	r24, Y+2	; 0x02
    425a:	9b 81       	ldd	r25, Y+3	; 0x03
    425c:	fc 01       	movw	r30, r24
    425e:	e2 0f       	add	r30, r18
    4260:	f3 1f       	adc	r31, r19
    4262:	10 82       	st	Z, r1
}
    4264:	0f 90       	pop	r0
    4266:	0f 90       	pop	r0
    4268:	0f 90       	pop	r0
    426a:	cf 91       	pop	r28
    426c:	df 91       	pop	r29
    426e:	1f 91       	pop	r17
    4270:	0f 91       	pop	r16
    4272:	08 95       	ret

00004274 <__udivmodsi4>:
    4274:	a1 e2       	ldi	r26, 0x21	; 33
    4276:	1a 2e       	mov	r1, r26
    4278:	aa 1b       	sub	r26, r26
    427a:	bb 1b       	sub	r27, r27
    427c:	fd 01       	movw	r30, r26
    427e:	0d c0       	rjmp	.+26     	; 0x429a <__udivmodsi4_ep>

00004280 <__udivmodsi4_loop>:
    4280:	aa 1f       	adc	r26, r26
    4282:	bb 1f       	adc	r27, r27
    4284:	ee 1f       	adc	r30, r30
    4286:	ff 1f       	adc	r31, r31
    4288:	a2 17       	cp	r26, r18
    428a:	b3 07       	cpc	r27, r19
    428c:	e4 07       	cpc	r30, r20
    428e:	f5 07       	cpc	r31, r21
    4290:	20 f0       	brcs	.+8      	; 0x429a <__udivmodsi4_ep>
    4292:	a2 1b       	sub	r26, r18
    4294:	b3 0b       	sbc	r27, r19
    4296:	e4 0b       	sbc	r30, r20
    4298:	f5 0b       	sbc	r31, r21

0000429a <__udivmodsi4_ep>:
    429a:	66 1f       	adc	r22, r22
    429c:	77 1f       	adc	r23, r23
    429e:	88 1f       	adc	r24, r24
    42a0:	99 1f       	adc	r25, r25
    42a2:	1a 94       	dec	r1
    42a4:	69 f7       	brne	.-38     	; 0x4280 <__udivmodsi4_loop>
    42a6:	60 95       	com	r22
    42a8:	70 95       	com	r23
    42aa:	80 95       	com	r24
    42ac:	90 95       	com	r25
    42ae:	9b 01       	movw	r18, r22
    42b0:	ac 01       	movw	r20, r24
    42b2:	bd 01       	movw	r22, r26
    42b4:	cf 01       	movw	r24, r30
    42b6:	08 95       	ret

000042b8 <__prologue_saves__>:
    42b8:	2f 92       	push	r2
    42ba:	3f 92       	push	r3
    42bc:	4f 92       	push	r4
    42be:	5f 92       	push	r5
    42c0:	6f 92       	push	r6
    42c2:	7f 92       	push	r7
    42c4:	8f 92       	push	r8
    42c6:	9f 92       	push	r9
    42c8:	af 92       	push	r10
    42ca:	bf 92       	push	r11
    42cc:	cf 92       	push	r12
    42ce:	df 92       	push	r13
    42d0:	ef 92       	push	r14
    42d2:	ff 92       	push	r15
    42d4:	0f 93       	push	r16
    42d6:	1f 93       	push	r17
    42d8:	cf 93       	push	r28
    42da:	df 93       	push	r29
    42dc:	cd b7       	in	r28, 0x3d	; 61
    42de:	de b7       	in	r29, 0x3e	; 62
    42e0:	ca 1b       	sub	r28, r26
    42e2:	db 0b       	sbc	r29, r27
    42e4:	0f b6       	in	r0, 0x3f	; 63
    42e6:	f8 94       	cli
    42e8:	de bf       	out	0x3e, r29	; 62
    42ea:	0f be       	out	0x3f, r0	; 63
    42ec:	cd bf       	out	0x3d, r28	; 61
    42ee:	09 94       	ijmp

000042f0 <__epilogue_restores__>:
    42f0:	2a 88       	ldd	r2, Y+18	; 0x12
    42f2:	39 88       	ldd	r3, Y+17	; 0x11
    42f4:	48 88       	ldd	r4, Y+16	; 0x10
    42f6:	5f 84       	ldd	r5, Y+15	; 0x0f
    42f8:	6e 84       	ldd	r6, Y+14	; 0x0e
    42fa:	7d 84       	ldd	r7, Y+13	; 0x0d
    42fc:	8c 84       	ldd	r8, Y+12	; 0x0c
    42fe:	9b 84       	ldd	r9, Y+11	; 0x0b
    4300:	aa 84       	ldd	r10, Y+10	; 0x0a
    4302:	b9 84       	ldd	r11, Y+9	; 0x09
    4304:	c8 84       	ldd	r12, Y+8	; 0x08
    4306:	df 80       	ldd	r13, Y+7	; 0x07
    4308:	ee 80       	ldd	r14, Y+6	; 0x06
    430a:	fd 80       	ldd	r15, Y+5	; 0x05
    430c:	0c 81       	ldd	r16, Y+4	; 0x04
    430e:	1b 81       	ldd	r17, Y+3	; 0x03
    4310:	aa 81       	ldd	r26, Y+2	; 0x02
    4312:	b9 81       	ldd	r27, Y+1	; 0x01
    4314:	ce 0f       	add	r28, r30
    4316:	d1 1d       	adc	r29, r1
    4318:	0f b6       	in	r0, 0x3f	; 63
    431a:	f8 94       	cli
    431c:	de bf       	out	0x3e, r29	; 62
    431e:	0f be       	out	0x3f, r0	; 63
    4320:	cd bf       	out	0x3d, r28	; 61
    4322:	ed 01       	movw	r28, r26
    4324:	08 95       	ret

00004326 <itoa>:
    4326:	fb 01       	movw	r30, r22
    4328:	9f 01       	movw	r18, r30
    432a:	e8 94       	clt
    432c:	42 30       	cpi	r20, 0x02	; 2
    432e:	c4 f0       	brlt	.+48     	; 0x4360 <itoa+0x3a>
    4330:	45 32       	cpi	r20, 0x25	; 37
    4332:	b4 f4       	brge	.+44     	; 0x4360 <itoa+0x3a>
    4334:	4a 30       	cpi	r20, 0x0A	; 10
    4336:	29 f4       	brne	.+10     	; 0x4342 <itoa+0x1c>
    4338:	97 fb       	bst	r25, 7
    433a:	1e f4       	brtc	.+6      	; 0x4342 <itoa+0x1c>
    433c:	90 95       	com	r25
    433e:	81 95       	neg	r24
    4340:	9f 4f       	sbci	r25, 0xFF	; 255
    4342:	64 2f       	mov	r22, r20
    4344:	77 27       	eor	r23, r23
    4346:	0e 94 c4 21 	call	0x4388	; 0x4388 <__udivmodhi4>
    434a:	80 5d       	subi	r24, 0xD0	; 208
    434c:	8a 33       	cpi	r24, 0x3A	; 58
    434e:	0c f0       	brlt	.+2      	; 0x4352 <itoa+0x2c>
    4350:	89 5d       	subi	r24, 0xD9	; 217
    4352:	81 93       	st	Z+, r24
    4354:	cb 01       	movw	r24, r22
    4356:	00 97       	sbiw	r24, 0x00	; 0
    4358:	a1 f7       	brne	.-24     	; 0x4342 <itoa+0x1c>
    435a:	16 f4       	brtc	.+4      	; 0x4360 <itoa+0x3a>
    435c:	5d e2       	ldi	r21, 0x2D	; 45
    435e:	51 93       	st	Z+, r21
    4360:	10 82       	st	Z, r1
    4362:	c9 01       	movw	r24, r18
    4364:	0c 94 b4 21 	jmp	0x4368	; 0x4368 <strrev>

00004368 <strrev>:
    4368:	dc 01       	movw	r26, r24
    436a:	fc 01       	movw	r30, r24
    436c:	67 2f       	mov	r22, r23
    436e:	71 91       	ld	r23, Z+
    4370:	77 23       	and	r23, r23
    4372:	e1 f7       	brne	.-8      	; 0x436c <strrev+0x4>
    4374:	32 97       	sbiw	r30, 0x02	; 2
    4376:	04 c0       	rjmp	.+8      	; 0x4380 <strrev+0x18>
    4378:	7c 91       	ld	r23, X
    437a:	6d 93       	st	X+, r22
    437c:	70 83       	st	Z, r23
    437e:	62 91       	ld	r22, -Z
    4380:	ae 17       	cp	r26, r30
    4382:	bf 07       	cpc	r27, r31
    4384:	c8 f3       	brcs	.-14     	; 0x4378 <strrev+0x10>
    4386:	08 95       	ret

00004388 <__udivmodhi4>:
    4388:	aa 1b       	sub	r26, r26
    438a:	bb 1b       	sub	r27, r27
    438c:	51 e1       	ldi	r21, 0x11	; 17
    438e:	07 c0       	rjmp	.+14     	; 0x439e <__udivmodhi4_ep>

00004390 <__udivmodhi4_loop>:
    4390:	aa 1f       	adc	r26, r26
    4392:	bb 1f       	adc	r27, r27
    4394:	a6 17       	cp	r26, r22
    4396:	b7 07       	cpc	r27, r23
    4398:	10 f0       	brcs	.+4      	; 0x439e <__udivmodhi4_ep>
    439a:	a6 1b       	sub	r26, r22
    439c:	b7 0b       	sbc	r27, r23

0000439e <__udivmodhi4_ep>:
    439e:	88 1f       	adc	r24, r24
    43a0:	99 1f       	adc	r25, r25
    43a2:	5a 95       	dec	r21
    43a4:	a9 f7       	brne	.-22     	; 0x4390 <__udivmodhi4_loop>
    43a6:	80 95       	com	r24
    43a8:	90 95       	com	r25
    43aa:	bc 01       	movw	r22, r24
    43ac:	cd 01       	movw	r24, r26
    43ae:	08 95       	ret

000043b0 <_exit>:
    43b0:	f8 94       	cli

000043b2 <__stop_program>:
    43b2:	ff cf       	rjmp	.-2      	; 0x43b2 <__stop_program>
